
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08006d90  08006d90  00016d90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071a4  080071a4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080071a4  080071a4  000171a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071ac  080071ac  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071ac  080071ac  000171ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071b0  080071b0  000171b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080071b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          000000e0  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002bc  200002bc  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a2c5  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a7f  00000000  00000000  0002a4d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000870  00000000  00000000  0002bf50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007c8  00000000  00000000  0002c7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022257  00000000  00000000  0002cf88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a836  00000000  00000000  0004f1df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d079b  00000000  00000000  00059a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012a1b0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003384  00000000  00000000  0012a200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d78 	.word	0x08006d78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08006d78 	.word	0x08006d78

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <uprintf>:
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */


void uprintf(char *str)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) str, strlen(str), 100);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff f93b 	bl	80001d0 <strlen>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	2364      	movs	r3, #100	; 0x64
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	4803      	ldr	r0, [pc, #12]	; (8000f70 <uprintf+0x24>)
 8000f64:	f002 f82d 	bl	8002fc2 <HAL_UART_Transmit>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000260 	.word	0x20000260
 8000f74:	00000000 	.word	0x00000000

08000f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7e:	f000 fb65 	bl	800164c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f82:	f000 f85d 	bl	8001040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f86:	f000 f941 	bl	800120c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f8a:	f000 f8c3 	bl	8001114 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000f8e:	f000 f913 	bl	80011b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint16_t result = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	80bb      	strh	r3, [r7, #4]
  float V = 0;
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	603b      	str	r3, [r7, #0]
  uint16_t measurement=0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	80fb      	strh	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8000fa0:	4823      	ldr	r0, [pc, #140]	; (8001030 <main+0xb8>)
 8000fa2:	f000 fc2d 	bl	8001800 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000fa6:	2164      	movs	r1, #100	; 0x64
 8000fa8:	4821      	ldr	r0, [pc, #132]	; (8001030 <main+0xb8>)
 8000faa:	f000 fd2e 	bl	8001a0a <HAL_ADC_PollForConversion>
	  result = HAL_ADC_GetValue(&hadc1);
 8000fae:	4820      	ldr	r0, [pc, #128]	; (8001030 <main+0xb8>)
 8000fb0:	f000 fdb6 	bl	8001b20 <HAL_ADC_GetValue>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	80bb      	strh	r3, [r7, #4]
	  HAL_ADC_Stop(&hadc1);
 8000fb8:	481d      	ldr	r0, [pc, #116]	; (8001030 <main+0xb8>)
 8000fba:	f000 fcf3 	bl	80019a4 <HAL_ADC_Stop>
	  V = ((float)result / (float)4096) * 3.3;
 8000fbe:	88bb      	ldrh	r3, [r7, #4]
 8000fc0:	ee07 3a90 	vmov	s15, r3
 8000fc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fc8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001034 <main+0xbc>
 8000fcc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fd0:	ee16 0a90 	vmov	r0, s13
 8000fd4:	f7ff fab8 	bl	8000548 <__aeabi_f2d>
 8000fd8:	a313      	add	r3, pc, #76	; (adr r3, 8001028 <main+0xb0>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	f7ff fb0b 	bl	80005f8 <__aeabi_dmul>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f7ff fddd 	bl	8000ba8 <__aeabi_d2f>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	603b      	str	r3, [r7, #0]

	  measurement++;
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	80fb      	strh	r3, [r7, #6]
	  sprintf(buffer, "Measurement:%d  Volts: %1.2f\n\r", measurement, V);
 8000ff8:	88fc      	ldrh	r4, [r7, #6]
 8000ffa:	6838      	ldr	r0, [r7, #0]
 8000ffc:	f7ff faa4 	bl	8000548 <__aeabi_f2d>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	e9cd 2300 	strd	r2, r3, [sp]
 8001008:	4622      	mov	r2, r4
 800100a:	490b      	ldr	r1, [pc, #44]	; (8001038 <main+0xc0>)
 800100c:	480b      	ldr	r0, [pc, #44]	; (800103c <main+0xc4>)
 800100e:	f003 fc3b 	bl	8004888 <siprintf>
	  uprintf(buffer);
 8001012:	480a      	ldr	r0, [pc, #40]	; (800103c <main+0xc4>)
 8001014:	f7ff ff9a 	bl	8000f4c <uprintf>

	  HAL_Delay(500);
 8001018:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800101c:	f000 fb88 	bl	8001730 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8001020:	e7be      	b.n	8000fa0 <main+0x28>
 8001022:	bf00      	nop
 8001024:	f3af 8000 	nop.w
 8001028:	66666666 	.word	0x66666666
 800102c:	400a6666 	.word	0x400a6666
 8001030:	20000218 	.word	0x20000218
 8001034:	45800000 	.word	0x45800000
 8001038:	08006d90 	.word	0x08006d90
 800103c:	200001f8 	.word	0x200001f8

08001040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b094      	sub	sp, #80	; 0x50
 8001044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	f107 0320 	add.w	r3, r7, #32
 800104a:	2230      	movs	r2, #48	; 0x30
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f002 ffa8 	bl	8003fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	2300      	movs	r3, #0
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	4b28      	ldr	r3, [pc, #160]	; (800110c <SystemClock_Config+0xcc>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	4a27      	ldr	r2, [pc, #156]	; (800110c <SystemClock_Config+0xcc>)
 800106e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001072:	6413      	str	r3, [r2, #64]	; 0x40
 8001074:	4b25      	ldr	r3, [pc, #148]	; (800110c <SystemClock_Config+0xcc>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001080:	2300      	movs	r3, #0
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	4b22      	ldr	r3, [pc, #136]	; (8001110 <SystemClock_Config+0xd0>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a21      	ldr	r2, [pc, #132]	; (8001110 <SystemClock_Config+0xd0>)
 800108a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <SystemClock_Config+0xd0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800109c:	2301      	movs	r3, #1
 800109e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a6:	2302      	movs	r3, #2
 80010a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010b0:	2304      	movs	r3, #4
 80010b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010b4:	23a8      	movs	r3, #168	; 0xa8
 80010b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010b8:	2302      	movs	r3, #2
 80010ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010bc:	2304      	movs	r3, #4
 80010be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c0:	f107 0320 	add.w	r3, r7, #32
 80010c4:	4618      	mov	r0, r3
 80010c6:	f001 fa97 	bl	80025f8 <HAL_RCC_OscConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010d0:	f000 f8c4 	bl	800125c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d4:	230f      	movs	r3, #15
 80010d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d8:	2302      	movs	r3, #2
 80010da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2105      	movs	r1, #5
 80010f2:	4618      	mov	r0, r3
 80010f4:	f001 fcf8 	bl	8002ae8 <HAL_RCC_ClockConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010fe:	f000 f8ad 	bl	800125c <Error_Handler>
  }
}
 8001102:	bf00      	nop
 8001104:	3750      	adds	r7, #80	; 0x50
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800
 8001110:	40007000 	.word	0x40007000

08001114 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800111a:	463b      	mov	r3, r7
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001126:	4b21      	ldr	r3, [pc, #132]	; (80011ac <MX_ADC1_Init+0x98>)
 8001128:	4a21      	ldr	r2, [pc, #132]	; (80011b0 <MX_ADC1_Init+0x9c>)
 800112a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <MX_ADC1_Init+0x98>)
 800112e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001132:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001134:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <MX_ADC1_Init+0x98>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <MX_ADC1_Init+0x98>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001140:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <MX_ADC1_Init+0x98>)
 8001142:	2200      	movs	r2, #0
 8001144:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <MX_ADC1_Init+0x98>)
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800114e:	4b17      	ldr	r3, [pc, #92]	; (80011ac <MX_ADC1_Init+0x98>)
 8001150:	2200      	movs	r2, #0
 8001152:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001154:	4b15      	ldr	r3, [pc, #84]	; (80011ac <MX_ADC1_Init+0x98>)
 8001156:	4a17      	ldr	r2, [pc, #92]	; (80011b4 <MX_ADC1_Init+0xa0>)
 8001158:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <MX_ADC1_Init+0x98>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_ADC1_Init+0x98>)
 8001162:	2201      	movs	r2, #1
 8001164:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_ADC1_Init+0x98>)
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_ADC1_Init+0x98>)
 8001170:	2201      	movs	r2, #1
 8001172:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001174:	480d      	ldr	r0, [pc, #52]	; (80011ac <MX_ADC1_Init+0x98>)
 8001176:	f000 faff 	bl	8001778 <HAL_ADC_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001180:	f000 f86c 	bl	800125c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001184:	2300      	movs	r3, #0
 8001186:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001188:	2301      	movs	r3, #1
 800118a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800118c:	2300      	movs	r3, #0
 800118e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001190:	463b      	mov	r3, r7
 8001192:	4619      	mov	r1, r3
 8001194:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_ADC1_Init+0x98>)
 8001196:	f000 fcd1 	bl	8001b3c <HAL_ADC_ConfigChannel>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011a0:	f000 f85c 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000218 	.word	0x20000218
 80011b0:	40012000 	.word	0x40012000
 80011b4:	0f000001 	.word	0x0f000001

080011b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011be:	4a12      	ldr	r2, [pc, #72]	; (8001208 <MX_USART2_UART_Init+0x50>)
 80011c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011c2:	4b10      	ldr	r3, [pc, #64]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ca:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011de:	220c      	movs	r2, #12
 80011e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ee:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_USART2_UART_Init+0x4c>)
 80011f0:	f001 fe9a 	bl	8002f28 <HAL_UART_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011fa:	f000 f82f 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000260 	.word	0x20000260
 8001208:	40004400 	.word	0x40004400

0800120c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	4b10      	ldr	r3, [pc, #64]	; (8001258 <MX_GPIO_Init+0x4c>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <MX_GPIO_Init+0x4c>)
 800121c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <MX_GPIO_Init+0x4c>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	603b      	str	r3, [r7, #0]
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_GPIO_Init+0x4c>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a08      	ldr	r2, [pc, #32]	; (8001258 <MX_GPIO_Init+0x4c>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_GPIO_Init+0x4c>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	683b      	ldr	r3, [r7, #0]

}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800

0800125c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001260:	b672      	cpsid	i
}
 8001262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001264:	e7fe      	b.n	8001264 <Error_Handler+0x8>
	...

08001268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <HAL_MspInit+0x4c>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a0f      	ldr	r2, [pc, #60]	; (80012b4 <HAL_MspInit+0x4c>)
 8001278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127c:	6453      	str	r3, [r2, #68]	; 0x44
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <HAL_MspInit+0x4c>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <HAL_MspInit+0x4c>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a08      	ldr	r2, [pc, #32]	; (80012b4 <HAL_MspInit+0x4c>)
 8001294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_MspInit+0x4c>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800

080012b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a17      	ldr	r2, [pc, #92]	; (8001334 <HAL_ADC_MspInit+0x7c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d127      	bne.n	800132a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <HAL_ADC_MspInit+0x80>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	4a15      	ldr	r2, [pc, #84]	; (8001338 <HAL_ADC_MspInit+0x80>)
 80012e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ea:	4b13      	ldr	r3, [pc, #76]	; (8001338 <HAL_ADC_MspInit+0x80>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <HAL_ADC_MspInit+0x80>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <HAL_ADC_MspInit+0x80>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <HAL_ADC_MspInit+0x80>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001312:	2301      	movs	r3, #1
 8001314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001316:	2303      	movs	r3, #3
 8001318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <HAL_ADC_MspInit+0x84>)
 8001326:	f000 ffcb 	bl	80022c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800132a:	bf00      	nop
 800132c:	3728      	adds	r7, #40	; 0x28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40012000 	.word	0x40012000
 8001338:	40023800 	.word	0x40023800
 800133c:	40020000 	.word	0x40020000

08001340 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08a      	sub	sp, #40	; 0x28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a1d      	ldr	r2, [pc, #116]	; (80013d4 <HAL_UART_MspInit+0x94>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d133      	bne.n	80013ca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <HAL_UART_MspInit+0x98>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a1b      	ldr	r2, [pc, #108]	; (80013d8 <HAL_UART_MspInit+0x98>)
 800136c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <HAL_UART_MspInit+0x98>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_UART_MspInit+0x98>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <HAL_UART_MspInit+0x98>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_UART_MspInit+0x98>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800139a:	230c      	movs	r3, #12
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013aa:	2307      	movs	r3, #7
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4809      	ldr	r0, [pc, #36]	; (80013dc <HAL_UART_MspInit+0x9c>)
 80013b6:	f000 ff83 	bl	80022c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	2026      	movs	r0, #38	; 0x26
 80013c0:	f000 feb5 	bl	800212e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013c4:	2026      	movs	r0, #38	; 0x26
 80013c6:	f000 fece 	bl	8002166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013ca:	bf00      	nop
 80013cc:	3728      	adds	r7, #40	; 0x28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40004400 	.word	0x40004400
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020000 	.word	0x40020000

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <NMI_Handler+0x4>

080013e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e6:	b480      	push	{r7}
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <MemManage_Handler+0x4>

080013f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <BusFault_Handler+0x4>

080013f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <UsageFault_Handler+0x4>

080013fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800142c:	f000 f960 	bl	80016f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}

08001434 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <USART2_IRQHandler+0x10>)
 800143a:	f001 fe55 	bl	80030e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000260 	.word	0x20000260

08001448 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
	return 1;
 800144c:	2301      	movs	r3, #1
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <_kill>:

int _kill(int pid, int sig)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001462:	f002 fd75 	bl	8003f50 <__errno>
 8001466:	4603      	mov	r3, r0
 8001468:	2216      	movs	r2, #22
 800146a:	601a      	str	r2, [r3, #0]
	return -1;
 800146c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <_exit>:

void _exit (int status)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001480:	f04f 31ff 	mov.w	r1, #4294967295
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ffe7 	bl	8001458 <_kill>
	while (1) {}		/* Make sure we hang here */
 800148a:	e7fe      	b.n	800148a <_exit+0x12>

0800148c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	e00a      	b.n	80014b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800149e:	f3af 8000 	nop.w
 80014a2:	4601      	mov	r1, r0
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	60ba      	str	r2, [r7, #8]
 80014aa:	b2ca      	uxtb	r2, r1
 80014ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	3301      	adds	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
 80014b4:	697a      	ldr	r2, [r7, #20]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	dbf0      	blt.n	800149e <_read+0x12>
	}

return len;
 80014bc:	687b      	ldr	r3, [r7, #4]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b086      	sub	sp, #24
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	e009      	b.n	80014ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	60ba      	str	r2, [r7, #8]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	dbf1      	blt.n	80014d8 <_write+0x12>
	}
	return len;
 80014f4:	687b      	ldr	r3, [r7, #4]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <_close>:

int _close(int file)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
	return -1;
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001526:	605a      	str	r2, [r3, #4]
	return 0;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <_isatty>:

int _isatty(int file)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
	return 1;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
	return 0;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001570:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <_sbrk+0x5c>)
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <_sbrk+0x60>)
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <_sbrk+0x64>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d102      	bne.n	800158a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <_sbrk+0x64>)
 8001586:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <_sbrk+0x68>)
 8001588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <_sbrk+0x64>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	429a      	cmp	r2, r3
 8001596:	d207      	bcs.n	80015a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001598:	f002 fcda 	bl	8003f50 <__errno>
 800159c:	4603      	mov	r3, r0
 800159e:	220c      	movs	r2, #12
 80015a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295
 80015a6:	e009      	b.n	80015bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <_sbrk+0x64>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ae:	4b07      	ldr	r3, [pc, #28]	; (80015cc <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	4a05      	ldr	r2, [pc, #20]	; (80015cc <_sbrk+0x64>)
 80015b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ba:	68fb      	ldr	r3, [r7, #12]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20020000 	.word	0x20020000
 80015c8:	00000400 	.word	0x00000400
 80015cc:	200002a4 	.word	0x200002a4
 80015d0:	200002c0 	.word	0x200002c0

080015d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <SystemInit+0x20>)
 80015da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015de:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <SystemInit+0x20>)
 80015e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001630 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015fc:	480d      	ldr	r0, [pc, #52]	; (8001634 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015fe:	490e      	ldr	r1, [pc, #56]	; (8001638 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001600:	4a0e      	ldr	r2, [pc, #56]	; (800163c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001604:	e002      	b.n	800160c <LoopCopyDataInit>

08001606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160a:	3304      	adds	r3, #4

0800160c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800160c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001610:	d3f9      	bcc.n	8001606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001612:	4a0b      	ldr	r2, [pc, #44]	; (8001640 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001614:	4c0b      	ldr	r4, [pc, #44]	; (8001644 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001618:	e001      	b.n	800161e <LoopFillZerobss>

0800161a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800161c:	3204      	adds	r2, #4

0800161e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001620:	d3fb      	bcc.n	800161a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001622:	f7ff ffd7 	bl	80015d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001626:	f002 fc99 	bl	8003f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800162a:	f7ff fca5 	bl	8000f78 <main>
  bx  lr    
 800162e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001630:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001638:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800163c:	080071b4 	.word	0x080071b4
  ldr r2, =_sbss
 8001640:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001644:	200002bc 	.word	0x200002bc

08001648 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001648:	e7fe      	b.n	8001648 <ADC_IRQHandler>
	...

0800164c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001650:	4b0e      	ldr	r3, [pc, #56]	; (800168c <HAL_Init+0x40>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a0d      	ldr	r2, [pc, #52]	; (800168c <HAL_Init+0x40>)
 8001656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800165a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <HAL_Init+0x40>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0a      	ldr	r2, [pc, #40]	; (800168c <HAL_Init+0x40>)
 8001662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001666:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <HAL_Init+0x40>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a07      	ldr	r2, [pc, #28]	; (800168c <HAL_Init+0x40>)
 800166e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001672:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001674:	2003      	movs	r0, #3
 8001676:	f000 fd4f 	bl	8002118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800167a:	200f      	movs	r0, #15
 800167c:	f000 f808 	bl	8001690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001680:	f7ff fdf2 	bl	8001268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40023c00 	.word	0x40023c00

08001690 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <HAL_InitTick+0x54>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <HAL_InitTick+0x58>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	4619      	mov	r1, r3
 80016a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 fd67 	bl	8002182 <HAL_SYSTICK_Config>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e00e      	b.n	80016dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b0f      	cmp	r3, #15
 80016c2:	d80a      	bhi.n	80016da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c4:	2200      	movs	r2, #0
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	f000 fd2f 	bl	800212e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d0:	4a06      	ldr	r2, [pc, #24]	; (80016ec <HAL_InitTick+0x5c>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	e000      	b.n	80016dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000000 	.word	0x20000000
 80016e8:	20000008 	.word	0x20000008
 80016ec:	20000004 	.word	0x20000004

080016f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <HAL_IncTick+0x20>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_IncTick+0x24>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	4a04      	ldr	r2, [pc, #16]	; (8001714 <HAL_IncTick+0x24>)
 8001702:	6013      	str	r3, [r2, #0]
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000008 	.word	0x20000008
 8001714:	200002a8 	.word	0x200002a8

08001718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return uwTick;
 800171c:	4b03      	ldr	r3, [pc, #12]	; (800172c <HAL_GetTick+0x14>)
 800171e:	681b      	ldr	r3, [r3, #0]
}
 8001720:	4618      	mov	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	200002a8 	.word	0x200002a8

08001730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001738:	f7ff ffee 	bl	8001718 <HAL_GetTick>
 800173c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001748:	d005      	beq.n	8001756 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <HAL_Delay+0x44>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001756:	bf00      	nop
 8001758:	f7ff ffde 	bl	8001718 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	429a      	cmp	r2, r3
 8001766:	d8f7      	bhi.n	8001758 <HAL_Delay+0x28>
  {
  }
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000008 	.word	0x20000008

08001778 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001780:	2300      	movs	r3, #0
 8001782:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e033      	b.n	80017f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	2b00      	cmp	r3, #0
 8001794:	d109      	bne.n	80017aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff fd8e 	bl	80012b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f003 0310 	and.w	r3, r3, #16
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d118      	bne.n	80017e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017be:	f023 0302 	bic.w	r3, r3, #2
 80017c2:	f043 0202 	orr.w	r2, r3, #2
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 fad8 	bl	8001d80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f023 0303 	bic.w	r3, r3, #3
 80017de:	f043 0201 	orr.w	r2, r3, #1
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	641a      	str	r2, [r3, #64]	; 0x40
 80017e6:	e001      	b.n	80017ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001808:	2300      	movs	r3, #0
 800180a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001812:	2b01      	cmp	r3, #1
 8001814:	d101      	bne.n	800181a <HAL_ADC_Start+0x1a>
 8001816:	2302      	movs	r3, #2
 8001818:	e0b2      	b.n	8001980 <HAL_ADC_Start+0x180>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b01      	cmp	r3, #1
 800182e:	d018      	beq.n	8001862 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0201 	orr.w	r2, r2, #1
 800183e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001840:	4b52      	ldr	r3, [pc, #328]	; (800198c <HAL_ADC_Start+0x18c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a52      	ldr	r2, [pc, #328]	; (8001990 <HAL_ADC_Start+0x190>)
 8001846:	fba2 2303 	umull	r2, r3, r2, r3
 800184a:	0c9a      	lsrs	r2, r3, #18
 800184c:	4613      	mov	r3, r2
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	4413      	add	r3, r2
 8001852:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001854:	e002      	b.n	800185c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	3b01      	subs	r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f9      	bne.n	8001856 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b01      	cmp	r3, #1
 800186e:	d17a      	bne.n	8001966 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001874:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001878:	f023 0301 	bic.w	r3, r3, #1
 800187c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188e:	2b00      	cmp	r3, #0
 8001890:	d007      	beq.n	80018a2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800189a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018ae:	d106      	bne.n	80018be <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b4:	f023 0206 	bic.w	r2, r3, #6
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	645a      	str	r2, [r3, #68]	; 0x44
 80018bc:	e002      	b.n	80018c4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018cc:	4b31      	ldr	r3, [pc, #196]	; (8001994 <HAL_ADC_Start+0x194>)
 80018ce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018d8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 031f 	and.w	r3, r3, #31
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d12a      	bne.n	800193c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a2b      	ldr	r2, [pc, #172]	; (8001998 <HAL_ADC_Start+0x198>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d015      	beq.n	800191c <HAL_ADC_Start+0x11c>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a29      	ldr	r2, [pc, #164]	; (800199c <HAL_ADC_Start+0x19c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d105      	bne.n	8001906 <HAL_ADC_Start+0x106>
 80018fa:	4b26      	ldr	r3, [pc, #152]	; (8001994 <HAL_ADC_Start+0x194>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f003 031f 	and.w	r3, r3, #31
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00a      	beq.n	800191c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a25      	ldr	r2, [pc, #148]	; (80019a0 <HAL_ADC_Start+0x1a0>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d136      	bne.n	800197e <HAL_ADC_Start+0x17e>
 8001910:	4b20      	ldr	r3, [pc, #128]	; (8001994 <HAL_ADC_Start+0x194>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 0310 	and.w	r3, r3, #16
 8001918:	2b00      	cmp	r3, #0
 800191a:	d130      	bne.n	800197e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d129      	bne.n	800197e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	e020      	b.n	800197e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a15      	ldr	r2, [pc, #84]	; (8001998 <HAL_ADC_Start+0x198>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d11b      	bne.n	800197e <HAL_ADC_Start+0x17e>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d114      	bne.n	800197e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	e00b      	b.n	800197e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f043 0210 	orr.w	r2, r3, #16
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	f043 0201 	orr.w	r2, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	20000000 	.word	0x20000000
 8001990:	431bde83 	.word	0x431bde83
 8001994:	40012300 	.word	0x40012300
 8001998:	40012000 	.word	0x40012000
 800199c:	40012100 	.word	0x40012100
 80019a0:	40012200 	.word	0x40012200

080019a4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d101      	bne.n	80019ba <HAL_ADC_Stop+0x16>
 80019b6:	2302      	movs	r3, #2
 80019b8:	e021      	b.n	80019fe <HAL_ADC_Stop+0x5a>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0201 	bic.w	r2, r2, #1
 80019d0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d109      	bne.n	80019f4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019e8:	f023 0301 	bic.w	r3, r3, #1
 80019ec:	f043 0201 	orr.w	r2, r3, #1
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b084      	sub	sp, #16
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
 8001a12:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a26:	d113      	bne.n	8001a50 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a36:	d10b      	bne.n	8001a50 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	f043 0220 	orr.w	r2, r3, #32
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e063      	b.n	8001b18 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a50:	f7ff fe62 	bl	8001718 <HAL_GetTick>
 8001a54:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a56:	e021      	b.n	8001a9c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5e:	d01d      	beq.n	8001a9c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d007      	beq.n	8001a76 <HAL_ADC_PollForConversion+0x6c>
 8001a66:	f7ff fe57 	bl	8001718 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d212      	bcs.n	8001a9c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d00b      	beq.n	8001a9c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	f043 0204 	orr.w	r2, r3, #4
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e03d      	b.n	8001b18 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d1d6      	bne.n	8001a58 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f06f 0212 	mvn.w	r2, #18
 8001ab2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d123      	bne.n	8001b16 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d11f      	bne.n	8001b16 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001adc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d006      	beq.n	8001af2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d111      	bne.n	8001b16 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d105      	bne.n	8001b16 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f043 0201 	orr.w	r2, r3, #1
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x1c>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e105      	b.n	8001d64 <HAL_ADC_ConfigChannel+0x228>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b09      	cmp	r3, #9
 8001b66:	d925      	bls.n	8001bb4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68d9      	ldr	r1, [r3, #12]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	461a      	mov	r2, r3
 8001b76:	4613      	mov	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3b1e      	subs	r3, #30
 8001b7e:	2207      	movs	r2, #7
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43da      	mvns	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	400a      	ands	r2, r1
 8001b8c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68d9      	ldr	r1, [r3, #12]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4403      	add	r3, r0
 8001ba6:	3b1e      	subs	r3, #30
 8001ba8:	409a      	lsls	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	e022      	b.n	8001bfa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6919      	ldr	r1, [r3, #16]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	2207      	movs	r2, #7
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43da      	mvns	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	400a      	ands	r2, r1
 8001bd6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6919      	ldr	r1, [r3, #16]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	4618      	mov	r0, r3
 8001bea:	4603      	mov	r3, r0
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	4403      	add	r3, r0
 8001bf0:	409a      	lsls	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d824      	bhi.n	8001c4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685a      	ldr	r2, [r3, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	3b05      	subs	r3, #5
 8001c14:	221f      	movs	r2, #31
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	400a      	ands	r2, r1
 8001c22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	4618      	mov	r0, r3
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3b05      	subs	r3, #5
 8001c3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	635a      	str	r2, [r3, #52]	; 0x34
 8001c4a:	e04c      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b0c      	cmp	r3, #12
 8001c52:	d824      	bhi.n	8001c9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	3b23      	subs	r3, #35	; 0x23
 8001c66:	221f      	movs	r2, #31
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43da      	mvns	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	400a      	ands	r2, r1
 8001c74:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3b23      	subs	r3, #35	; 0x23
 8001c90:	fa00 f203 	lsl.w	r2, r0, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c9c:	e023      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	3b41      	subs	r3, #65	; 0x41
 8001cb0:	221f      	movs	r2, #31
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	4618      	mov	r0, r3
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3b41      	subs	r3, #65	; 0x41
 8001cda:	fa00 f203 	lsl.w	r2, r0, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ce6:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <HAL_ADC_ConfigChannel+0x234>)
 8001ce8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a21      	ldr	r2, [pc, #132]	; (8001d74 <HAL_ADC_ConfigChannel+0x238>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d109      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x1cc>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b12      	cmp	r3, #18
 8001cfa:	d105      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a19      	ldr	r2, [pc, #100]	; (8001d74 <HAL_ADC_ConfigChannel+0x238>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d123      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x21e>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b10      	cmp	r3, #16
 8001d18:	d003      	beq.n	8001d22 <HAL_ADC_ConfigChannel+0x1e6>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b11      	cmp	r3, #17
 8001d20:	d11b      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2b10      	cmp	r3, #16
 8001d34:	d111      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d36:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <HAL_ADC_ConfigChannel+0x23c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a10      	ldr	r2, [pc, #64]	; (8001d7c <HAL_ADC_ConfigChannel+0x240>)
 8001d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d40:	0c9a      	lsrs	r2, r3, #18
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d4c:	e002      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	3b01      	subs	r3, #1
 8001d52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f9      	bne.n	8001d4e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	40012300 	.word	0x40012300
 8001d74:	40012000 	.word	0x40012000
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	431bde83 	.word	0x431bde83

08001d80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d88:	4b79      	ldr	r3, [pc, #484]	; (8001f70 <ADC_Init+0x1f0>)
 8001d8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	431a      	orrs	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001db4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6859      	ldr	r1, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	021a      	lsls	r2, r3, #8
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001dd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6859      	ldr	r1, [r3, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6899      	ldr	r1, [r3, #8]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e12:	4a58      	ldr	r2, [pc, #352]	; (8001f74 <ADC_Init+0x1f4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d022      	beq.n	8001e5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6899      	ldr	r1, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6899      	ldr	r1, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	430a      	orrs	r2, r1
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	e00f      	b.n	8001e7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0202 	bic.w	r2, r2, #2
 8001e8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6899      	ldr	r1, [r3, #8]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	7e1b      	ldrb	r3, [r3, #24]
 8001e98:	005a      	lsls	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d01b      	beq.n	8001ee4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001eca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6859      	ldr	r1, [r3, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	035a      	lsls	r2, r3, #13
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	e007      	b.n	8001ef4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ef2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	051a      	lsls	r2, r3, #20
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6899      	ldr	r1, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f36:	025a      	lsls	r2, r3, #9
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6899      	ldr	r1, [r3, #8]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	029a      	lsls	r2, r3, #10
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	609a      	str	r2, [r3, #8]
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	40012300 	.word	0x40012300
 8001f74:	0f000001 	.word	0x0f000001

08001f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f94:	4013      	ands	r3, r2
 8001f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001faa:	4a04      	ldr	r2, [pc, #16]	; (8001fbc <__NVIC_SetPriorityGrouping+0x44>)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	60d3      	str	r3, [r2, #12]
}
 8001fb0:	bf00      	nop
 8001fb2:	3714      	adds	r7, #20
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	f003 0307 	and.w	r3, r3, #7
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	db0b      	blt.n	8002006 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	f003 021f 	and.w	r2, r3, #31
 8001ff4:	4907      	ldr	r1, [pc, #28]	; (8002014 <__NVIC_EnableIRQ+0x38>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8002002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	e000e100 	.word	0xe000e100

08002018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	6039      	str	r1, [r7, #0]
 8002022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002028:	2b00      	cmp	r3, #0
 800202a:	db0a      	blt.n	8002042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	b2da      	uxtb	r2, r3
 8002030:	490c      	ldr	r1, [pc, #48]	; (8002064 <__NVIC_SetPriority+0x4c>)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	0112      	lsls	r2, r2, #4
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	440b      	add	r3, r1
 800203c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002040:	e00a      	b.n	8002058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4908      	ldr	r1, [pc, #32]	; (8002068 <__NVIC_SetPriority+0x50>)
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	3b04      	subs	r3, #4
 8002050:	0112      	lsls	r2, r2, #4
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	440b      	add	r3, r1
 8002056:	761a      	strb	r2, [r3, #24]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	e000e100 	.word	0xe000e100
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	; 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f1c3 0307 	rsb	r3, r3, #7
 8002086:	2b04      	cmp	r3, #4
 8002088:	bf28      	it	cs
 800208a:	2304      	movcs	r3, #4
 800208c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3304      	adds	r3, #4
 8002092:	2b06      	cmp	r3, #6
 8002094:	d902      	bls.n	800209c <NVIC_EncodePriority+0x30>
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	3b03      	subs	r3, #3
 800209a:	e000      	b.n	800209e <NVIC_EncodePriority+0x32>
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	f04f 32ff 	mov.w	r2, #4294967295
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43da      	mvns	r2, r3
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	401a      	ands	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b4:	f04f 31ff 	mov.w	r1, #4294967295
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	43d9      	mvns	r1, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	4313      	orrs	r3, r2
         );
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3724      	adds	r7, #36	; 0x24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3b01      	subs	r3, #1
 80020e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020e4:	d301      	bcc.n	80020ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020e6:	2301      	movs	r3, #1
 80020e8:	e00f      	b.n	800210a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ea:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <SysTick_Config+0x40>)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f2:	210f      	movs	r1, #15
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295
 80020f8:	f7ff ff8e 	bl	8002018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <SysTick_Config+0x40>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002102:	4b04      	ldr	r3, [pc, #16]	; (8002114 <SysTick_Config+0x40>)
 8002104:	2207      	movs	r2, #7
 8002106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	e000e010 	.word	0xe000e010

08002118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ff29 	bl	8001f78 <__NVIC_SetPriorityGrouping>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002140:	f7ff ff3e 	bl	8001fc0 <__NVIC_GetPriorityGrouping>
 8002144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	6978      	ldr	r0, [r7, #20]
 800214c:	f7ff ff8e 	bl	800206c <NVIC_EncodePriority>
 8002150:	4602      	mov	r2, r0
 8002152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff5d 	bl	8002018 <__NVIC_SetPriority>
}
 800215e:	bf00      	nop
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	4603      	mov	r3, r0
 800216e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff31 	bl	8001fdc <__NVIC_EnableIRQ>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff ffa2 	bl	80020d4 <SysTick_Config>
 8002190:	4603      	mov	r3, r0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b084      	sub	sp, #16
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021a8:	f7ff fab6 	bl	8001718 <HAL_GetTick>
 80021ac:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d008      	beq.n	80021cc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2280      	movs	r2, #128	; 0x80
 80021be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e052      	b.n	8002272 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0216 	bic.w	r2, r2, #22
 80021da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	695a      	ldr	r2, [r3, #20]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021ea:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d103      	bne.n	80021fc <HAL_DMA_Abort+0x62>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d007      	beq.n	800220c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0208 	bic.w	r2, r2, #8
 800220a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0201 	bic.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800221c:	e013      	b.n	8002246 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800221e:	f7ff fa7b 	bl	8001718 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b05      	cmp	r3, #5
 800222a:	d90c      	bls.n	8002246 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2220      	movs	r2, #32
 8002230:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2203      	movs	r2, #3
 8002236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e015      	b.n	8002272 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1e4      	bne.n	800221e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002258:	223f      	movs	r2, #63	; 0x3f
 800225a:	409a      	lsls	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800227a:	b480      	push	{r7}
 800227c:	b083      	sub	sp, #12
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d004      	beq.n	8002298 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2280      	movs	r2, #128	; 0x80
 8002292:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e00c      	b.n	80022b2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2205      	movs	r2, #5
 800229c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0201 	bic.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
	...

080022c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b089      	sub	sp, #36	; 0x24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
 80022da:	e16b      	b.n	80025b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022dc:	2201      	movs	r2, #1
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	4013      	ands	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	f040 815a 	bne.w	80025ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 0303 	and.w	r3, r3, #3
 8002302:	2b01      	cmp	r3, #1
 8002304:	d005      	beq.n	8002312 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800230e:	2b02      	cmp	r3, #2
 8002310:	d130      	bne.n	8002374 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	2203      	movs	r2, #3
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002348:	2201      	movs	r2, #1
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 0201 	and.w	r2, r3, #1
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	2b03      	cmp	r3, #3
 800237e:	d017      	beq.n	80023b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	2203      	movs	r2, #3
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d123      	bne.n	8002404 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	08da      	lsrs	r2, r3, #3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3208      	adds	r2, #8
 80023c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	220f      	movs	r2, #15
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	08da      	lsrs	r2, r3, #3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3208      	adds	r2, #8
 80023fe:	69b9      	ldr	r1, [r7, #24]
 8002400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	2203      	movs	r2, #3
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0203 	and.w	r2, r3, #3
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 80b4 	beq.w	80025ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	4b60      	ldr	r3, [pc, #384]	; (80025cc <HAL_GPIO_Init+0x30c>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	4a5f      	ldr	r2, [pc, #380]	; (80025cc <HAL_GPIO_Init+0x30c>)
 8002450:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002454:	6453      	str	r3, [r2, #68]	; 0x44
 8002456:	4b5d      	ldr	r3, [pc, #372]	; (80025cc <HAL_GPIO_Init+0x30c>)
 8002458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002462:	4a5b      	ldr	r2, [pc, #364]	; (80025d0 <HAL_GPIO_Init+0x310>)
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	089b      	lsrs	r3, r3, #2
 8002468:	3302      	adds	r3, #2
 800246a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	220f      	movs	r2, #15
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a52      	ldr	r2, [pc, #328]	; (80025d4 <HAL_GPIO_Init+0x314>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d02b      	beq.n	80024e6 <HAL_GPIO_Init+0x226>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a51      	ldr	r2, [pc, #324]	; (80025d8 <HAL_GPIO_Init+0x318>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d025      	beq.n	80024e2 <HAL_GPIO_Init+0x222>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a50      	ldr	r2, [pc, #320]	; (80025dc <HAL_GPIO_Init+0x31c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d01f      	beq.n	80024de <HAL_GPIO_Init+0x21e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4f      	ldr	r2, [pc, #316]	; (80025e0 <HAL_GPIO_Init+0x320>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d019      	beq.n	80024da <HAL_GPIO_Init+0x21a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a4e      	ldr	r2, [pc, #312]	; (80025e4 <HAL_GPIO_Init+0x324>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d013      	beq.n	80024d6 <HAL_GPIO_Init+0x216>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a4d      	ldr	r2, [pc, #308]	; (80025e8 <HAL_GPIO_Init+0x328>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00d      	beq.n	80024d2 <HAL_GPIO_Init+0x212>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a4c      	ldr	r2, [pc, #304]	; (80025ec <HAL_GPIO_Init+0x32c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d007      	beq.n	80024ce <HAL_GPIO_Init+0x20e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4b      	ldr	r2, [pc, #300]	; (80025f0 <HAL_GPIO_Init+0x330>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d101      	bne.n	80024ca <HAL_GPIO_Init+0x20a>
 80024c6:	2307      	movs	r3, #7
 80024c8:	e00e      	b.n	80024e8 <HAL_GPIO_Init+0x228>
 80024ca:	2308      	movs	r3, #8
 80024cc:	e00c      	b.n	80024e8 <HAL_GPIO_Init+0x228>
 80024ce:	2306      	movs	r3, #6
 80024d0:	e00a      	b.n	80024e8 <HAL_GPIO_Init+0x228>
 80024d2:	2305      	movs	r3, #5
 80024d4:	e008      	b.n	80024e8 <HAL_GPIO_Init+0x228>
 80024d6:	2304      	movs	r3, #4
 80024d8:	e006      	b.n	80024e8 <HAL_GPIO_Init+0x228>
 80024da:	2303      	movs	r3, #3
 80024dc:	e004      	b.n	80024e8 <HAL_GPIO_Init+0x228>
 80024de:	2302      	movs	r3, #2
 80024e0:	e002      	b.n	80024e8 <HAL_GPIO_Init+0x228>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <HAL_GPIO_Init+0x228>
 80024e6:	2300      	movs	r3, #0
 80024e8:	69fa      	ldr	r2, [r7, #28]
 80024ea:	f002 0203 	and.w	r2, r2, #3
 80024ee:	0092      	lsls	r2, r2, #2
 80024f0:	4093      	lsls	r3, r2
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f8:	4935      	ldr	r1, [pc, #212]	; (80025d0 <HAL_GPIO_Init+0x310>)
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	089b      	lsrs	r3, r3, #2
 80024fe:	3302      	adds	r3, #2
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002506:	4b3b      	ldr	r3, [pc, #236]	; (80025f4 <HAL_GPIO_Init+0x334>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800252a:	4a32      	ldr	r2, [pc, #200]	; (80025f4 <HAL_GPIO_Init+0x334>)
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002530:	4b30      	ldr	r3, [pc, #192]	; (80025f4 <HAL_GPIO_Init+0x334>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002554:	4a27      	ldr	r2, [pc, #156]	; (80025f4 <HAL_GPIO_Init+0x334>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800255a:	4b26      	ldr	r3, [pc, #152]	; (80025f4 <HAL_GPIO_Init+0x334>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800257e:	4a1d      	ldr	r2, [pc, #116]	; (80025f4 <HAL_GPIO_Init+0x334>)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_GPIO_Init+0x334>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a8:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <HAL_GPIO_Init+0x334>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3301      	adds	r3, #1
 80025b2:	61fb      	str	r3, [r7, #28]
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	2b0f      	cmp	r3, #15
 80025b8:	f67f ae90 	bls.w	80022dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025bc:	bf00      	nop
 80025be:	bf00      	nop
 80025c0:	3724      	adds	r7, #36	; 0x24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40013800 	.word	0x40013800
 80025d4:	40020000 	.word	0x40020000
 80025d8:	40020400 	.word	0x40020400
 80025dc:	40020800 	.word	0x40020800
 80025e0:	40020c00 	.word	0x40020c00
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40021400 	.word	0x40021400
 80025ec:	40021800 	.word	0x40021800
 80025f0:	40021c00 	.word	0x40021c00
 80025f4:	40013c00 	.word	0x40013c00

080025f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e267      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d075      	beq.n	8002702 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002616:	4b88      	ldr	r3, [pc, #544]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b04      	cmp	r3, #4
 8002620:	d00c      	beq.n	800263c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002622:	4b85      	ldr	r3, [pc, #532]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800262a:	2b08      	cmp	r3, #8
 800262c:	d112      	bne.n	8002654 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800262e:	4b82      	ldr	r3, [pc, #520]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002636:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800263a:	d10b      	bne.n	8002654 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263c:	4b7e      	ldr	r3, [pc, #504]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d05b      	beq.n	8002700 <HAL_RCC_OscConfig+0x108>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d157      	bne.n	8002700 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e242      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800265c:	d106      	bne.n	800266c <HAL_RCC_OscConfig+0x74>
 800265e:	4b76      	ldr	r3, [pc, #472]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a75      	ldr	r2, [pc, #468]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	e01d      	b.n	80026a8 <HAL_RCC_OscConfig+0xb0>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002674:	d10c      	bne.n	8002690 <HAL_RCC_OscConfig+0x98>
 8002676:	4b70      	ldr	r3, [pc, #448]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a6f      	ldr	r2, [pc, #444]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800267c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	4b6d      	ldr	r3, [pc, #436]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a6c      	ldr	r2, [pc, #432]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	e00b      	b.n	80026a8 <HAL_RCC_OscConfig+0xb0>
 8002690:	4b69      	ldr	r3, [pc, #420]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a68      	ldr	r2, [pc, #416]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b66      	ldr	r3, [pc, #408]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a65      	ldr	r2, [pc, #404]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 80026a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d013      	beq.n	80026d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7ff f832 	bl	8001718 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b8:	f7ff f82e 	bl	8001718 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	; 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e207      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	4b5b      	ldr	r3, [pc, #364]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0xc0>
 80026d6:	e014      	b.n	8002702 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7ff f81e 	bl	8001718 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e0:	f7ff f81a 	bl	8001718 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	; 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e1f3      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f2:	4b51      	ldr	r3, [pc, #324]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0xe8>
 80026fe:	e000      	b.n	8002702 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d063      	beq.n	80027d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800270e:	4b4a      	ldr	r3, [pc, #296]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00b      	beq.n	8002732 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800271a:	4b47      	ldr	r3, [pc, #284]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002722:	2b08      	cmp	r3, #8
 8002724:	d11c      	bne.n	8002760 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002726:	4b44      	ldr	r3, [pc, #272]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d116      	bne.n	8002760 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	4b41      	ldr	r3, [pc, #260]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d005      	beq.n	800274a <HAL_RCC_OscConfig+0x152>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d001      	beq.n	800274a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e1c7      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274a:	4b3b      	ldr	r3, [pc, #236]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	4937      	ldr	r1, [pc, #220]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275e:	e03a      	b.n	80027d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d020      	beq.n	80027aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002768:	4b34      	ldr	r3, [pc, #208]	; (800283c <HAL_RCC_OscConfig+0x244>)
 800276a:	2201      	movs	r2, #1
 800276c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276e:	f7fe ffd3 	bl	8001718 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002774:	e008      	b.n	8002788 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002776:	f7fe ffcf 	bl	8001718 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b02      	cmp	r3, #2
 8002782:	d901      	bls.n	8002788 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002784:	2303      	movs	r3, #3
 8002786:	e1a8      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002788:	4b2b      	ldr	r3, [pc, #172]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0f0      	beq.n	8002776 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002794:	4b28      	ldr	r3, [pc, #160]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	691b      	ldr	r3, [r3, #16]
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4925      	ldr	r1, [pc, #148]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]
 80027a8:	e015      	b.n	80027d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027aa:	4b24      	ldr	r3, [pc, #144]	; (800283c <HAL_RCC_OscConfig+0x244>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7fe ffb2 	bl	8001718 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b8:	f7fe ffae 	bl	8001718 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e187      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ca:	4b1b      	ldr	r3, [pc, #108]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d036      	beq.n	8002850 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d016      	beq.n	8002818 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <HAL_RCC_OscConfig+0x248>)
 80027ec:	2201      	movs	r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f0:	f7fe ff92 	bl	8001718 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f8:	f7fe ff8e 	bl	8001718 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e167      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280a:	4b0b      	ldr	r3, [pc, #44]	; (8002838 <HAL_RCC_OscConfig+0x240>)
 800280c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0f0      	beq.n	80027f8 <HAL_RCC_OscConfig+0x200>
 8002816:	e01b      	b.n	8002850 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002818:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_RCC_OscConfig+0x248>)
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800281e:	f7fe ff7b 	bl	8001718 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002824:	e00e      	b.n	8002844 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002826:	f7fe ff77 	bl	8001718 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d907      	bls.n	8002844 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e150      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
 8002838:	40023800 	.word	0x40023800
 800283c:	42470000 	.word	0x42470000
 8002840:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002844:	4b88      	ldr	r3, [pc, #544]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1ea      	bne.n	8002826 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	2b00      	cmp	r3, #0
 800285a:	f000 8097 	beq.w	800298c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800285e:	2300      	movs	r3, #0
 8002860:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002862:	4b81      	ldr	r3, [pc, #516]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10f      	bne.n	800288e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	4b7d      	ldr	r3, [pc, #500]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4a7c      	ldr	r2, [pc, #496]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800287c:	6413      	str	r3, [r2, #64]	; 0x40
 800287e:	4b7a      	ldr	r3, [pc, #488]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800288a:	2301      	movs	r3, #1
 800288c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288e:	4b77      	ldr	r3, [pc, #476]	; (8002a6c <HAL_RCC_OscConfig+0x474>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d118      	bne.n	80028cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800289a:	4b74      	ldr	r3, [pc, #464]	; (8002a6c <HAL_RCC_OscConfig+0x474>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a73      	ldr	r2, [pc, #460]	; (8002a6c <HAL_RCC_OscConfig+0x474>)
 80028a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a6:	f7fe ff37 	bl	8001718 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ae:	f7fe ff33 	bl	8001718 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e10c      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c0:	4b6a      	ldr	r3, [pc, #424]	; (8002a6c <HAL_RCC_OscConfig+0x474>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d106      	bne.n	80028e2 <HAL_RCC_OscConfig+0x2ea>
 80028d4:	4b64      	ldr	r3, [pc, #400]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d8:	4a63      	ldr	r2, [pc, #396]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6713      	str	r3, [r2, #112]	; 0x70
 80028e0:	e01c      	b.n	800291c <HAL_RCC_OscConfig+0x324>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b05      	cmp	r3, #5
 80028e8:	d10c      	bne.n	8002904 <HAL_RCC_OscConfig+0x30c>
 80028ea:	4b5f      	ldr	r3, [pc, #380]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	4a5e      	ldr	r2, [pc, #376]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028f0:	f043 0304 	orr.w	r3, r3, #4
 80028f4:	6713      	str	r3, [r2, #112]	; 0x70
 80028f6:	4b5c      	ldr	r3, [pc, #368]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	4a5b      	ldr	r2, [pc, #364]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6713      	str	r3, [r2, #112]	; 0x70
 8002902:	e00b      	b.n	800291c <HAL_RCC_OscConfig+0x324>
 8002904:	4b58      	ldr	r3, [pc, #352]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002908:	4a57      	ldr	r2, [pc, #348]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 800290a:	f023 0301 	bic.w	r3, r3, #1
 800290e:	6713      	str	r3, [r2, #112]	; 0x70
 8002910:	4b55      	ldr	r3, [pc, #340]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002914:	4a54      	ldr	r2, [pc, #336]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002916:	f023 0304 	bic.w	r3, r3, #4
 800291a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d015      	beq.n	8002950 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002924:	f7fe fef8 	bl	8001718 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292a:	e00a      	b.n	8002942 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800292c:	f7fe fef4 	bl	8001718 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f241 3288 	movw	r2, #5000	; 0x1388
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e0cb      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002942:	4b49      	ldr	r3, [pc, #292]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0ee      	beq.n	800292c <HAL_RCC_OscConfig+0x334>
 800294e:	e014      	b.n	800297a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002950:	f7fe fee2 	bl	8001718 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002956:	e00a      	b.n	800296e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002958:	f7fe fede 	bl	8001718 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	; 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e0b5      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296e:	4b3e      	ldr	r3, [pc, #248]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1ee      	bne.n	8002958 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800297a:	7dfb      	ldrb	r3, [r7, #23]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d105      	bne.n	800298c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002980:	4b39      	ldr	r3, [pc, #228]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	4a38      	ldr	r2, [pc, #224]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800298a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80a1 	beq.w	8002ad8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002996:	4b34      	ldr	r3, [pc, #208]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d05c      	beq.n	8002a5c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d141      	bne.n	8002a2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029aa:	4b31      	ldr	r3, [pc, #196]	; (8002a70 <HAL_RCC_OscConfig+0x478>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b0:	f7fe feb2 	bl	8001718 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b8:	f7fe feae 	bl	8001718 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e087      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ca:	4b27      	ldr	r3, [pc, #156]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69da      	ldr	r2, [r3, #28]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	019b      	lsls	r3, r3, #6
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ec:	085b      	lsrs	r3, r3, #1
 80029ee:	3b01      	subs	r3, #1
 80029f0:	041b      	lsls	r3, r3, #16
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	061b      	lsls	r3, r3, #24
 80029fa:	491b      	ldr	r1, [pc, #108]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a00:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <HAL_RCC_OscConfig+0x478>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a06:	f7fe fe87 	bl	8001718 <HAL_GetTick>
 8002a0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a0e:	f7fe fe83 	bl	8001718 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e05c      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a20:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f0      	beq.n	8002a0e <HAL_RCC_OscConfig+0x416>
 8002a2c:	e054      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2e:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <HAL_RCC_OscConfig+0x478>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a34:	f7fe fe70 	bl	8001718 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a3c:	f7fe fe6c 	bl	8001718 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e045      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4e:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <HAL_RCC_OscConfig+0x470>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x444>
 8002a5a:	e03d      	b.n	8002ad8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d107      	bne.n	8002a74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e038      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40007000 	.word	0x40007000
 8002a70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a74:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <HAL_RCC_OscConfig+0x4ec>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d028      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d121      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d11a      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d111      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	085b      	lsrs	r3, r3, #1
 8002abc:	3b01      	subs	r3, #1
 8002abe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d107      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ace:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e000      	b.n	8002ada <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023800 	.word	0x40023800

08002ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0cc      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002afc:	4b68      	ldr	r3, [pc, #416]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d90c      	bls.n	8002b24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0a:	4b65      	ldr	r3, [pc, #404]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b63      	ldr	r3, [pc, #396]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0b8      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d020      	beq.n	8002b72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b3c:	4b59      	ldr	r3, [pc, #356]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	4a58      	ldr	r2, [pc, #352]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d005      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b54:	4b53      	ldr	r3, [pc, #332]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	4a52      	ldr	r2, [pc, #328]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b60:	4b50      	ldr	r3, [pc, #320]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	494d      	ldr	r1, [pc, #308]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d044      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b86:	4b47      	ldr	r3, [pc, #284]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d119      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e07f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d003      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba6:	4b3f      	ldr	r3, [pc, #252]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d109      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e06f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb6:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e067      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bc6:	4b37      	ldr	r3, [pc, #220]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f023 0203 	bic.w	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4934      	ldr	r1, [pc, #208]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd8:	f7fe fd9e 	bl	8001718 <HAL_GetTick>
 8002bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bde:	e00a      	b.n	8002bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be0:	f7fe fd9a 	bl	8001718 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e04f      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf6:	4b2b      	ldr	r3, [pc, #172]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 020c 	and.w	r2, r3, #12
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d1eb      	bne.n	8002be0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c08:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d20c      	bcs.n	8002c30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c16:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e032      	b.n	8002c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0304 	and.w	r3, r3, #4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d008      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	4916      	ldr	r1, [pc, #88]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c5a:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	490e      	ldr	r1, [pc, #56]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c6e:	f000 f821 	bl	8002cb4 <HAL_RCC_GetSysClockFreq>
 8002c72:	4602      	mov	r2, r0
 8002c74:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	091b      	lsrs	r3, r3, #4
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	490a      	ldr	r1, [pc, #40]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8002c80:	5ccb      	ldrb	r3, [r1, r3]
 8002c82:	fa22 f303 	lsr.w	r3, r2, r3
 8002c86:	4a09      	ldr	r2, [pc, #36]	; (8002cac <HAL_RCC_ClockConfig+0x1c4>)
 8002c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c8a:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fe fcfe 	bl	8001690 <HAL_InitTick>

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40023c00 	.word	0x40023c00
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	08006db0 	.word	0x08006db0
 8002cac:	20000000 	.word	0x20000000
 8002cb0:	20000004 	.word	0x20000004

08002cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb8:	b094      	sub	sp, #80	; 0x50
 8002cba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ccc:	4b79      	ldr	r3, [pc, #484]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 030c 	and.w	r3, r3, #12
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d00d      	beq.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	f200 80e1 	bhi.w	8002ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d003      	beq.n	8002cee <HAL_RCC_GetSysClockFreq+0x3a>
 8002ce6:	e0db      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4b73      	ldr	r3, [pc, #460]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002cec:	e0db      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cee:	4b73      	ldr	r3, [pc, #460]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x208>)
 8002cf0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cf2:	e0d8      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf4:	4b6f      	ldr	r3, [pc, #444]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cfc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cfe:	4b6d      	ldr	r3, [pc, #436]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d063      	beq.n	8002dd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d0a:	4b6a      	ldr	r3, [pc, #424]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	099b      	lsrs	r3, r3, #6
 8002d10:	2200      	movs	r2, #0
 8002d12:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d1e:	2300      	movs	r3, #0
 8002d20:	637b      	str	r3, [r7, #52]	; 0x34
 8002d22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d26:	4622      	mov	r2, r4
 8002d28:	462b      	mov	r3, r5
 8002d2a:	f04f 0000 	mov.w	r0, #0
 8002d2e:	f04f 0100 	mov.w	r1, #0
 8002d32:	0159      	lsls	r1, r3, #5
 8002d34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d38:	0150      	lsls	r0, r2, #5
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4621      	mov	r1, r4
 8002d40:	1a51      	subs	r1, r2, r1
 8002d42:	6139      	str	r1, [r7, #16]
 8002d44:	4629      	mov	r1, r5
 8002d46:	eb63 0301 	sbc.w	r3, r3, r1
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d58:	4659      	mov	r1, fp
 8002d5a:	018b      	lsls	r3, r1, #6
 8002d5c:	4651      	mov	r1, sl
 8002d5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d62:	4651      	mov	r1, sl
 8002d64:	018a      	lsls	r2, r1, #6
 8002d66:	4651      	mov	r1, sl
 8002d68:	ebb2 0801 	subs.w	r8, r2, r1
 8002d6c:	4659      	mov	r1, fp
 8002d6e:	eb63 0901 	sbc.w	r9, r3, r1
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d86:	4690      	mov	r8, r2
 8002d88:	4699      	mov	r9, r3
 8002d8a:	4623      	mov	r3, r4
 8002d8c:	eb18 0303 	adds.w	r3, r8, r3
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	462b      	mov	r3, r5
 8002d94:	eb49 0303 	adc.w	r3, r9, r3
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002da6:	4629      	mov	r1, r5
 8002da8:	024b      	lsls	r3, r1, #9
 8002daa:	4621      	mov	r1, r4
 8002dac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002db0:	4621      	mov	r1, r4
 8002db2:	024a      	lsls	r2, r1, #9
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dba:	2200      	movs	r2, #0
 8002dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002dc4:	f7fd ff40 	bl	8000c48 <__aeabi_uldivmod>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4613      	mov	r3, r2
 8002dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dd0:	e058      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd2:	4b38      	ldr	r3, [pc, #224]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	099b      	lsrs	r3, r3, #6
 8002dd8:	2200      	movs	r2, #0
 8002dda:	4618      	mov	r0, r3
 8002ddc:	4611      	mov	r1, r2
 8002dde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002de2:	623b      	str	r3, [r7, #32]
 8002de4:	2300      	movs	r3, #0
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
 8002de8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002dec:	4642      	mov	r2, r8
 8002dee:	464b      	mov	r3, r9
 8002df0:	f04f 0000 	mov.w	r0, #0
 8002df4:	f04f 0100 	mov.w	r1, #0
 8002df8:	0159      	lsls	r1, r3, #5
 8002dfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dfe:	0150      	lsls	r0, r2, #5
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4641      	mov	r1, r8
 8002e06:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e0a:	4649      	mov	r1, r9
 8002e0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e24:	ebb2 040a 	subs.w	r4, r2, sl
 8002e28:	eb63 050b 	sbc.w	r5, r3, fp
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	00eb      	lsls	r3, r5, #3
 8002e36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e3a:	00e2      	lsls	r2, r4, #3
 8002e3c:	4614      	mov	r4, r2
 8002e3e:	461d      	mov	r5, r3
 8002e40:	4643      	mov	r3, r8
 8002e42:	18e3      	adds	r3, r4, r3
 8002e44:	603b      	str	r3, [r7, #0]
 8002e46:	464b      	mov	r3, r9
 8002e48:	eb45 0303 	adc.w	r3, r5, r3
 8002e4c:	607b      	str	r3, [r7, #4]
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e5a:	4629      	mov	r1, r5
 8002e5c:	028b      	lsls	r3, r1, #10
 8002e5e:	4621      	mov	r1, r4
 8002e60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e64:	4621      	mov	r1, r4
 8002e66:	028a      	lsls	r2, r1, #10
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e6e:	2200      	movs	r2, #0
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	61fa      	str	r2, [r7, #28]
 8002e74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e78:	f7fd fee6 	bl	8000c48 <__aeabi_uldivmod>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4613      	mov	r3, r2
 8002e82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	0c1b      	lsrs	r3, r3, #16
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e9e:	e002      	b.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ea0:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ea2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ea4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3750      	adds	r7, #80	; 0x50
 8002eac:	46bd      	mov	sp, r7
 8002eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	00f42400 	.word	0x00f42400
 8002ebc:	007a1200 	.word	0x007a1200

08002ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec4:	4b03      	ldr	r3, [pc, #12]	; (8002ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20000000 	.word	0x20000000

08002ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002edc:	f7ff fff0 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	0a9b      	lsrs	r3, r3, #10
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	4903      	ldr	r1, [pc, #12]	; (8002efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eee:	5ccb      	ldrb	r3, [r1, r3]
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	08006dc0 	.word	0x08006dc0

08002f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f04:	f7ff ffdc 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	0b5b      	lsrs	r3, r3, #13
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	4903      	ldr	r1, [pc, #12]	; (8002f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f16:	5ccb      	ldrb	r3, [r1, r3]
 8002f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40023800 	.word	0x40023800
 8002f24:	08006dc0 	.word	0x08006dc0

08002f28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e03f      	b.n	8002fba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fe f9f6 	bl	8001340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2224      	movs	r2, #36	; 0x24
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 fd7b 	bl	8003a68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695a      	ldr	r2, [r3, #20]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b08a      	sub	sp, #40	; 0x28
 8002fc6:	af02      	add	r7, sp, #8
 8002fc8:	60f8      	str	r0, [r7, #12]
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	603b      	str	r3, [r7, #0]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	d17c      	bne.n	80030dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <HAL_UART_Transmit+0x2c>
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e075      	b.n	80030de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_UART_Transmit+0x3e>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e06e      	b.n	80030de <HAL_UART_Transmit+0x11c>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2221      	movs	r2, #33	; 0x21
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003016:	f7fe fb7f 	bl	8001718 <HAL_GetTick>
 800301a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	88fa      	ldrh	r2, [r7, #6]
 8003020:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	88fa      	ldrh	r2, [r7, #6]
 8003026:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003030:	d108      	bne.n	8003044 <HAL_UART_Transmit+0x82>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d104      	bne.n	8003044 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	61bb      	str	r3, [r7, #24]
 8003042:	e003      	b.n	800304c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003048:	2300      	movs	r3, #0
 800304a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003054:	e02a      	b.n	80030ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2200      	movs	r2, #0
 800305e:	2180      	movs	r1, #128	; 0x80
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 faf9 	bl	8003658 <UART_WaitOnFlagUntilTimeout>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e036      	b.n	80030de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10b      	bne.n	800308e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	461a      	mov	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003084:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	3302      	adds	r3, #2
 800308a:	61bb      	str	r3, [r7, #24]
 800308c:	e007      	b.n	800309e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	781a      	ldrb	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	3301      	adds	r3, #1
 800309c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	3b01      	subs	r3, #1
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1cf      	bne.n	8003056 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2200      	movs	r2, #0
 80030be:	2140      	movs	r1, #64	; 0x40
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 fac9 	bl	8003658 <UART_WaitOnFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e006      	b.n	80030de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	e000      	b.n	80030de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030dc:	2302      	movs	r3, #2
  }
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3720      	adds	r7, #32
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
	...

080030e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b0ba      	sub	sp, #232	; 0xe8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800310e:	2300      	movs	r3, #0
 8003110:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003114:	2300      	movs	r3, #0
 8003116:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800311a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003126:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10f      	bne.n	800314e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800312e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <HAL_UART_IRQHandler+0x66>
 800313a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800313e:	f003 0320 	and.w	r3, r3, #32
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fbd3 	bl	80038f2 <UART_Receive_IT>
      return;
 800314c:	e256      	b.n	80035fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800314e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 80de 	beq.w	8003314 <HAL_UART_IRQHandler+0x22c>
 8003158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	d106      	bne.n	8003172 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003168:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80d1 	beq.w	8003314 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00b      	beq.n	8003196 <HAL_UART_IRQHandler+0xae>
 800317e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003186:	2b00      	cmp	r3, #0
 8003188:	d005      	beq.n	8003196 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f043 0201 	orr.w	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00b      	beq.n	80031ba <HAL_UART_IRQHandler+0xd2>
 80031a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d005      	beq.n	80031ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f043 0202 	orr.w	r2, r3, #2
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00b      	beq.n	80031de <HAL_UART_IRQHandler+0xf6>
 80031c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d005      	beq.n	80031de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f043 0204 	orr.w	r2, r3, #4
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031e2:	f003 0308 	and.w	r3, r3, #8
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d011      	beq.n	800320e <HAL_UART_IRQHandler+0x126>
 80031ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ee:	f003 0320 	and.w	r3, r3, #32
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d105      	bne.n	8003202 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d005      	beq.n	800320e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f043 0208 	orr.w	r2, r3, #8
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	f000 81ed 	beq.w	80035f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b00      	cmp	r3, #0
 8003222:	d008      	beq.n	8003236 <HAL_UART_IRQHandler+0x14e>
 8003224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003228:	f003 0320 	and.w	r3, r3, #32
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 fb5e 	bl	80038f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003240:	2b40      	cmp	r3, #64	; 0x40
 8003242:	bf0c      	ite	eq
 8003244:	2301      	moveq	r3, #1
 8003246:	2300      	movne	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d103      	bne.n	8003262 <HAL_UART_IRQHandler+0x17a>
 800325a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800325e:	2b00      	cmp	r3, #0
 8003260:	d04f      	beq.n	8003302 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fa66 	bl	8003734 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003272:	2b40      	cmp	r3, #64	; 0x40
 8003274:	d141      	bne.n	80032fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	3314      	adds	r3, #20
 800327c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003280:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003284:	e853 3f00 	ldrex	r3, [r3]
 8003288:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800328c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003290:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003294:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	3314      	adds	r3, #20
 800329e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80032a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80032a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80032ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80032b2:	e841 2300 	strex	r3, r2, [r1]
 80032b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80032ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1d9      	bne.n	8003276 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d013      	beq.n	80032f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ce:	4a7d      	ldr	r2, [pc, #500]	; (80034c4 <HAL_UART_IRQHandler+0x3dc>)
 80032d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fe ffcf 	bl	800227a <HAL_DMA_Abort_IT>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d016      	beq.n	8003310 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032ec:	4610      	mov	r0, r2
 80032ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f0:	e00e      	b.n	8003310 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f99a 	bl	800362c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f8:	e00a      	b.n	8003310 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f996 	bl	800362c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003300:	e006      	b.n	8003310 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f992 	bl	800362c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800330e:	e170      	b.n	80035f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003310:	bf00      	nop
    return;
 8003312:	e16e      	b.n	80035f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	2b01      	cmp	r3, #1
 800331a:	f040 814a 	bne.w	80035b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800331e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003322:	f003 0310 	and.w	r3, r3, #16
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 8143 	beq.w	80035b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800332c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 813c 	beq.w	80035b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800333a:	2300      	movs	r3, #0
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335a:	2b40      	cmp	r3, #64	; 0x40
 800335c:	f040 80b4 	bne.w	80034c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800336c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 8140 	beq.w	80035f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800337a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800337e:	429a      	cmp	r2, r3
 8003380:	f080 8139 	bcs.w	80035f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800338a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003396:	f000 8088 	beq.w	80034aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	330c      	adds	r3, #12
 80033a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033a8:	e853 3f00 	ldrex	r3, [r3]
 80033ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80033b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	330c      	adds	r3, #12
 80033c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80033c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033d6:	e841 2300 	strex	r3, r2, [r1]
 80033da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1d9      	bne.n	800339a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	3314      	adds	r3, #20
 80033ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033f0:	e853 3f00 	ldrex	r3, [r3]
 80033f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3314      	adds	r3, #20
 8003406:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800340a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800340e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003410:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003412:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003416:	e841 2300 	strex	r3, r2, [r1]
 800341a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800341c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1e1      	bne.n	80033e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	3314      	adds	r3, #20
 8003428:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800342c:	e853 3f00 	ldrex	r3, [r3]
 8003430:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003432:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003438:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3314      	adds	r3, #20
 8003442:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003446:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003448:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800344c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800344e:	e841 2300 	strex	r3, r2, [r1]
 8003452:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1e3      	bne.n	8003422 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2220      	movs	r2, #32
 800345e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	330c      	adds	r3, #12
 800346e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003472:	e853 3f00 	ldrex	r3, [r3]
 8003476:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800347a:	f023 0310 	bic.w	r3, r3, #16
 800347e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	330c      	adds	r3, #12
 8003488:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800348c:	65ba      	str	r2, [r7, #88]	; 0x58
 800348e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003490:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003492:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003494:	e841 2300 	strex	r3, r2, [r1]
 8003498:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800349a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1e3      	bne.n	8003468 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fe fe78 	bl	800219a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	4619      	mov	r1, r3
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f8c0 	bl	8003640 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034c0:	e099      	b.n	80035f6 <HAL_UART_IRQHandler+0x50e>
 80034c2:	bf00      	nop
 80034c4:	080037fb 	.word	0x080037fb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034dc:	b29b      	uxth	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 808b 	beq.w	80035fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80034e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 8086 	beq.w	80035fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	330c      	adds	r3, #12
 80034f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f8:	e853 3f00 	ldrex	r3, [r3]
 80034fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003500:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003504:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	330c      	adds	r3, #12
 800350e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003512:	647a      	str	r2, [r7, #68]	; 0x44
 8003514:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003516:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003518:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800351a:	e841 2300 	strex	r3, r2, [r1]
 800351e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1e3      	bne.n	80034ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	3314      	adds	r3, #20
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	e853 3f00 	ldrex	r3, [r3]
 8003534:	623b      	str	r3, [r7, #32]
   return(result);
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	f023 0301 	bic.w	r3, r3, #1
 800353c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3314      	adds	r3, #20
 8003546:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800354a:	633a      	str	r2, [r7, #48]	; 0x30
 800354c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003552:	e841 2300 	strex	r3, r2, [r1]
 8003556:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1e3      	bne.n	8003526 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	330c      	adds	r3, #12
 8003572:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	e853 3f00 	ldrex	r3, [r3]
 800357a:	60fb      	str	r3, [r7, #12]
   return(result);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0310 	bic.w	r3, r3, #16
 8003582:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	330c      	adds	r3, #12
 800358c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003590:	61fa      	str	r2, [r7, #28]
 8003592:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003594:	69b9      	ldr	r1, [r7, #24]
 8003596:	69fa      	ldr	r2, [r7, #28]
 8003598:	e841 2300 	strex	r3, r2, [r1]
 800359c:	617b      	str	r3, [r7, #20]
   return(result);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1e3      	bne.n	800356c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035a8:	4619      	mov	r1, r3
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f848 	bl	8003640 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035b0:	e023      	b.n	80035fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d009      	beq.n	80035d2 <HAL_UART_IRQHandler+0x4ea>
 80035be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f929 	bl	8003822 <UART_Transmit_IT>
    return;
 80035d0:	e014      	b.n	80035fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00e      	beq.n	80035fc <HAL_UART_IRQHandler+0x514>
 80035de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d008      	beq.n	80035fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f969 	bl	80038c2 <UART_EndTransmit_IT>
    return;
 80035f0:	e004      	b.n	80035fc <HAL_UART_IRQHandler+0x514>
    return;
 80035f2:	bf00      	nop
 80035f4:	e002      	b.n	80035fc <HAL_UART_IRQHandler+0x514>
      return;
 80035f6:	bf00      	nop
 80035f8:	e000      	b.n	80035fc <HAL_UART_IRQHandler+0x514>
      return;
 80035fa:	bf00      	nop
  }
}
 80035fc:	37e8      	adds	r7, #232	; 0xe8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop

08003604 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b090      	sub	sp, #64	; 0x40
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	603b      	str	r3, [r7, #0]
 8003664:	4613      	mov	r3, r2
 8003666:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003668:	e050      	b.n	800370c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800366a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800366c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003670:	d04c      	beq.n	800370c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003674:	2b00      	cmp	r3, #0
 8003676:	d007      	beq.n	8003688 <UART_WaitOnFlagUntilTimeout+0x30>
 8003678:	f7fe f84e 	bl	8001718 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003684:	429a      	cmp	r2, r3
 8003686:	d241      	bcs.n	800370c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	330c      	adds	r3, #12
 800368e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003692:	e853 3f00 	ldrex	r3, [r3]
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800369e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	330c      	adds	r3, #12
 80036a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036a8:	637a      	str	r2, [r7, #52]	; 0x34
 80036aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036b0:	e841 2300 	strex	r3, r2, [r1]
 80036b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e5      	bne.n	8003688 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3314      	adds	r3, #20
 80036c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	e853 3f00 	ldrex	r3, [r3]
 80036ca:	613b      	str	r3, [r7, #16]
   return(result);
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	3314      	adds	r3, #20
 80036da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036dc:	623a      	str	r2, [r7, #32]
 80036de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e0:	69f9      	ldr	r1, [r7, #28]
 80036e2:	6a3a      	ldr	r2, [r7, #32]
 80036e4:	e841 2300 	strex	r3, r2, [r1]
 80036e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e5      	bne.n	80036bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e00f      	b.n	800372c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	4013      	ands	r3, r2
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	429a      	cmp	r2, r3
 800371a:	bf0c      	ite	eq
 800371c:	2301      	moveq	r3, #1
 800371e:	2300      	movne	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	461a      	mov	r2, r3
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	429a      	cmp	r2, r3
 8003728:	d09f      	beq.n	800366a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3740      	adds	r7, #64	; 0x40
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003734:	b480      	push	{r7}
 8003736:	b095      	sub	sp, #84	; 0x54
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	330c      	adds	r3, #12
 8003742:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003746:	e853 3f00 	ldrex	r3, [r3]
 800374a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	330c      	adds	r3, #12
 800375a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800375c:	643a      	str	r2, [r7, #64]	; 0x40
 800375e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003760:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003762:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003764:	e841 2300 	strex	r3, r2, [r1]
 8003768:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800376a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1e5      	bne.n	800373c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3314      	adds	r3, #20
 8003776:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	e853 3f00 	ldrex	r3, [r3]
 800377e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	f023 0301 	bic.w	r3, r3, #1
 8003786:	64bb      	str	r3, [r7, #72]	; 0x48
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	3314      	adds	r3, #20
 800378e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003790:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003792:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003794:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003798:	e841 2300 	strex	r3, r2, [r1]
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e5      	bne.n	8003770 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d119      	bne.n	80037e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	330c      	adds	r3, #12
 80037b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	e853 3f00 	ldrex	r3, [r3]
 80037ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f023 0310 	bic.w	r3, r3, #16
 80037c2:	647b      	str	r3, [r7, #68]	; 0x44
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	330c      	adds	r3, #12
 80037ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037cc:	61ba      	str	r2, [r7, #24]
 80037ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d0:	6979      	ldr	r1, [r7, #20]
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	e841 2300 	strex	r3, r2, [r1]
 80037d8:	613b      	str	r3, [r7, #16]
   return(result);
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1e5      	bne.n	80037ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80037ee:	bf00      	nop
 80037f0:	3754      	adds	r7, #84	; 0x54
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b084      	sub	sp, #16
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003806:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f7ff ff09 	bl	800362c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800381a:	bf00      	nop
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003822:	b480      	push	{r7}
 8003824:	b085      	sub	sp, #20
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b21      	cmp	r3, #33	; 0x21
 8003834:	d13e      	bne.n	80038b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800383e:	d114      	bne.n	800386a <UART_Transmit_IT+0x48>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d110      	bne.n	800386a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800385c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	1c9a      	adds	r2, r3, #2
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	621a      	str	r2, [r3, #32]
 8003868:	e008      	b.n	800387c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	1c59      	adds	r1, r3, #1
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6211      	str	r1, [r2, #32]
 8003874:	781a      	ldrb	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003880:	b29b      	uxth	r3, r3
 8003882:	3b01      	subs	r3, #1
 8003884:	b29b      	uxth	r3, r3
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	4619      	mov	r1, r3
 800388a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10f      	bne.n	80038b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800389e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	e000      	b.n	80038b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038b4:	2302      	movs	r3, #2
  }
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3714      	adds	r7, #20
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b082      	sub	sp, #8
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2220      	movs	r2, #32
 80038de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff fe8e 	bl	8003604 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b08c      	sub	sp, #48	; 0x30
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b22      	cmp	r3, #34	; 0x22
 8003904:	f040 80ab 	bne.w	8003a5e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003910:	d117      	bne.n	8003942 <UART_Receive_IT+0x50>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d113      	bne.n	8003942 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800391a:	2300      	movs	r3, #0
 800391c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	b29b      	uxth	r3, r3
 800392c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003930:	b29a      	uxth	r2, r3
 8003932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003934:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393a:	1c9a      	adds	r2, r3, #2
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	629a      	str	r2, [r3, #40]	; 0x28
 8003940:	e026      	b.n	8003990 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003946:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003948:	2300      	movs	r3, #0
 800394a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003954:	d007      	beq.n	8003966 <UART_Receive_IT+0x74>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10a      	bne.n	8003974 <UART_Receive_IT+0x82>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d106      	bne.n	8003974 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	b2da      	uxtb	r2, r3
 800396e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003970:	701a      	strb	r2, [r3, #0]
 8003972:	e008      	b.n	8003986 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003980:	b2da      	uxtb	r2, r3
 8003982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003984:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29b      	uxth	r3, r3
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	4619      	mov	r1, r3
 800399e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d15a      	bne.n	8003a5a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68da      	ldr	r2, [r3, #12]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f022 0220 	bic.w	r2, r2, #32
 80039b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	695a      	ldr	r2, [r3, #20]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0201 	bic.w	r2, r2, #1
 80039d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d135      	bne.n	8003a50 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	330c      	adds	r3, #12
 80039f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	e853 3f00 	ldrex	r3, [r3]
 80039f8:	613b      	str	r3, [r7, #16]
   return(result);
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f023 0310 	bic.w	r3, r3, #16
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	330c      	adds	r3, #12
 8003a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0a:	623a      	str	r2, [r7, #32]
 8003a0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0e:	69f9      	ldr	r1, [r7, #28]
 8003a10:	6a3a      	ldr	r2, [r7, #32]
 8003a12:	e841 2300 	strex	r3, r2, [r1]
 8003a16:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1e5      	bne.n	80039ea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0310 	and.w	r3, r3, #16
 8003a28:	2b10      	cmp	r3, #16
 8003a2a:	d10a      	bne.n	8003a42 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	60fb      	str	r3, [r7, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a46:	4619      	mov	r1, r3
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff fdf9 	bl	8003640 <HAL_UARTEx_RxEventCallback>
 8003a4e:	e002      	b.n	8003a56 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f7ff fde1 	bl	8003618 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a56:	2300      	movs	r3, #0
 8003a58:	e002      	b.n	8003a60 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e000      	b.n	8003a60 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003a5e:	2302      	movs	r3, #2
  }
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3730      	adds	r7, #48	; 0x30
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a6c:	b0c0      	sub	sp, #256	; 0x100
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a84:	68d9      	ldr	r1, [r3, #12]
 8003a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	ea40 0301 	orr.w	r3, r0, r1
 8003a90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ac0:	f021 010c 	bic.w	r1, r1, #12
 8003ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ace:	430b      	orrs	r3, r1
 8003ad0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae2:	6999      	ldr	r1, [r3, #24]
 8003ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	ea40 0301 	orr.w	r3, r0, r1
 8003aee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4b8f      	ldr	r3, [pc, #572]	; (8003d34 <UART_SetConfig+0x2cc>)
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d005      	beq.n	8003b08 <UART_SetConfig+0xa0>
 8003afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	4b8d      	ldr	r3, [pc, #564]	; (8003d38 <UART_SetConfig+0x2d0>)
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d104      	bne.n	8003b12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b08:	f7ff f9fa 	bl	8002f00 <HAL_RCC_GetPCLK2Freq>
 8003b0c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003b10:	e003      	b.n	8003b1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b12:	f7ff f9e1 	bl	8002ed8 <HAL_RCC_GetPCLK1Freq>
 8003b16:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b24:	f040 810c 	bne.w	8003d40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b32:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b3a:	4622      	mov	r2, r4
 8003b3c:	462b      	mov	r3, r5
 8003b3e:	1891      	adds	r1, r2, r2
 8003b40:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b42:	415b      	adcs	r3, r3
 8003b44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b4a:	4621      	mov	r1, r4
 8003b4c:	eb12 0801 	adds.w	r8, r2, r1
 8003b50:	4629      	mov	r1, r5
 8003b52:	eb43 0901 	adc.w	r9, r3, r1
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b6a:	4690      	mov	r8, r2
 8003b6c:	4699      	mov	r9, r3
 8003b6e:	4623      	mov	r3, r4
 8003b70:	eb18 0303 	adds.w	r3, r8, r3
 8003b74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b78:	462b      	mov	r3, r5
 8003b7a:	eb49 0303 	adc.w	r3, r9, r3
 8003b7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b8e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b96:	460b      	mov	r3, r1
 8003b98:	18db      	adds	r3, r3, r3
 8003b9a:	653b      	str	r3, [r7, #80]	; 0x50
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	eb42 0303 	adc.w	r3, r2, r3
 8003ba2:	657b      	str	r3, [r7, #84]	; 0x54
 8003ba4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ba8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003bac:	f7fd f84c 	bl	8000c48 <__aeabi_uldivmod>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4b61      	ldr	r3, [pc, #388]	; (8003d3c <UART_SetConfig+0x2d4>)
 8003bb6:	fba3 2302 	umull	r2, r3, r3, r2
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	011c      	lsls	r4, r3, #4
 8003bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bc8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003bcc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003bd0:	4642      	mov	r2, r8
 8003bd2:	464b      	mov	r3, r9
 8003bd4:	1891      	adds	r1, r2, r2
 8003bd6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003bd8:	415b      	adcs	r3, r3
 8003bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bdc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003be0:	4641      	mov	r1, r8
 8003be2:	eb12 0a01 	adds.w	sl, r2, r1
 8003be6:	4649      	mov	r1, r9
 8003be8:	eb43 0b01 	adc.w	fp, r3, r1
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bf8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c00:	4692      	mov	sl, r2
 8003c02:	469b      	mov	fp, r3
 8003c04:	4643      	mov	r3, r8
 8003c06:	eb1a 0303 	adds.w	r3, sl, r3
 8003c0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c0e:	464b      	mov	r3, r9
 8003c10:	eb4b 0303 	adc.w	r3, fp, r3
 8003c14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003c28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	18db      	adds	r3, r3, r3
 8003c30:	643b      	str	r3, [r7, #64]	; 0x40
 8003c32:	4613      	mov	r3, r2
 8003c34:	eb42 0303 	adc.w	r3, r2, r3
 8003c38:	647b      	str	r3, [r7, #68]	; 0x44
 8003c3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c42:	f7fd f801 	bl	8000c48 <__aeabi_uldivmod>
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	4b3b      	ldr	r3, [pc, #236]	; (8003d3c <UART_SetConfig+0x2d4>)
 8003c4e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	2264      	movs	r2, #100	; 0x64
 8003c56:	fb02 f303 	mul.w	r3, r2, r3
 8003c5a:	1acb      	subs	r3, r1, r3
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c62:	4b36      	ldr	r3, [pc, #216]	; (8003d3c <UART_SetConfig+0x2d4>)
 8003c64:	fba3 2302 	umull	r2, r3, r3, r2
 8003c68:	095b      	lsrs	r3, r3, #5
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c70:	441c      	add	r4, r3
 8003c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c76:	2200      	movs	r2, #0
 8003c78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c84:	4642      	mov	r2, r8
 8003c86:	464b      	mov	r3, r9
 8003c88:	1891      	adds	r1, r2, r2
 8003c8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c8c:	415b      	adcs	r3, r3
 8003c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c94:	4641      	mov	r1, r8
 8003c96:	1851      	adds	r1, r2, r1
 8003c98:	6339      	str	r1, [r7, #48]	; 0x30
 8003c9a:	4649      	mov	r1, r9
 8003c9c:	414b      	adcs	r3, r1
 8003c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003cac:	4659      	mov	r1, fp
 8003cae:	00cb      	lsls	r3, r1, #3
 8003cb0:	4651      	mov	r1, sl
 8003cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cb6:	4651      	mov	r1, sl
 8003cb8:	00ca      	lsls	r2, r1, #3
 8003cba:	4610      	mov	r0, r2
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	4642      	mov	r2, r8
 8003cc2:	189b      	adds	r3, r3, r2
 8003cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cc8:	464b      	mov	r3, r9
 8003cca:	460a      	mov	r2, r1
 8003ccc:	eb42 0303 	adc.w	r3, r2, r3
 8003cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ce0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ce4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ce8:	460b      	mov	r3, r1
 8003cea:	18db      	adds	r3, r3, r3
 8003cec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cee:	4613      	mov	r3, r2
 8003cf0:	eb42 0303 	adc.w	r3, r2, r3
 8003cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cfa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003cfe:	f7fc ffa3 	bl	8000c48 <__aeabi_uldivmod>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4b0d      	ldr	r3, [pc, #52]	; (8003d3c <UART_SetConfig+0x2d4>)
 8003d08:	fba3 1302 	umull	r1, r3, r3, r2
 8003d0c:	095b      	lsrs	r3, r3, #5
 8003d0e:	2164      	movs	r1, #100	; 0x64
 8003d10:	fb01 f303 	mul.w	r3, r1, r3
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	3332      	adds	r3, #50	; 0x32
 8003d1a:	4a08      	ldr	r2, [pc, #32]	; (8003d3c <UART_SetConfig+0x2d4>)
 8003d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d20:	095b      	lsrs	r3, r3, #5
 8003d22:	f003 0207 	and.w	r2, r3, #7
 8003d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4422      	add	r2, r4
 8003d2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d30:	e105      	b.n	8003f3e <UART_SetConfig+0x4d6>
 8003d32:	bf00      	nop
 8003d34:	40011000 	.word	0x40011000
 8003d38:	40011400 	.word	0x40011400
 8003d3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d44:	2200      	movs	r2, #0
 8003d46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d52:	4642      	mov	r2, r8
 8003d54:	464b      	mov	r3, r9
 8003d56:	1891      	adds	r1, r2, r2
 8003d58:	6239      	str	r1, [r7, #32]
 8003d5a:	415b      	adcs	r3, r3
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d62:	4641      	mov	r1, r8
 8003d64:	1854      	adds	r4, r2, r1
 8003d66:	4649      	mov	r1, r9
 8003d68:	eb43 0501 	adc.w	r5, r3, r1
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	00eb      	lsls	r3, r5, #3
 8003d76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d7a:	00e2      	lsls	r2, r4, #3
 8003d7c:	4614      	mov	r4, r2
 8003d7e:	461d      	mov	r5, r3
 8003d80:	4643      	mov	r3, r8
 8003d82:	18e3      	adds	r3, r4, r3
 8003d84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d88:	464b      	mov	r3, r9
 8003d8a:	eb45 0303 	adc.w	r3, r5, r3
 8003d8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003dae:	4629      	mov	r1, r5
 8003db0:	008b      	lsls	r3, r1, #2
 8003db2:	4621      	mov	r1, r4
 8003db4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003db8:	4621      	mov	r1, r4
 8003dba:	008a      	lsls	r2, r1, #2
 8003dbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003dc0:	f7fc ff42 	bl	8000c48 <__aeabi_uldivmod>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4b60      	ldr	r3, [pc, #384]	; (8003f4c <UART_SetConfig+0x4e4>)
 8003dca:	fba3 2302 	umull	r2, r3, r3, r2
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	011c      	lsls	r4, r3, #4
 8003dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ddc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003de0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003de4:	4642      	mov	r2, r8
 8003de6:	464b      	mov	r3, r9
 8003de8:	1891      	adds	r1, r2, r2
 8003dea:	61b9      	str	r1, [r7, #24]
 8003dec:	415b      	adcs	r3, r3
 8003dee:	61fb      	str	r3, [r7, #28]
 8003df0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003df4:	4641      	mov	r1, r8
 8003df6:	1851      	adds	r1, r2, r1
 8003df8:	6139      	str	r1, [r7, #16]
 8003dfa:	4649      	mov	r1, r9
 8003dfc:	414b      	adcs	r3, r1
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	f04f 0300 	mov.w	r3, #0
 8003e08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e0c:	4659      	mov	r1, fp
 8003e0e:	00cb      	lsls	r3, r1, #3
 8003e10:	4651      	mov	r1, sl
 8003e12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e16:	4651      	mov	r1, sl
 8003e18:	00ca      	lsls	r2, r1, #3
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4603      	mov	r3, r0
 8003e20:	4642      	mov	r2, r8
 8003e22:	189b      	adds	r3, r3, r2
 8003e24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e28:	464b      	mov	r3, r9
 8003e2a:	460a      	mov	r2, r1
 8003e2c:	eb42 0303 	adc.w	r3, r2, r3
 8003e30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e4c:	4649      	mov	r1, r9
 8003e4e:	008b      	lsls	r3, r1, #2
 8003e50:	4641      	mov	r1, r8
 8003e52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e56:	4641      	mov	r1, r8
 8003e58:	008a      	lsls	r2, r1, #2
 8003e5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e5e:	f7fc fef3 	bl	8000c48 <__aeabi_uldivmod>
 8003e62:	4602      	mov	r2, r0
 8003e64:	460b      	mov	r3, r1
 8003e66:	4b39      	ldr	r3, [pc, #228]	; (8003f4c <UART_SetConfig+0x4e4>)
 8003e68:	fba3 1302 	umull	r1, r3, r3, r2
 8003e6c:	095b      	lsrs	r3, r3, #5
 8003e6e:	2164      	movs	r1, #100	; 0x64
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	3332      	adds	r3, #50	; 0x32
 8003e7a:	4a34      	ldr	r2, [pc, #208]	; (8003f4c <UART_SetConfig+0x4e4>)
 8003e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e80:	095b      	lsrs	r3, r3, #5
 8003e82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e86:	441c      	add	r4, r3
 8003e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	673b      	str	r3, [r7, #112]	; 0x70
 8003e90:	677a      	str	r2, [r7, #116]	; 0x74
 8003e92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e96:	4642      	mov	r2, r8
 8003e98:	464b      	mov	r3, r9
 8003e9a:	1891      	adds	r1, r2, r2
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	415b      	adcs	r3, r3
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ea6:	4641      	mov	r1, r8
 8003ea8:	1851      	adds	r1, r2, r1
 8003eaa:	6039      	str	r1, [r7, #0]
 8003eac:	4649      	mov	r1, r9
 8003eae:	414b      	adcs	r3, r1
 8003eb0:	607b      	str	r3, [r7, #4]
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ebe:	4659      	mov	r1, fp
 8003ec0:	00cb      	lsls	r3, r1, #3
 8003ec2:	4651      	mov	r1, sl
 8003ec4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ec8:	4651      	mov	r1, sl
 8003eca:	00ca      	lsls	r2, r1, #3
 8003ecc:	4610      	mov	r0, r2
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	4642      	mov	r2, r8
 8003ed4:	189b      	adds	r3, r3, r2
 8003ed6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ed8:	464b      	mov	r3, r9
 8003eda:	460a      	mov	r2, r1
 8003edc:	eb42 0303 	adc.w	r3, r2, r3
 8003ee0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	663b      	str	r3, [r7, #96]	; 0x60
 8003eec:	667a      	str	r2, [r7, #100]	; 0x64
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	f04f 0300 	mov.w	r3, #0
 8003ef6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003efa:	4649      	mov	r1, r9
 8003efc:	008b      	lsls	r3, r1, #2
 8003efe:	4641      	mov	r1, r8
 8003f00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f04:	4641      	mov	r1, r8
 8003f06:	008a      	lsls	r2, r1, #2
 8003f08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003f0c:	f7fc fe9c 	bl	8000c48 <__aeabi_uldivmod>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4b0d      	ldr	r3, [pc, #52]	; (8003f4c <UART_SetConfig+0x4e4>)
 8003f16:	fba3 1302 	umull	r1, r3, r3, r2
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	2164      	movs	r1, #100	; 0x64
 8003f1e:	fb01 f303 	mul.w	r3, r1, r3
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	3332      	adds	r3, #50	; 0x32
 8003f28:	4a08      	ldr	r2, [pc, #32]	; (8003f4c <UART_SetConfig+0x4e4>)
 8003f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	f003 020f 	and.w	r2, r3, #15
 8003f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4422      	add	r2, r4
 8003f3c:	609a      	str	r2, [r3, #8]
}
 8003f3e:	bf00      	nop
 8003f40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f44:	46bd      	mov	sp, r7
 8003f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f4a:	bf00      	nop
 8003f4c:	51eb851f 	.word	0x51eb851f

08003f50 <__errno>:
 8003f50:	4b01      	ldr	r3, [pc, #4]	; (8003f58 <__errno+0x8>)
 8003f52:	6818      	ldr	r0, [r3, #0]
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	2000000c 	.word	0x2000000c

08003f5c <__libc_init_array>:
 8003f5c:	b570      	push	{r4, r5, r6, lr}
 8003f5e:	4d0d      	ldr	r5, [pc, #52]	; (8003f94 <__libc_init_array+0x38>)
 8003f60:	4c0d      	ldr	r4, [pc, #52]	; (8003f98 <__libc_init_array+0x3c>)
 8003f62:	1b64      	subs	r4, r4, r5
 8003f64:	10a4      	asrs	r4, r4, #2
 8003f66:	2600      	movs	r6, #0
 8003f68:	42a6      	cmp	r6, r4
 8003f6a:	d109      	bne.n	8003f80 <__libc_init_array+0x24>
 8003f6c:	4d0b      	ldr	r5, [pc, #44]	; (8003f9c <__libc_init_array+0x40>)
 8003f6e:	4c0c      	ldr	r4, [pc, #48]	; (8003fa0 <__libc_init_array+0x44>)
 8003f70:	f002 ff02 	bl	8006d78 <_init>
 8003f74:	1b64      	subs	r4, r4, r5
 8003f76:	10a4      	asrs	r4, r4, #2
 8003f78:	2600      	movs	r6, #0
 8003f7a:	42a6      	cmp	r6, r4
 8003f7c:	d105      	bne.n	8003f8a <__libc_init_array+0x2e>
 8003f7e:	bd70      	pop	{r4, r5, r6, pc}
 8003f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f84:	4798      	blx	r3
 8003f86:	3601      	adds	r6, #1
 8003f88:	e7ee      	b.n	8003f68 <__libc_init_array+0xc>
 8003f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f8e:	4798      	blx	r3
 8003f90:	3601      	adds	r6, #1
 8003f92:	e7f2      	b.n	8003f7a <__libc_init_array+0x1e>
 8003f94:	080071ac 	.word	0x080071ac
 8003f98:	080071ac 	.word	0x080071ac
 8003f9c:	080071ac 	.word	0x080071ac
 8003fa0:	080071b0 	.word	0x080071b0

08003fa4 <memset>:
 8003fa4:	4402      	add	r2, r0
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d100      	bne.n	8003fae <memset+0xa>
 8003fac:	4770      	bx	lr
 8003fae:	f803 1b01 	strb.w	r1, [r3], #1
 8003fb2:	e7f9      	b.n	8003fa8 <memset+0x4>

08003fb4 <__cvt>:
 8003fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fb8:	ec55 4b10 	vmov	r4, r5, d0
 8003fbc:	2d00      	cmp	r5, #0
 8003fbe:	460e      	mov	r6, r1
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	462b      	mov	r3, r5
 8003fc4:	bfbb      	ittet	lt
 8003fc6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003fca:	461d      	movlt	r5, r3
 8003fcc:	2300      	movge	r3, #0
 8003fce:	232d      	movlt	r3, #45	; 0x2d
 8003fd0:	700b      	strb	r3, [r1, #0]
 8003fd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003fd4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003fd8:	4691      	mov	r9, r2
 8003fda:	f023 0820 	bic.w	r8, r3, #32
 8003fde:	bfbc      	itt	lt
 8003fe0:	4622      	movlt	r2, r4
 8003fe2:	4614      	movlt	r4, r2
 8003fe4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003fe8:	d005      	beq.n	8003ff6 <__cvt+0x42>
 8003fea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003fee:	d100      	bne.n	8003ff2 <__cvt+0x3e>
 8003ff0:	3601      	adds	r6, #1
 8003ff2:	2102      	movs	r1, #2
 8003ff4:	e000      	b.n	8003ff8 <__cvt+0x44>
 8003ff6:	2103      	movs	r1, #3
 8003ff8:	ab03      	add	r3, sp, #12
 8003ffa:	9301      	str	r3, [sp, #4]
 8003ffc:	ab02      	add	r3, sp, #8
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	ec45 4b10 	vmov	d0, r4, r5
 8004004:	4653      	mov	r3, sl
 8004006:	4632      	mov	r2, r6
 8004008:	f000 fcea 	bl	80049e0 <_dtoa_r>
 800400c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004010:	4607      	mov	r7, r0
 8004012:	d102      	bne.n	800401a <__cvt+0x66>
 8004014:	f019 0f01 	tst.w	r9, #1
 8004018:	d022      	beq.n	8004060 <__cvt+0xac>
 800401a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800401e:	eb07 0906 	add.w	r9, r7, r6
 8004022:	d110      	bne.n	8004046 <__cvt+0x92>
 8004024:	783b      	ldrb	r3, [r7, #0]
 8004026:	2b30      	cmp	r3, #48	; 0x30
 8004028:	d10a      	bne.n	8004040 <__cvt+0x8c>
 800402a:	2200      	movs	r2, #0
 800402c:	2300      	movs	r3, #0
 800402e:	4620      	mov	r0, r4
 8004030:	4629      	mov	r1, r5
 8004032:	f7fc fd49 	bl	8000ac8 <__aeabi_dcmpeq>
 8004036:	b918      	cbnz	r0, 8004040 <__cvt+0x8c>
 8004038:	f1c6 0601 	rsb	r6, r6, #1
 800403c:	f8ca 6000 	str.w	r6, [sl]
 8004040:	f8da 3000 	ldr.w	r3, [sl]
 8004044:	4499      	add	r9, r3
 8004046:	2200      	movs	r2, #0
 8004048:	2300      	movs	r3, #0
 800404a:	4620      	mov	r0, r4
 800404c:	4629      	mov	r1, r5
 800404e:	f7fc fd3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004052:	b108      	cbz	r0, 8004058 <__cvt+0xa4>
 8004054:	f8cd 900c 	str.w	r9, [sp, #12]
 8004058:	2230      	movs	r2, #48	; 0x30
 800405a:	9b03      	ldr	r3, [sp, #12]
 800405c:	454b      	cmp	r3, r9
 800405e:	d307      	bcc.n	8004070 <__cvt+0xbc>
 8004060:	9b03      	ldr	r3, [sp, #12]
 8004062:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004064:	1bdb      	subs	r3, r3, r7
 8004066:	4638      	mov	r0, r7
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	b004      	add	sp, #16
 800406c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004070:	1c59      	adds	r1, r3, #1
 8004072:	9103      	str	r1, [sp, #12]
 8004074:	701a      	strb	r2, [r3, #0]
 8004076:	e7f0      	b.n	800405a <__cvt+0xa6>

08004078 <__exponent>:
 8004078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800407a:	4603      	mov	r3, r0
 800407c:	2900      	cmp	r1, #0
 800407e:	bfb8      	it	lt
 8004080:	4249      	neglt	r1, r1
 8004082:	f803 2b02 	strb.w	r2, [r3], #2
 8004086:	bfb4      	ite	lt
 8004088:	222d      	movlt	r2, #45	; 0x2d
 800408a:	222b      	movge	r2, #43	; 0x2b
 800408c:	2909      	cmp	r1, #9
 800408e:	7042      	strb	r2, [r0, #1]
 8004090:	dd2a      	ble.n	80040e8 <__exponent+0x70>
 8004092:	f10d 0407 	add.w	r4, sp, #7
 8004096:	46a4      	mov	ip, r4
 8004098:	270a      	movs	r7, #10
 800409a:	46a6      	mov	lr, r4
 800409c:	460a      	mov	r2, r1
 800409e:	fb91 f6f7 	sdiv	r6, r1, r7
 80040a2:	fb07 1516 	mls	r5, r7, r6, r1
 80040a6:	3530      	adds	r5, #48	; 0x30
 80040a8:	2a63      	cmp	r2, #99	; 0x63
 80040aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80040ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80040b2:	4631      	mov	r1, r6
 80040b4:	dcf1      	bgt.n	800409a <__exponent+0x22>
 80040b6:	3130      	adds	r1, #48	; 0x30
 80040b8:	f1ae 0502 	sub.w	r5, lr, #2
 80040bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80040c0:	1c44      	adds	r4, r0, #1
 80040c2:	4629      	mov	r1, r5
 80040c4:	4561      	cmp	r1, ip
 80040c6:	d30a      	bcc.n	80040de <__exponent+0x66>
 80040c8:	f10d 0209 	add.w	r2, sp, #9
 80040cc:	eba2 020e 	sub.w	r2, r2, lr
 80040d0:	4565      	cmp	r5, ip
 80040d2:	bf88      	it	hi
 80040d4:	2200      	movhi	r2, #0
 80040d6:	4413      	add	r3, r2
 80040d8:	1a18      	subs	r0, r3, r0
 80040da:	b003      	add	sp, #12
 80040dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80040e6:	e7ed      	b.n	80040c4 <__exponent+0x4c>
 80040e8:	2330      	movs	r3, #48	; 0x30
 80040ea:	3130      	adds	r1, #48	; 0x30
 80040ec:	7083      	strb	r3, [r0, #2]
 80040ee:	70c1      	strb	r1, [r0, #3]
 80040f0:	1d03      	adds	r3, r0, #4
 80040f2:	e7f1      	b.n	80040d8 <__exponent+0x60>

080040f4 <_printf_float>:
 80040f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040f8:	ed2d 8b02 	vpush	{d8}
 80040fc:	b08d      	sub	sp, #52	; 0x34
 80040fe:	460c      	mov	r4, r1
 8004100:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004104:	4616      	mov	r6, r2
 8004106:	461f      	mov	r7, r3
 8004108:	4605      	mov	r5, r0
 800410a:	f001 fa57 	bl	80055bc <_localeconv_r>
 800410e:	f8d0 a000 	ldr.w	sl, [r0]
 8004112:	4650      	mov	r0, sl
 8004114:	f7fc f85c 	bl	80001d0 <strlen>
 8004118:	2300      	movs	r3, #0
 800411a:	930a      	str	r3, [sp, #40]	; 0x28
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	9305      	str	r3, [sp, #20]
 8004120:	f8d8 3000 	ldr.w	r3, [r8]
 8004124:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004128:	3307      	adds	r3, #7
 800412a:	f023 0307 	bic.w	r3, r3, #7
 800412e:	f103 0208 	add.w	r2, r3, #8
 8004132:	f8c8 2000 	str.w	r2, [r8]
 8004136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800413e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004142:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004146:	9307      	str	r3, [sp, #28]
 8004148:	f8cd 8018 	str.w	r8, [sp, #24]
 800414c:	ee08 0a10 	vmov	s16, r0
 8004150:	4b9f      	ldr	r3, [pc, #636]	; (80043d0 <_printf_float+0x2dc>)
 8004152:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004156:	f04f 32ff 	mov.w	r2, #4294967295
 800415a:	f7fc fce7 	bl	8000b2c <__aeabi_dcmpun>
 800415e:	bb88      	cbnz	r0, 80041c4 <_printf_float+0xd0>
 8004160:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004164:	4b9a      	ldr	r3, [pc, #616]	; (80043d0 <_printf_float+0x2dc>)
 8004166:	f04f 32ff 	mov.w	r2, #4294967295
 800416a:	f7fc fcc1 	bl	8000af0 <__aeabi_dcmple>
 800416e:	bb48      	cbnz	r0, 80041c4 <_printf_float+0xd0>
 8004170:	2200      	movs	r2, #0
 8004172:	2300      	movs	r3, #0
 8004174:	4640      	mov	r0, r8
 8004176:	4649      	mov	r1, r9
 8004178:	f7fc fcb0 	bl	8000adc <__aeabi_dcmplt>
 800417c:	b110      	cbz	r0, 8004184 <_printf_float+0x90>
 800417e:	232d      	movs	r3, #45	; 0x2d
 8004180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004184:	4b93      	ldr	r3, [pc, #588]	; (80043d4 <_printf_float+0x2e0>)
 8004186:	4894      	ldr	r0, [pc, #592]	; (80043d8 <_printf_float+0x2e4>)
 8004188:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800418c:	bf94      	ite	ls
 800418e:	4698      	movls	r8, r3
 8004190:	4680      	movhi	r8, r0
 8004192:	2303      	movs	r3, #3
 8004194:	6123      	str	r3, [r4, #16]
 8004196:	9b05      	ldr	r3, [sp, #20]
 8004198:	f023 0204 	bic.w	r2, r3, #4
 800419c:	6022      	str	r2, [r4, #0]
 800419e:	f04f 0900 	mov.w	r9, #0
 80041a2:	9700      	str	r7, [sp, #0]
 80041a4:	4633      	mov	r3, r6
 80041a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80041a8:	4621      	mov	r1, r4
 80041aa:	4628      	mov	r0, r5
 80041ac:	f000 f9d8 	bl	8004560 <_printf_common>
 80041b0:	3001      	adds	r0, #1
 80041b2:	f040 8090 	bne.w	80042d6 <_printf_float+0x1e2>
 80041b6:	f04f 30ff 	mov.w	r0, #4294967295
 80041ba:	b00d      	add	sp, #52	; 0x34
 80041bc:	ecbd 8b02 	vpop	{d8}
 80041c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041c4:	4642      	mov	r2, r8
 80041c6:	464b      	mov	r3, r9
 80041c8:	4640      	mov	r0, r8
 80041ca:	4649      	mov	r1, r9
 80041cc:	f7fc fcae 	bl	8000b2c <__aeabi_dcmpun>
 80041d0:	b140      	cbz	r0, 80041e4 <_printf_float+0xf0>
 80041d2:	464b      	mov	r3, r9
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	bfbc      	itt	lt
 80041d8:	232d      	movlt	r3, #45	; 0x2d
 80041da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80041de:	487f      	ldr	r0, [pc, #508]	; (80043dc <_printf_float+0x2e8>)
 80041e0:	4b7f      	ldr	r3, [pc, #508]	; (80043e0 <_printf_float+0x2ec>)
 80041e2:	e7d1      	b.n	8004188 <_printf_float+0x94>
 80041e4:	6863      	ldr	r3, [r4, #4]
 80041e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80041ea:	9206      	str	r2, [sp, #24]
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	d13f      	bne.n	8004270 <_printf_float+0x17c>
 80041f0:	2306      	movs	r3, #6
 80041f2:	6063      	str	r3, [r4, #4]
 80041f4:	9b05      	ldr	r3, [sp, #20]
 80041f6:	6861      	ldr	r1, [r4, #4]
 80041f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80041fc:	2300      	movs	r3, #0
 80041fe:	9303      	str	r3, [sp, #12]
 8004200:	ab0a      	add	r3, sp, #40	; 0x28
 8004202:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004206:	ab09      	add	r3, sp, #36	; 0x24
 8004208:	ec49 8b10 	vmov	d0, r8, r9
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	6022      	str	r2, [r4, #0]
 8004210:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004214:	4628      	mov	r0, r5
 8004216:	f7ff fecd 	bl	8003fb4 <__cvt>
 800421a:	9b06      	ldr	r3, [sp, #24]
 800421c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800421e:	2b47      	cmp	r3, #71	; 0x47
 8004220:	4680      	mov	r8, r0
 8004222:	d108      	bne.n	8004236 <_printf_float+0x142>
 8004224:	1cc8      	adds	r0, r1, #3
 8004226:	db02      	blt.n	800422e <_printf_float+0x13a>
 8004228:	6863      	ldr	r3, [r4, #4]
 800422a:	4299      	cmp	r1, r3
 800422c:	dd41      	ble.n	80042b2 <_printf_float+0x1be>
 800422e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004232:	fa5f fb8b 	uxtb.w	fp, fp
 8004236:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800423a:	d820      	bhi.n	800427e <_printf_float+0x18a>
 800423c:	3901      	subs	r1, #1
 800423e:	465a      	mov	r2, fp
 8004240:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004244:	9109      	str	r1, [sp, #36]	; 0x24
 8004246:	f7ff ff17 	bl	8004078 <__exponent>
 800424a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800424c:	1813      	adds	r3, r2, r0
 800424e:	2a01      	cmp	r2, #1
 8004250:	4681      	mov	r9, r0
 8004252:	6123      	str	r3, [r4, #16]
 8004254:	dc02      	bgt.n	800425c <_printf_float+0x168>
 8004256:	6822      	ldr	r2, [r4, #0]
 8004258:	07d2      	lsls	r2, r2, #31
 800425a:	d501      	bpl.n	8004260 <_printf_float+0x16c>
 800425c:	3301      	adds	r3, #1
 800425e:	6123      	str	r3, [r4, #16]
 8004260:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004264:	2b00      	cmp	r3, #0
 8004266:	d09c      	beq.n	80041a2 <_printf_float+0xae>
 8004268:	232d      	movs	r3, #45	; 0x2d
 800426a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800426e:	e798      	b.n	80041a2 <_printf_float+0xae>
 8004270:	9a06      	ldr	r2, [sp, #24]
 8004272:	2a47      	cmp	r2, #71	; 0x47
 8004274:	d1be      	bne.n	80041f4 <_printf_float+0x100>
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1bc      	bne.n	80041f4 <_printf_float+0x100>
 800427a:	2301      	movs	r3, #1
 800427c:	e7b9      	b.n	80041f2 <_printf_float+0xfe>
 800427e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004282:	d118      	bne.n	80042b6 <_printf_float+0x1c2>
 8004284:	2900      	cmp	r1, #0
 8004286:	6863      	ldr	r3, [r4, #4]
 8004288:	dd0b      	ble.n	80042a2 <_printf_float+0x1ae>
 800428a:	6121      	str	r1, [r4, #16]
 800428c:	b913      	cbnz	r3, 8004294 <_printf_float+0x1a0>
 800428e:	6822      	ldr	r2, [r4, #0]
 8004290:	07d0      	lsls	r0, r2, #31
 8004292:	d502      	bpl.n	800429a <_printf_float+0x1a6>
 8004294:	3301      	adds	r3, #1
 8004296:	440b      	add	r3, r1
 8004298:	6123      	str	r3, [r4, #16]
 800429a:	65a1      	str	r1, [r4, #88]	; 0x58
 800429c:	f04f 0900 	mov.w	r9, #0
 80042a0:	e7de      	b.n	8004260 <_printf_float+0x16c>
 80042a2:	b913      	cbnz	r3, 80042aa <_printf_float+0x1b6>
 80042a4:	6822      	ldr	r2, [r4, #0]
 80042a6:	07d2      	lsls	r2, r2, #31
 80042a8:	d501      	bpl.n	80042ae <_printf_float+0x1ba>
 80042aa:	3302      	adds	r3, #2
 80042ac:	e7f4      	b.n	8004298 <_printf_float+0x1a4>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e7f2      	b.n	8004298 <_printf_float+0x1a4>
 80042b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80042b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042b8:	4299      	cmp	r1, r3
 80042ba:	db05      	blt.n	80042c8 <_printf_float+0x1d4>
 80042bc:	6823      	ldr	r3, [r4, #0]
 80042be:	6121      	str	r1, [r4, #16]
 80042c0:	07d8      	lsls	r0, r3, #31
 80042c2:	d5ea      	bpl.n	800429a <_printf_float+0x1a6>
 80042c4:	1c4b      	adds	r3, r1, #1
 80042c6:	e7e7      	b.n	8004298 <_printf_float+0x1a4>
 80042c8:	2900      	cmp	r1, #0
 80042ca:	bfd4      	ite	le
 80042cc:	f1c1 0202 	rsble	r2, r1, #2
 80042d0:	2201      	movgt	r2, #1
 80042d2:	4413      	add	r3, r2
 80042d4:	e7e0      	b.n	8004298 <_printf_float+0x1a4>
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	055a      	lsls	r2, r3, #21
 80042da:	d407      	bmi.n	80042ec <_printf_float+0x1f8>
 80042dc:	6923      	ldr	r3, [r4, #16]
 80042de:	4642      	mov	r2, r8
 80042e0:	4631      	mov	r1, r6
 80042e2:	4628      	mov	r0, r5
 80042e4:	47b8      	blx	r7
 80042e6:	3001      	adds	r0, #1
 80042e8:	d12c      	bne.n	8004344 <_printf_float+0x250>
 80042ea:	e764      	b.n	80041b6 <_printf_float+0xc2>
 80042ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80042f0:	f240 80e0 	bls.w	80044b4 <_printf_float+0x3c0>
 80042f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042f8:	2200      	movs	r2, #0
 80042fa:	2300      	movs	r3, #0
 80042fc:	f7fc fbe4 	bl	8000ac8 <__aeabi_dcmpeq>
 8004300:	2800      	cmp	r0, #0
 8004302:	d034      	beq.n	800436e <_printf_float+0x27a>
 8004304:	4a37      	ldr	r2, [pc, #220]	; (80043e4 <_printf_float+0x2f0>)
 8004306:	2301      	movs	r3, #1
 8004308:	4631      	mov	r1, r6
 800430a:	4628      	mov	r0, r5
 800430c:	47b8      	blx	r7
 800430e:	3001      	adds	r0, #1
 8004310:	f43f af51 	beq.w	80041b6 <_printf_float+0xc2>
 8004314:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004318:	429a      	cmp	r2, r3
 800431a:	db02      	blt.n	8004322 <_printf_float+0x22e>
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	07d8      	lsls	r0, r3, #31
 8004320:	d510      	bpl.n	8004344 <_printf_float+0x250>
 8004322:	ee18 3a10 	vmov	r3, s16
 8004326:	4652      	mov	r2, sl
 8004328:	4631      	mov	r1, r6
 800432a:	4628      	mov	r0, r5
 800432c:	47b8      	blx	r7
 800432e:	3001      	adds	r0, #1
 8004330:	f43f af41 	beq.w	80041b6 <_printf_float+0xc2>
 8004334:	f04f 0800 	mov.w	r8, #0
 8004338:	f104 091a 	add.w	r9, r4, #26
 800433c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800433e:	3b01      	subs	r3, #1
 8004340:	4543      	cmp	r3, r8
 8004342:	dc09      	bgt.n	8004358 <_printf_float+0x264>
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	079b      	lsls	r3, r3, #30
 8004348:	f100 8105 	bmi.w	8004556 <_printf_float+0x462>
 800434c:	68e0      	ldr	r0, [r4, #12]
 800434e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004350:	4298      	cmp	r0, r3
 8004352:	bfb8      	it	lt
 8004354:	4618      	movlt	r0, r3
 8004356:	e730      	b.n	80041ba <_printf_float+0xc6>
 8004358:	2301      	movs	r3, #1
 800435a:	464a      	mov	r2, r9
 800435c:	4631      	mov	r1, r6
 800435e:	4628      	mov	r0, r5
 8004360:	47b8      	blx	r7
 8004362:	3001      	adds	r0, #1
 8004364:	f43f af27 	beq.w	80041b6 <_printf_float+0xc2>
 8004368:	f108 0801 	add.w	r8, r8, #1
 800436c:	e7e6      	b.n	800433c <_printf_float+0x248>
 800436e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004370:	2b00      	cmp	r3, #0
 8004372:	dc39      	bgt.n	80043e8 <_printf_float+0x2f4>
 8004374:	4a1b      	ldr	r2, [pc, #108]	; (80043e4 <_printf_float+0x2f0>)
 8004376:	2301      	movs	r3, #1
 8004378:	4631      	mov	r1, r6
 800437a:	4628      	mov	r0, r5
 800437c:	47b8      	blx	r7
 800437e:	3001      	adds	r0, #1
 8004380:	f43f af19 	beq.w	80041b6 <_printf_float+0xc2>
 8004384:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004388:	4313      	orrs	r3, r2
 800438a:	d102      	bne.n	8004392 <_printf_float+0x29e>
 800438c:	6823      	ldr	r3, [r4, #0]
 800438e:	07d9      	lsls	r1, r3, #31
 8004390:	d5d8      	bpl.n	8004344 <_printf_float+0x250>
 8004392:	ee18 3a10 	vmov	r3, s16
 8004396:	4652      	mov	r2, sl
 8004398:	4631      	mov	r1, r6
 800439a:	4628      	mov	r0, r5
 800439c:	47b8      	blx	r7
 800439e:	3001      	adds	r0, #1
 80043a0:	f43f af09 	beq.w	80041b6 <_printf_float+0xc2>
 80043a4:	f04f 0900 	mov.w	r9, #0
 80043a8:	f104 0a1a 	add.w	sl, r4, #26
 80043ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043ae:	425b      	negs	r3, r3
 80043b0:	454b      	cmp	r3, r9
 80043b2:	dc01      	bgt.n	80043b8 <_printf_float+0x2c4>
 80043b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043b6:	e792      	b.n	80042de <_printf_float+0x1ea>
 80043b8:	2301      	movs	r3, #1
 80043ba:	4652      	mov	r2, sl
 80043bc:	4631      	mov	r1, r6
 80043be:	4628      	mov	r0, r5
 80043c0:	47b8      	blx	r7
 80043c2:	3001      	adds	r0, #1
 80043c4:	f43f aef7 	beq.w	80041b6 <_printf_float+0xc2>
 80043c8:	f109 0901 	add.w	r9, r9, #1
 80043cc:	e7ee      	b.n	80043ac <_printf_float+0x2b8>
 80043ce:	bf00      	nop
 80043d0:	7fefffff 	.word	0x7fefffff
 80043d4:	08006dcc 	.word	0x08006dcc
 80043d8:	08006dd0 	.word	0x08006dd0
 80043dc:	08006dd8 	.word	0x08006dd8
 80043e0:	08006dd4 	.word	0x08006dd4
 80043e4:	08006ddc 	.word	0x08006ddc
 80043e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043ec:	429a      	cmp	r2, r3
 80043ee:	bfa8      	it	ge
 80043f0:	461a      	movge	r2, r3
 80043f2:	2a00      	cmp	r2, #0
 80043f4:	4691      	mov	r9, r2
 80043f6:	dc37      	bgt.n	8004468 <_printf_float+0x374>
 80043f8:	f04f 0b00 	mov.w	fp, #0
 80043fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004400:	f104 021a 	add.w	r2, r4, #26
 8004404:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004406:	9305      	str	r3, [sp, #20]
 8004408:	eba3 0309 	sub.w	r3, r3, r9
 800440c:	455b      	cmp	r3, fp
 800440e:	dc33      	bgt.n	8004478 <_printf_float+0x384>
 8004410:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004414:	429a      	cmp	r2, r3
 8004416:	db3b      	blt.n	8004490 <_printf_float+0x39c>
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	07da      	lsls	r2, r3, #31
 800441c:	d438      	bmi.n	8004490 <_printf_float+0x39c>
 800441e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004420:	9a05      	ldr	r2, [sp, #20]
 8004422:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004424:	1a9a      	subs	r2, r3, r2
 8004426:	eba3 0901 	sub.w	r9, r3, r1
 800442a:	4591      	cmp	r9, r2
 800442c:	bfa8      	it	ge
 800442e:	4691      	movge	r9, r2
 8004430:	f1b9 0f00 	cmp.w	r9, #0
 8004434:	dc35      	bgt.n	80044a2 <_printf_float+0x3ae>
 8004436:	f04f 0800 	mov.w	r8, #0
 800443a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800443e:	f104 0a1a 	add.w	sl, r4, #26
 8004442:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004446:	1a9b      	subs	r3, r3, r2
 8004448:	eba3 0309 	sub.w	r3, r3, r9
 800444c:	4543      	cmp	r3, r8
 800444e:	f77f af79 	ble.w	8004344 <_printf_float+0x250>
 8004452:	2301      	movs	r3, #1
 8004454:	4652      	mov	r2, sl
 8004456:	4631      	mov	r1, r6
 8004458:	4628      	mov	r0, r5
 800445a:	47b8      	blx	r7
 800445c:	3001      	adds	r0, #1
 800445e:	f43f aeaa 	beq.w	80041b6 <_printf_float+0xc2>
 8004462:	f108 0801 	add.w	r8, r8, #1
 8004466:	e7ec      	b.n	8004442 <_printf_float+0x34e>
 8004468:	4613      	mov	r3, r2
 800446a:	4631      	mov	r1, r6
 800446c:	4642      	mov	r2, r8
 800446e:	4628      	mov	r0, r5
 8004470:	47b8      	blx	r7
 8004472:	3001      	adds	r0, #1
 8004474:	d1c0      	bne.n	80043f8 <_printf_float+0x304>
 8004476:	e69e      	b.n	80041b6 <_printf_float+0xc2>
 8004478:	2301      	movs	r3, #1
 800447a:	4631      	mov	r1, r6
 800447c:	4628      	mov	r0, r5
 800447e:	9205      	str	r2, [sp, #20]
 8004480:	47b8      	blx	r7
 8004482:	3001      	adds	r0, #1
 8004484:	f43f ae97 	beq.w	80041b6 <_printf_float+0xc2>
 8004488:	9a05      	ldr	r2, [sp, #20]
 800448a:	f10b 0b01 	add.w	fp, fp, #1
 800448e:	e7b9      	b.n	8004404 <_printf_float+0x310>
 8004490:	ee18 3a10 	vmov	r3, s16
 8004494:	4652      	mov	r2, sl
 8004496:	4631      	mov	r1, r6
 8004498:	4628      	mov	r0, r5
 800449a:	47b8      	blx	r7
 800449c:	3001      	adds	r0, #1
 800449e:	d1be      	bne.n	800441e <_printf_float+0x32a>
 80044a0:	e689      	b.n	80041b6 <_printf_float+0xc2>
 80044a2:	9a05      	ldr	r2, [sp, #20]
 80044a4:	464b      	mov	r3, r9
 80044a6:	4442      	add	r2, r8
 80044a8:	4631      	mov	r1, r6
 80044aa:	4628      	mov	r0, r5
 80044ac:	47b8      	blx	r7
 80044ae:	3001      	adds	r0, #1
 80044b0:	d1c1      	bne.n	8004436 <_printf_float+0x342>
 80044b2:	e680      	b.n	80041b6 <_printf_float+0xc2>
 80044b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044b6:	2a01      	cmp	r2, #1
 80044b8:	dc01      	bgt.n	80044be <_printf_float+0x3ca>
 80044ba:	07db      	lsls	r3, r3, #31
 80044bc:	d538      	bpl.n	8004530 <_printf_float+0x43c>
 80044be:	2301      	movs	r3, #1
 80044c0:	4642      	mov	r2, r8
 80044c2:	4631      	mov	r1, r6
 80044c4:	4628      	mov	r0, r5
 80044c6:	47b8      	blx	r7
 80044c8:	3001      	adds	r0, #1
 80044ca:	f43f ae74 	beq.w	80041b6 <_printf_float+0xc2>
 80044ce:	ee18 3a10 	vmov	r3, s16
 80044d2:	4652      	mov	r2, sl
 80044d4:	4631      	mov	r1, r6
 80044d6:	4628      	mov	r0, r5
 80044d8:	47b8      	blx	r7
 80044da:	3001      	adds	r0, #1
 80044dc:	f43f ae6b 	beq.w	80041b6 <_printf_float+0xc2>
 80044e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80044e4:	2200      	movs	r2, #0
 80044e6:	2300      	movs	r3, #0
 80044e8:	f7fc faee 	bl	8000ac8 <__aeabi_dcmpeq>
 80044ec:	b9d8      	cbnz	r0, 8004526 <_printf_float+0x432>
 80044ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044f0:	f108 0201 	add.w	r2, r8, #1
 80044f4:	3b01      	subs	r3, #1
 80044f6:	4631      	mov	r1, r6
 80044f8:	4628      	mov	r0, r5
 80044fa:	47b8      	blx	r7
 80044fc:	3001      	adds	r0, #1
 80044fe:	d10e      	bne.n	800451e <_printf_float+0x42a>
 8004500:	e659      	b.n	80041b6 <_printf_float+0xc2>
 8004502:	2301      	movs	r3, #1
 8004504:	4652      	mov	r2, sl
 8004506:	4631      	mov	r1, r6
 8004508:	4628      	mov	r0, r5
 800450a:	47b8      	blx	r7
 800450c:	3001      	adds	r0, #1
 800450e:	f43f ae52 	beq.w	80041b6 <_printf_float+0xc2>
 8004512:	f108 0801 	add.w	r8, r8, #1
 8004516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004518:	3b01      	subs	r3, #1
 800451a:	4543      	cmp	r3, r8
 800451c:	dcf1      	bgt.n	8004502 <_printf_float+0x40e>
 800451e:	464b      	mov	r3, r9
 8004520:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004524:	e6dc      	b.n	80042e0 <_printf_float+0x1ec>
 8004526:	f04f 0800 	mov.w	r8, #0
 800452a:	f104 0a1a 	add.w	sl, r4, #26
 800452e:	e7f2      	b.n	8004516 <_printf_float+0x422>
 8004530:	2301      	movs	r3, #1
 8004532:	4642      	mov	r2, r8
 8004534:	e7df      	b.n	80044f6 <_printf_float+0x402>
 8004536:	2301      	movs	r3, #1
 8004538:	464a      	mov	r2, r9
 800453a:	4631      	mov	r1, r6
 800453c:	4628      	mov	r0, r5
 800453e:	47b8      	blx	r7
 8004540:	3001      	adds	r0, #1
 8004542:	f43f ae38 	beq.w	80041b6 <_printf_float+0xc2>
 8004546:	f108 0801 	add.w	r8, r8, #1
 800454a:	68e3      	ldr	r3, [r4, #12]
 800454c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800454e:	1a5b      	subs	r3, r3, r1
 8004550:	4543      	cmp	r3, r8
 8004552:	dcf0      	bgt.n	8004536 <_printf_float+0x442>
 8004554:	e6fa      	b.n	800434c <_printf_float+0x258>
 8004556:	f04f 0800 	mov.w	r8, #0
 800455a:	f104 0919 	add.w	r9, r4, #25
 800455e:	e7f4      	b.n	800454a <_printf_float+0x456>

08004560 <_printf_common>:
 8004560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004564:	4616      	mov	r6, r2
 8004566:	4699      	mov	r9, r3
 8004568:	688a      	ldr	r2, [r1, #8]
 800456a:	690b      	ldr	r3, [r1, #16]
 800456c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004570:	4293      	cmp	r3, r2
 8004572:	bfb8      	it	lt
 8004574:	4613      	movlt	r3, r2
 8004576:	6033      	str	r3, [r6, #0]
 8004578:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800457c:	4607      	mov	r7, r0
 800457e:	460c      	mov	r4, r1
 8004580:	b10a      	cbz	r2, 8004586 <_printf_common+0x26>
 8004582:	3301      	adds	r3, #1
 8004584:	6033      	str	r3, [r6, #0]
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	0699      	lsls	r1, r3, #26
 800458a:	bf42      	ittt	mi
 800458c:	6833      	ldrmi	r3, [r6, #0]
 800458e:	3302      	addmi	r3, #2
 8004590:	6033      	strmi	r3, [r6, #0]
 8004592:	6825      	ldr	r5, [r4, #0]
 8004594:	f015 0506 	ands.w	r5, r5, #6
 8004598:	d106      	bne.n	80045a8 <_printf_common+0x48>
 800459a:	f104 0a19 	add.w	sl, r4, #25
 800459e:	68e3      	ldr	r3, [r4, #12]
 80045a0:	6832      	ldr	r2, [r6, #0]
 80045a2:	1a9b      	subs	r3, r3, r2
 80045a4:	42ab      	cmp	r3, r5
 80045a6:	dc26      	bgt.n	80045f6 <_printf_common+0x96>
 80045a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045ac:	1e13      	subs	r3, r2, #0
 80045ae:	6822      	ldr	r2, [r4, #0]
 80045b0:	bf18      	it	ne
 80045b2:	2301      	movne	r3, #1
 80045b4:	0692      	lsls	r2, r2, #26
 80045b6:	d42b      	bmi.n	8004610 <_printf_common+0xb0>
 80045b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045bc:	4649      	mov	r1, r9
 80045be:	4638      	mov	r0, r7
 80045c0:	47c0      	blx	r8
 80045c2:	3001      	adds	r0, #1
 80045c4:	d01e      	beq.n	8004604 <_printf_common+0xa4>
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	68e5      	ldr	r5, [r4, #12]
 80045ca:	6832      	ldr	r2, [r6, #0]
 80045cc:	f003 0306 	and.w	r3, r3, #6
 80045d0:	2b04      	cmp	r3, #4
 80045d2:	bf08      	it	eq
 80045d4:	1aad      	subeq	r5, r5, r2
 80045d6:	68a3      	ldr	r3, [r4, #8]
 80045d8:	6922      	ldr	r2, [r4, #16]
 80045da:	bf0c      	ite	eq
 80045dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045e0:	2500      	movne	r5, #0
 80045e2:	4293      	cmp	r3, r2
 80045e4:	bfc4      	itt	gt
 80045e6:	1a9b      	subgt	r3, r3, r2
 80045e8:	18ed      	addgt	r5, r5, r3
 80045ea:	2600      	movs	r6, #0
 80045ec:	341a      	adds	r4, #26
 80045ee:	42b5      	cmp	r5, r6
 80045f0:	d11a      	bne.n	8004628 <_printf_common+0xc8>
 80045f2:	2000      	movs	r0, #0
 80045f4:	e008      	b.n	8004608 <_printf_common+0xa8>
 80045f6:	2301      	movs	r3, #1
 80045f8:	4652      	mov	r2, sl
 80045fa:	4649      	mov	r1, r9
 80045fc:	4638      	mov	r0, r7
 80045fe:	47c0      	blx	r8
 8004600:	3001      	adds	r0, #1
 8004602:	d103      	bne.n	800460c <_printf_common+0xac>
 8004604:	f04f 30ff 	mov.w	r0, #4294967295
 8004608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800460c:	3501      	adds	r5, #1
 800460e:	e7c6      	b.n	800459e <_printf_common+0x3e>
 8004610:	18e1      	adds	r1, r4, r3
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	2030      	movs	r0, #48	; 0x30
 8004616:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800461a:	4422      	add	r2, r4
 800461c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004620:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004624:	3302      	adds	r3, #2
 8004626:	e7c7      	b.n	80045b8 <_printf_common+0x58>
 8004628:	2301      	movs	r3, #1
 800462a:	4622      	mov	r2, r4
 800462c:	4649      	mov	r1, r9
 800462e:	4638      	mov	r0, r7
 8004630:	47c0      	blx	r8
 8004632:	3001      	adds	r0, #1
 8004634:	d0e6      	beq.n	8004604 <_printf_common+0xa4>
 8004636:	3601      	adds	r6, #1
 8004638:	e7d9      	b.n	80045ee <_printf_common+0x8e>
	...

0800463c <_printf_i>:
 800463c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004640:	7e0f      	ldrb	r7, [r1, #24]
 8004642:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004644:	2f78      	cmp	r7, #120	; 0x78
 8004646:	4691      	mov	r9, r2
 8004648:	4680      	mov	r8, r0
 800464a:	460c      	mov	r4, r1
 800464c:	469a      	mov	sl, r3
 800464e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004652:	d807      	bhi.n	8004664 <_printf_i+0x28>
 8004654:	2f62      	cmp	r7, #98	; 0x62
 8004656:	d80a      	bhi.n	800466e <_printf_i+0x32>
 8004658:	2f00      	cmp	r7, #0
 800465a:	f000 80d8 	beq.w	800480e <_printf_i+0x1d2>
 800465e:	2f58      	cmp	r7, #88	; 0x58
 8004660:	f000 80a3 	beq.w	80047aa <_printf_i+0x16e>
 8004664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004668:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800466c:	e03a      	b.n	80046e4 <_printf_i+0xa8>
 800466e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004672:	2b15      	cmp	r3, #21
 8004674:	d8f6      	bhi.n	8004664 <_printf_i+0x28>
 8004676:	a101      	add	r1, pc, #4	; (adr r1, 800467c <_printf_i+0x40>)
 8004678:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800467c:	080046d5 	.word	0x080046d5
 8004680:	080046e9 	.word	0x080046e9
 8004684:	08004665 	.word	0x08004665
 8004688:	08004665 	.word	0x08004665
 800468c:	08004665 	.word	0x08004665
 8004690:	08004665 	.word	0x08004665
 8004694:	080046e9 	.word	0x080046e9
 8004698:	08004665 	.word	0x08004665
 800469c:	08004665 	.word	0x08004665
 80046a0:	08004665 	.word	0x08004665
 80046a4:	08004665 	.word	0x08004665
 80046a8:	080047f5 	.word	0x080047f5
 80046ac:	08004719 	.word	0x08004719
 80046b0:	080047d7 	.word	0x080047d7
 80046b4:	08004665 	.word	0x08004665
 80046b8:	08004665 	.word	0x08004665
 80046bc:	08004817 	.word	0x08004817
 80046c0:	08004665 	.word	0x08004665
 80046c4:	08004719 	.word	0x08004719
 80046c8:	08004665 	.word	0x08004665
 80046cc:	08004665 	.word	0x08004665
 80046d0:	080047df 	.word	0x080047df
 80046d4:	682b      	ldr	r3, [r5, #0]
 80046d6:	1d1a      	adds	r2, r3, #4
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	602a      	str	r2, [r5, #0]
 80046dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0a3      	b.n	8004830 <_printf_i+0x1f4>
 80046e8:	6820      	ldr	r0, [r4, #0]
 80046ea:	6829      	ldr	r1, [r5, #0]
 80046ec:	0606      	lsls	r6, r0, #24
 80046ee:	f101 0304 	add.w	r3, r1, #4
 80046f2:	d50a      	bpl.n	800470a <_printf_i+0xce>
 80046f4:	680e      	ldr	r6, [r1, #0]
 80046f6:	602b      	str	r3, [r5, #0]
 80046f8:	2e00      	cmp	r6, #0
 80046fa:	da03      	bge.n	8004704 <_printf_i+0xc8>
 80046fc:	232d      	movs	r3, #45	; 0x2d
 80046fe:	4276      	negs	r6, r6
 8004700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004704:	485e      	ldr	r0, [pc, #376]	; (8004880 <_printf_i+0x244>)
 8004706:	230a      	movs	r3, #10
 8004708:	e019      	b.n	800473e <_printf_i+0x102>
 800470a:	680e      	ldr	r6, [r1, #0]
 800470c:	602b      	str	r3, [r5, #0]
 800470e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004712:	bf18      	it	ne
 8004714:	b236      	sxthne	r6, r6
 8004716:	e7ef      	b.n	80046f8 <_printf_i+0xbc>
 8004718:	682b      	ldr	r3, [r5, #0]
 800471a:	6820      	ldr	r0, [r4, #0]
 800471c:	1d19      	adds	r1, r3, #4
 800471e:	6029      	str	r1, [r5, #0]
 8004720:	0601      	lsls	r1, r0, #24
 8004722:	d501      	bpl.n	8004728 <_printf_i+0xec>
 8004724:	681e      	ldr	r6, [r3, #0]
 8004726:	e002      	b.n	800472e <_printf_i+0xf2>
 8004728:	0646      	lsls	r6, r0, #25
 800472a:	d5fb      	bpl.n	8004724 <_printf_i+0xe8>
 800472c:	881e      	ldrh	r6, [r3, #0]
 800472e:	4854      	ldr	r0, [pc, #336]	; (8004880 <_printf_i+0x244>)
 8004730:	2f6f      	cmp	r7, #111	; 0x6f
 8004732:	bf0c      	ite	eq
 8004734:	2308      	moveq	r3, #8
 8004736:	230a      	movne	r3, #10
 8004738:	2100      	movs	r1, #0
 800473a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800473e:	6865      	ldr	r5, [r4, #4]
 8004740:	60a5      	str	r5, [r4, #8]
 8004742:	2d00      	cmp	r5, #0
 8004744:	bfa2      	ittt	ge
 8004746:	6821      	ldrge	r1, [r4, #0]
 8004748:	f021 0104 	bicge.w	r1, r1, #4
 800474c:	6021      	strge	r1, [r4, #0]
 800474e:	b90e      	cbnz	r6, 8004754 <_printf_i+0x118>
 8004750:	2d00      	cmp	r5, #0
 8004752:	d04d      	beq.n	80047f0 <_printf_i+0x1b4>
 8004754:	4615      	mov	r5, r2
 8004756:	fbb6 f1f3 	udiv	r1, r6, r3
 800475a:	fb03 6711 	mls	r7, r3, r1, r6
 800475e:	5dc7      	ldrb	r7, [r0, r7]
 8004760:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004764:	4637      	mov	r7, r6
 8004766:	42bb      	cmp	r3, r7
 8004768:	460e      	mov	r6, r1
 800476a:	d9f4      	bls.n	8004756 <_printf_i+0x11a>
 800476c:	2b08      	cmp	r3, #8
 800476e:	d10b      	bne.n	8004788 <_printf_i+0x14c>
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	07de      	lsls	r6, r3, #31
 8004774:	d508      	bpl.n	8004788 <_printf_i+0x14c>
 8004776:	6923      	ldr	r3, [r4, #16]
 8004778:	6861      	ldr	r1, [r4, #4]
 800477a:	4299      	cmp	r1, r3
 800477c:	bfde      	ittt	le
 800477e:	2330      	movle	r3, #48	; 0x30
 8004780:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004784:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004788:	1b52      	subs	r2, r2, r5
 800478a:	6122      	str	r2, [r4, #16]
 800478c:	f8cd a000 	str.w	sl, [sp]
 8004790:	464b      	mov	r3, r9
 8004792:	aa03      	add	r2, sp, #12
 8004794:	4621      	mov	r1, r4
 8004796:	4640      	mov	r0, r8
 8004798:	f7ff fee2 	bl	8004560 <_printf_common>
 800479c:	3001      	adds	r0, #1
 800479e:	d14c      	bne.n	800483a <_printf_i+0x1fe>
 80047a0:	f04f 30ff 	mov.w	r0, #4294967295
 80047a4:	b004      	add	sp, #16
 80047a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047aa:	4835      	ldr	r0, [pc, #212]	; (8004880 <_printf_i+0x244>)
 80047ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80047b0:	6829      	ldr	r1, [r5, #0]
 80047b2:	6823      	ldr	r3, [r4, #0]
 80047b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80047b8:	6029      	str	r1, [r5, #0]
 80047ba:	061d      	lsls	r5, r3, #24
 80047bc:	d514      	bpl.n	80047e8 <_printf_i+0x1ac>
 80047be:	07df      	lsls	r7, r3, #31
 80047c0:	bf44      	itt	mi
 80047c2:	f043 0320 	orrmi.w	r3, r3, #32
 80047c6:	6023      	strmi	r3, [r4, #0]
 80047c8:	b91e      	cbnz	r6, 80047d2 <_printf_i+0x196>
 80047ca:	6823      	ldr	r3, [r4, #0]
 80047cc:	f023 0320 	bic.w	r3, r3, #32
 80047d0:	6023      	str	r3, [r4, #0]
 80047d2:	2310      	movs	r3, #16
 80047d4:	e7b0      	b.n	8004738 <_printf_i+0xfc>
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	f043 0320 	orr.w	r3, r3, #32
 80047dc:	6023      	str	r3, [r4, #0]
 80047de:	2378      	movs	r3, #120	; 0x78
 80047e0:	4828      	ldr	r0, [pc, #160]	; (8004884 <_printf_i+0x248>)
 80047e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047e6:	e7e3      	b.n	80047b0 <_printf_i+0x174>
 80047e8:	0659      	lsls	r1, r3, #25
 80047ea:	bf48      	it	mi
 80047ec:	b2b6      	uxthmi	r6, r6
 80047ee:	e7e6      	b.n	80047be <_printf_i+0x182>
 80047f0:	4615      	mov	r5, r2
 80047f2:	e7bb      	b.n	800476c <_printf_i+0x130>
 80047f4:	682b      	ldr	r3, [r5, #0]
 80047f6:	6826      	ldr	r6, [r4, #0]
 80047f8:	6961      	ldr	r1, [r4, #20]
 80047fa:	1d18      	adds	r0, r3, #4
 80047fc:	6028      	str	r0, [r5, #0]
 80047fe:	0635      	lsls	r5, r6, #24
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	d501      	bpl.n	8004808 <_printf_i+0x1cc>
 8004804:	6019      	str	r1, [r3, #0]
 8004806:	e002      	b.n	800480e <_printf_i+0x1d2>
 8004808:	0670      	lsls	r0, r6, #25
 800480a:	d5fb      	bpl.n	8004804 <_printf_i+0x1c8>
 800480c:	8019      	strh	r1, [r3, #0]
 800480e:	2300      	movs	r3, #0
 8004810:	6123      	str	r3, [r4, #16]
 8004812:	4615      	mov	r5, r2
 8004814:	e7ba      	b.n	800478c <_printf_i+0x150>
 8004816:	682b      	ldr	r3, [r5, #0]
 8004818:	1d1a      	adds	r2, r3, #4
 800481a:	602a      	str	r2, [r5, #0]
 800481c:	681d      	ldr	r5, [r3, #0]
 800481e:	6862      	ldr	r2, [r4, #4]
 8004820:	2100      	movs	r1, #0
 8004822:	4628      	mov	r0, r5
 8004824:	f7fb fcdc 	bl	80001e0 <memchr>
 8004828:	b108      	cbz	r0, 800482e <_printf_i+0x1f2>
 800482a:	1b40      	subs	r0, r0, r5
 800482c:	6060      	str	r0, [r4, #4]
 800482e:	6863      	ldr	r3, [r4, #4]
 8004830:	6123      	str	r3, [r4, #16]
 8004832:	2300      	movs	r3, #0
 8004834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004838:	e7a8      	b.n	800478c <_printf_i+0x150>
 800483a:	6923      	ldr	r3, [r4, #16]
 800483c:	462a      	mov	r2, r5
 800483e:	4649      	mov	r1, r9
 8004840:	4640      	mov	r0, r8
 8004842:	47d0      	blx	sl
 8004844:	3001      	adds	r0, #1
 8004846:	d0ab      	beq.n	80047a0 <_printf_i+0x164>
 8004848:	6823      	ldr	r3, [r4, #0]
 800484a:	079b      	lsls	r3, r3, #30
 800484c:	d413      	bmi.n	8004876 <_printf_i+0x23a>
 800484e:	68e0      	ldr	r0, [r4, #12]
 8004850:	9b03      	ldr	r3, [sp, #12]
 8004852:	4298      	cmp	r0, r3
 8004854:	bfb8      	it	lt
 8004856:	4618      	movlt	r0, r3
 8004858:	e7a4      	b.n	80047a4 <_printf_i+0x168>
 800485a:	2301      	movs	r3, #1
 800485c:	4632      	mov	r2, r6
 800485e:	4649      	mov	r1, r9
 8004860:	4640      	mov	r0, r8
 8004862:	47d0      	blx	sl
 8004864:	3001      	adds	r0, #1
 8004866:	d09b      	beq.n	80047a0 <_printf_i+0x164>
 8004868:	3501      	adds	r5, #1
 800486a:	68e3      	ldr	r3, [r4, #12]
 800486c:	9903      	ldr	r1, [sp, #12]
 800486e:	1a5b      	subs	r3, r3, r1
 8004870:	42ab      	cmp	r3, r5
 8004872:	dcf2      	bgt.n	800485a <_printf_i+0x21e>
 8004874:	e7eb      	b.n	800484e <_printf_i+0x212>
 8004876:	2500      	movs	r5, #0
 8004878:	f104 0619 	add.w	r6, r4, #25
 800487c:	e7f5      	b.n	800486a <_printf_i+0x22e>
 800487e:	bf00      	nop
 8004880:	08006dde 	.word	0x08006dde
 8004884:	08006def 	.word	0x08006def

08004888 <siprintf>:
 8004888:	b40e      	push	{r1, r2, r3}
 800488a:	b500      	push	{lr}
 800488c:	b09c      	sub	sp, #112	; 0x70
 800488e:	ab1d      	add	r3, sp, #116	; 0x74
 8004890:	9002      	str	r0, [sp, #8]
 8004892:	9006      	str	r0, [sp, #24]
 8004894:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004898:	4809      	ldr	r0, [pc, #36]	; (80048c0 <siprintf+0x38>)
 800489a:	9107      	str	r1, [sp, #28]
 800489c:	9104      	str	r1, [sp, #16]
 800489e:	4909      	ldr	r1, [pc, #36]	; (80048c4 <siprintf+0x3c>)
 80048a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80048a4:	9105      	str	r1, [sp, #20]
 80048a6:	6800      	ldr	r0, [r0, #0]
 80048a8:	9301      	str	r3, [sp, #4]
 80048aa:	a902      	add	r1, sp, #8
 80048ac:	f001 fb76 	bl	8005f9c <_svfiprintf_r>
 80048b0:	9b02      	ldr	r3, [sp, #8]
 80048b2:	2200      	movs	r2, #0
 80048b4:	701a      	strb	r2, [r3, #0]
 80048b6:	b01c      	add	sp, #112	; 0x70
 80048b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80048bc:	b003      	add	sp, #12
 80048be:	4770      	bx	lr
 80048c0:	2000000c 	.word	0x2000000c
 80048c4:	ffff0208 	.word	0xffff0208

080048c8 <quorem>:
 80048c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048cc:	6903      	ldr	r3, [r0, #16]
 80048ce:	690c      	ldr	r4, [r1, #16]
 80048d0:	42a3      	cmp	r3, r4
 80048d2:	4607      	mov	r7, r0
 80048d4:	f2c0 8081 	blt.w	80049da <quorem+0x112>
 80048d8:	3c01      	subs	r4, #1
 80048da:	f101 0814 	add.w	r8, r1, #20
 80048de:	f100 0514 	add.w	r5, r0, #20
 80048e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80048e6:	9301      	str	r3, [sp, #4]
 80048e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80048ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80048f0:	3301      	adds	r3, #1
 80048f2:	429a      	cmp	r2, r3
 80048f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80048f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80048fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8004900:	d331      	bcc.n	8004966 <quorem+0x9e>
 8004902:	f04f 0e00 	mov.w	lr, #0
 8004906:	4640      	mov	r0, r8
 8004908:	46ac      	mov	ip, r5
 800490a:	46f2      	mov	sl, lr
 800490c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004910:	b293      	uxth	r3, r2
 8004912:	fb06 e303 	mla	r3, r6, r3, lr
 8004916:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800491a:	b29b      	uxth	r3, r3
 800491c:	ebaa 0303 	sub.w	r3, sl, r3
 8004920:	f8dc a000 	ldr.w	sl, [ip]
 8004924:	0c12      	lsrs	r2, r2, #16
 8004926:	fa13 f38a 	uxtah	r3, r3, sl
 800492a:	fb06 e202 	mla	r2, r6, r2, lr
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	9b00      	ldr	r3, [sp, #0]
 8004932:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004936:	b292      	uxth	r2, r2
 8004938:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800493c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004940:	f8bd 3000 	ldrh.w	r3, [sp]
 8004944:	4581      	cmp	r9, r0
 8004946:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800494a:	f84c 3b04 	str.w	r3, [ip], #4
 800494e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004952:	d2db      	bcs.n	800490c <quorem+0x44>
 8004954:	f855 300b 	ldr.w	r3, [r5, fp]
 8004958:	b92b      	cbnz	r3, 8004966 <quorem+0x9e>
 800495a:	9b01      	ldr	r3, [sp, #4]
 800495c:	3b04      	subs	r3, #4
 800495e:	429d      	cmp	r5, r3
 8004960:	461a      	mov	r2, r3
 8004962:	d32e      	bcc.n	80049c2 <quorem+0xfa>
 8004964:	613c      	str	r4, [r7, #16]
 8004966:	4638      	mov	r0, r7
 8004968:	f001 f8c4 	bl	8005af4 <__mcmp>
 800496c:	2800      	cmp	r0, #0
 800496e:	db24      	blt.n	80049ba <quorem+0xf2>
 8004970:	3601      	adds	r6, #1
 8004972:	4628      	mov	r0, r5
 8004974:	f04f 0c00 	mov.w	ip, #0
 8004978:	f858 2b04 	ldr.w	r2, [r8], #4
 800497c:	f8d0 e000 	ldr.w	lr, [r0]
 8004980:	b293      	uxth	r3, r2
 8004982:	ebac 0303 	sub.w	r3, ip, r3
 8004986:	0c12      	lsrs	r2, r2, #16
 8004988:	fa13 f38e 	uxtah	r3, r3, lr
 800498c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004990:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004994:	b29b      	uxth	r3, r3
 8004996:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800499a:	45c1      	cmp	r9, r8
 800499c:	f840 3b04 	str.w	r3, [r0], #4
 80049a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80049a4:	d2e8      	bcs.n	8004978 <quorem+0xb0>
 80049a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049ae:	b922      	cbnz	r2, 80049ba <quorem+0xf2>
 80049b0:	3b04      	subs	r3, #4
 80049b2:	429d      	cmp	r5, r3
 80049b4:	461a      	mov	r2, r3
 80049b6:	d30a      	bcc.n	80049ce <quorem+0x106>
 80049b8:	613c      	str	r4, [r7, #16]
 80049ba:	4630      	mov	r0, r6
 80049bc:	b003      	add	sp, #12
 80049be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049c2:	6812      	ldr	r2, [r2, #0]
 80049c4:	3b04      	subs	r3, #4
 80049c6:	2a00      	cmp	r2, #0
 80049c8:	d1cc      	bne.n	8004964 <quorem+0x9c>
 80049ca:	3c01      	subs	r4, #1
 80049cc:	e7c7      	b.n	800495e <quorem+0x96>
 80049ce:	6812      	ldr	r2, [r2, #0]
 80049d0:	3b04      	subs	r3, #4
 80049d2:	2a00      	cmp	r2, #0
 80049d4:	d1f0      	bne.n	80049b8 <quorem+0xf0>
 80049d6:	3c01      	subs	r4, #1
 80049d8:	e7eb      	b.n	80049b2 <quorem+0xea>
 80049da:	2000      	movs	r0, #0
 80049dc:	e7ee      	b.n	80049bc <quorem+0xf4>
	...

080049e0 <_dtoa_r>:
 80049e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049e4:	ed2d 8b04 	vpush	{d8-d9}
 80049e8:	ec57 6b10 	vmov	r6, r7, d0
 80049ec:	b093      	sub	sp, #76	; 0x4c
 80049ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80049f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80049f4:	9106      	str	r1, [sp, #24]
 80049f6:	ee10 aa10 	vmov	sl, s0
 80049fa:	4604      	mov	r4, r0
 80049fc:	9209      	str	r2, [sp, #36]	; 0x24
 80049fe:	930c      	str	r3, [sp, #48]	; 0x30
 8004a00:	46bb      	mov	fp, r7
 8004a02:	b975      	cbnz	r5, 8004a22 <_dtoa_r+0x42>
 8004a04:	2010      	movs	r0, #16
 8004a06:	f000 fddd 	bl	80055c4 <malloc>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	6260      	str	r0, [r4, #36]	; 0x24
 8004a0e:	b920      	cbnz	r0, 8004a1a <_dtoa_r+0x3a>
 8004a10:	4ba7      	ldr	r3, [pc, #668]	; (8004cb0 <_dtoa_r+0x2d0>)
 8004a12:	21ea      	movs	r1, #234	; 0xea
 8004a14:	48a7      	ldr	r0, [pc, #668]	; (8004cb4 <_dtoa_r+0x2d4>)
 8004a16:	f001 fbd1 	bl	80061bc <__assert_func>
 8004a1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004a1e:	6005      	str	r5, [r0, #0]
 8004a20:	60c5      	str	r5, [r0, #12]
 8004a22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a24:	6819      	ldr	r1, [r3, #0]
 8004a26:	b151      	cbz	r1, 8004a3e <_dtoa_r+0x5e>
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	604a      	str	r2, [r1, #4]
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	4093      	lsls	r3, r2
 8004a30:	608b      	str	r3, [r1, #8]
 8004a32:	4620      	mov	r0, r4
 8004a34:	f000 fe1c 	bl	8005670 <_Bfree>
 8004a38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	1e3b      	subs	r3, r7, #0
 8004a40:	bfaa      	itet	ge
 8004a42:	2300      	movge	r3, #0
 8004a44:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004a48:	f8c8 3000 	strge.w	r3, [r8]
 8004a4c:	4b9a      	ldr	r3, [pc, #616]	; (8004cb8 <_dtoa_r+0x2d8>)
 8004a4e:	bfbc      	itt	lt
 8004a50:	2201      	movlt	r2, #1
 8004a52:	f8c8 2000 	strlt.w	r2, [r8]
 8004a56:	ea33 030b 	bics.w	r3, r3, fp
 8004a5a:	d11b      	bne.n	8004a94 <_dtoa_r+0xb4>
 8004a5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a5e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004a68:	4333      	orrs	r3, r6
 8004a6a:	f000 8592 	beq.w	8005592 <_dtoa_r+0xbb2>
 8004a6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a70:	b963      	cbnz	r3, 8004a8c <_dtoa_r+0xac>
 8004a72:	4b92      	ldr	r3, [pc, #584]	; (8004cbc <_dtoa_r+0x2dc>)
 8004a74:	e022      	b.n	8004abc <_dtoa_r+0xdc>
 8004a76:	4b92      	ldr	r3, [pc, #584]	; (8004cc0 <_dtoa_r+0x2e0>)
 8004a78:	9301      	str	r3, [sp, #4]
 8004a7a:	3308      	adds	r3, #8
 8004a7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	9801      	ldr	r0, [sp, #4]
 8004a82:	b013      	add	sp, #76	; 0x4c
 8004a84:	ecbd 8b04 	vpop	{d8-d9}
 8004a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a8c:	4b8b      	ldr	r3, [pc, #556]	; (8004cbc <_dtoa_r+0x2dc>)
 8004a8e:	9301      	str	r3, [sp, #4]
 8004a90:	3303      	adds	r3, #3
 8004a92:	e7f3      	b.n	8004a7c <_dtoa_r+0x9c>
 8004a94:	2200      	movs	r2, #0
 8004a96:	2300      	movs	r3, #0
 8004a98:	4650      	mov	r0, sl
 8004a9a:	4659      	mov	r1, fp
 8004a9c:	f7fc f814 	bl	8000ac8 <__aeabi_dcmpeq>
 8004aa0:	ec4b ab19 	vmov	d9, sl, fp
 8004aa4:	4680      	mov	r8, r0
 8004aa6:	b158      	cbz	r0, 8004ac0 <_dtoa_r+0xe0>
 8004aa8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004aaa:	2301      	movs	r3, #1
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 856b 	beq.w	800558c <_dtoa_r+0xbac>
 8004ab6:	4883      	ldr	r0, [pc, #524]	; (8004cc4 <_dtoa_r+0x2e4>)
 8004ab8:	6018      	str	r0, [r3, #0]
 8004aba:	1e43      	subs	r3, r0, #1
 8004abc:	9301      	str	r3, [sp, #4]
 8004abe:	e7df      	b.n	8004a80 <_dtoa_r+0xa0>
 8004ac0:	ec4b ab10 	vmov	d0, sl, fp
 8004ac4:	aa10      	add	r2, sp, #64	; 0x40
 8004ac6:	a911      	add	r1, sp, #68	; 0x44
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f001 f8b9 	bl	8005c40 <__d2b>
 8004ace:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004ad2:	ee08 0a10 	vmov	s16, r0
 8004ad6:	2d00      	cmp	r5, #0
 8004ad8:	f000 8084 	beq.w	8004be4 <_dtoa_r+0x204>
 8004adc:	ee19 3a90 	vmov	r3, s19
 8004ae0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ae4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004ae8:	4656      	mov	r6, sl
 8004aea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004aee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004af2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004af6:	4b74      	ldr	r3, [pc, #464]	; (8004cc8 <_dtoa_r+0x2e8>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	4630      	mov	r0, r6
 8004afc:	4639      	mov	r1, r7
 8004afe:	f7fb fbc3 	bl	8000288 <__aeabi_dsub>
 8004b02:	a365      	add	r3, pc, #404	; (adr r3, 8004c98 <_dtoa_r+0x2b8>)
 8004b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b08:	f7fb fd76 	bl	80005f8 <__aeabi_dmul>
 8004b0c:	a364      	add	r3, pc, #400	; (adr r3, 8004ca0 <_dtoa_r+0x2c0>)
 8004b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b12:	f7fb fbbb 	bl	800028c <__adddf3>
 8004b16:	4606      	mov	r6, r0
 8004b18:	4628      	mov	r0, r5
 8004b1a:	460f      	mov	r7, r1
 8004b1c:	f7fb fd02 	bl	8000524 <__aeabi_i2d>
 8004b20:	a361      	add	r3, pc, #388	; (adr r3, 8004ca8 <_dtoa_r+0x2c8>)
 8004b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b26:	f7fb fd67 	bl	80005f8 <__aeabi_dmul>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4630      	mov	r0, r6
 8004b30:	4639      	mov	r1, r7
 8004b32:	f7fb fbab 	bl	800028c <__adddf3>
 8004b36:	4606      	mov	r6, r0
 8004b38:	460f      	mov	r7, r1
 8004b3a:	f7fc f80d 	bl	8000b58 <__aeabi_d2iz>
 8004b3e:	2200      	movs	r2, #0
 8004b40:	9000      	str	r0, [sp, #0]
 8004b42:	2300      	movs	r3, #0
 8004b44:	4630      	mov	r0, r6
 8004b46:	4639      	mov	r1, r7
 8004b48:	f7fb ffc8 	bl	8000adc <__aeabi_dcmplt>
 8004b4c:	b150      	cbz	r0, 8004b64 <_dtoa_r+0x184>
 8004b4e:	9800      	ldr	r0, [sp, #0]
 8004b50:	f7fb fce8 	bl	8000524 <__aeabi_i2d>
 8004b54:	4632      	mov	r2, r6
 8004b56:	463b      	mov	r3, r7
 8004b58:	f7fb ffb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b5c:	b910      	cbnz	r0, 8004b64 <_dtoa_r+0x184>
 8004b5e:	9b00      	ldr	r3, [sp, #0]
 8004b60:	3b01      	subs	r3, #1
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	9b00      	ldr	r3, [sp, #0]
 8004b66:	2b16      	cmp	r3, #22
 8004b68:	d85a      	bhi.n	8004c20 <_dtoa_r+0x240>
 8004b6a:	9a00      	ldr	r2, [sp, #0]
 8004b6c:	4b57      	ldr	r3, [pc, #348]	; (8004ccc <_dtoa_r+0x2ec>)
 8004b6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b76:	ec51 0b19 	vmov	r0, r1, d9
 8004b7a:	f7fb ffaf 	bl	8000adc <__aeabi_dcmplt>
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	d050      	beq.n	8004c24 <_dtoa_r+0x244>
 8004b82:	9b00      	ldr	r3, [sp, #0]
 8004b84:	3b01      	subs	r3, #1
 8004b86:	9300      	str	r3, [sp, #0]
 8004b88:	2300      	movs	r3, #0
 8004b8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004b8e:	1b5d      	subs	r5, r3, r5
 8004b90:	1e6b      	subs	r3, r5, #1
 8004b92:	9305      	str	r3, [sp, #20]
 8004b94:	bf45      	ittet	mi
 8004b96:	f1c5 0301 	rsbmi	r3, r5, #1
 8004b9a:	9304      	strmi	r3, [sp, #16]
 8004b9c:	2300      	movpl	r3, #0
 8004b9e:	2300      	movmi	r3, #0
 8004ba0:	bf4c      	ite	mi
 8004ba2:	9305      	strmi	r3, [sp, #20]
 8004ba4:	9304      	strpl	r3, [sp, #16]
 8004ba6:	9b00      	ldr	r3, [sp, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	db3d      	blt.n	8004c28 <_dtoa_r+0x248>
 8004bac:	9b05      	ldr	r3, [sp, #20]
 8004bae:	9a00      	ldr	r2, [sp, #0]
 8004bb0:	920a      	str	r2, [sp, #40]	; 0x28
 8004bb2:	4413      	add	r3, r2
 8004bb4:	9305      	str	r3, [sp, #20]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	9307      	str	r3, [sp, #28]
 8004bba:	9b06      	ldr	r3, [sp, #24]
 8004bbc:	2b09      	cmp	r3, #9
 8004bbe:	f200 8089 	bhi.w	8004cd4 <_dtoa_r+0x2f4>
 8004bc2:	2b05      	cmp	r3, #5
 8004bc4:	bfc4      	itt	gt
 8004bc6:	3b04      	subgt	r3, #4
 8004bc8:	9306      	strgt	r3, [sp, #24]
 8004bca:	9b06      	ldr	r3, [sp, #24]
 8004bcc:	f1a3 0302 	sub.w	r3, r3, #2
 8004bd0:	bfcc      	ite	gt
 8004bd2:	2500      	movgt	r5, #0
 8004bd4:	2501      	movle	r5, #1
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	f200 8087 	bhi.w	8004cea <_dtoa_r+0x30a>
 8004bdc:	e8df f003 	tbb	[pc, r3]
 8004be0:	59383a2d 	.word	0x59383a2d
 8004be4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004be8:	441d      	add	r5, r3
 8004bea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004bee:	2b20      	cmp	r3, #32
 8004bf0:	bfc1      	itttt	gt
 8004bf2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004bf6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004bfa:	fa0b f303 	lslgt.w	r3, fp, r3
 8004bfe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004c02:	bfda      	itte	le
 8004c04:	f1c3 0320 	rsble	r3, r3, #32
 8004c08:	fa06 f003 	lslle.w	r0, r6, r3
 8004c0c:	4318      	orrgt	r0, r3
 8004c0e:	f7fb fc79 	bl	8000504 <__aeabi_ui2d>
 8004c12:	2301      	movs	r3, #1
 8004c14:	4606      	mov	r6, r0
 8004c16:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004c1a:	3d01      	subs	r5, #1
 8004c1c:	930e      	str	r3, [sp, #56]	; 0x38
 8004c1e:	e76a      	b.n	8004af6 <_dtoa_r+0x116>
 8004c20:	2301      	movs	r3, #1
 8004c22:	e7b2      	b.n	8004b8a <_dtoa_r+0x1aa>
 8004c24:	900b      	str	r0, [sp, #44]	; 0x2c
 8004c26:	e7b1      	b.n	8004b8c <_dtoa_r+0x1ac>
 8004c28:	9b04      	ldr	r3, [sp, #16]
 8004c2a:	9a00      	ldr	r2, [sp, #0]
 8004c2c:	1a9b      	subs	r3, r3, r2
 8004c2e:	9304      	str	r3, [sp, #16]
 8004c30:	4253      	negs	r3, r2
 8004c32:	9307      	str	r3, [sp, #28]
 8004c34:	2300      	movs	r3, #0
 8004c36:	930a      	str	r3, [sp, #40]	; 0x28
 8004c38:	e7bf      	b.n	8004bba <_dtoa_r+0x1da>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	9308      	str	r3, [sp, #32]
 8004c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	dc55      	bgt.n	8004cf0 <_dtoa_r+0x310>
 8004c44:	2301      	movs	r3, #1
 8004c46:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	9209      	str	r2, [sp, #36]	; 0x24
 8004c4e:	e00c      	b.n	8004c6a <_dtoa_r+0x28a>
 8004c50:	2301      	movs	r3, #1
 8004c52:	e7f3      	b.n	8004c3c <_dtoa_r+0x25c>
 8004c54:	2300      	movs	r3, #0
 8004c56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c58:	9308      	str	r3, [sp, #32]
 8004c5a:	9b00      	ldr	r3, [sp, #0]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	9302      	str	r3, [sp, #8]
 8004c60:	3301      	adds	r3, #1
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	9303      	str	r3, [sp, #12]
 8004c66:	bfb8      	it	lt
 8004c68:	2301      	movlt	r3, #1
 8004c6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	6042      	str	r2, [r0, #4]
 8004c70:	2204      	movs	r2, #4
 8004c72:	f102 0614 	add.w	r6, r2, #20
 8004c76:	429e      	cmp	r6, r3
 8004c78:	6841      	ldr	r1, [r0, #4]
 8004c7a:	d93d      	bls.n	8004cf8 <_dtoa_r+0x318>
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	f000 fcb7 	bl	80055f0 <_Balloc>
 8004c82:	9001      	str	r0, [sp, #4]
 8004c84:	2800      	cmp	r0, #0
 8004c86:	d13b      	bne.n	8004d00 <_dtoa_r+0x320>
 8004c88:	4b11      	ldr	r3, [pc, #68]	; (8004cd0 <_dtoa_r+0x2f0>)
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004c90:	e6c0      	b.n	8004a14 <_dtoa_r+0x34>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e7df      	b.n	8004c56 <_dtoa_r+0x276>
 8004c96:	bf00      	nop
 8004c98:	636f4361 	.word	0x636f4361
 8004c9c:	3fd287a7 	.word	0x3fd287a7
 8004ca0:	8b60c8b3 	.word	0x8b60c8b3
 8004ca4:	3fc68a28 	.word	0x3fc68a28
 8004ca8:	509f79fb 	.word	0x509f79fb
 8004cac:	3fd34413 	.word	0x3fd34413
 8004cb0:	08006e0d 	.word	0x08006e0d
 8004cb4:	08006e24 	.word	0x08006e24
 8004cb8:	7ff00000 	.word	0x7ff00000
 8004cbc:	08006e09 	.word	0x08006e09
 8004cc0:	08006e00 	.word	0x08006e00
 8004cc4:	08006ddd 	.word	0x08006ddd
 8004cc8:	3ff80000 	.word	0x3ff80000
 8004ccc:	08006f18 	.word	0x08006f18
 8004cd0:	08006e7f 	.word	0x08006e7f
 8004cd4:	2501      	movs	r5, #1
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	9306      	str	r3, [sp, #24]
 8004cda:	9508      	str	r5, [sp, #32]
 8004cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2312      	movs	r3, #18
 8004ce8:	e7b0      	b.n	8004c4c <_dtoa_r+0x26c>
 8004cea:	2301      	movs	r3, #1
 8004cec:	9308      	str	r3, [sp, #32]
 8004cee:	e7f5      	b.n	8004cdc <_dtoa_r+0x2fc>
 8004cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cf2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004cf6:	e7b8      	b.n	8004c6a <_dtoa_r+0x28a>
 8004cf8:	3101      	adds	r1, #1
 8004cfa:	6041      	str	r1, [r0, #4]
 8004cfc:	0052      	lsls	r2, r2, #1
 8004cfe:	e7b8      	b.n	8004c72 <_dtoa_r+0x292>
 8004d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d02:	9a01      	ldr	r2, [sp, #4]
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	9b03      	ldr	r3, [sp, #12]
 8004d08:	2b0e      	cmp	r3, #14
 8004d0a:	f200 809d 	bhi.w	8004e48 <_dtoa_r+0x468>
 8004d0e:	2d00      	cmp	r5, #0
 8004d10:	f000 809a 	beq.w	8004e48 <_dtoa_r+0x468>
 8004d14:	9b00      	ldr	r3, [sp, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	dd32      	ble.n	8004d80 <_dtoa_r+0x3a0>
 8004d1a:	4ab7      	ldr	r2, [pc, #732]	; (8004ff8 <_dtoa_r+0x618>)
 8004d1c:	f003 030f 	and.w	r3, r3, #15
 8004d20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004d24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d28:	9b00      	ldr	r3, [sp, #0]
 8004d2a:	05d8      	lsls	r0, r3, #23
 8004d2c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004d30:	d516      	bpl.n	8004d60 <_dtoa_r+0x380>
 8004d32:	4bb2      	ldr	r3, [pc, #712]	; (8004ffc <_dtoa_r+0x61c>)
 8004d34:	ec51 0b19 	vmov	r0, r1, d9
 8004d38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004d3c:	f7fb fd86 	bl	800084c <__aeabi_ddiv>
 8004d40:	f007 070f 	and.w	r7, r7, #15
 8004d44:	4682      	mov	sl, r0
 8004d46:	468b      	mov	fp, r1
 8004d48:	2503      	movs	r5, #3
 8004d4a:	4eac      	ldr	r6, [pc, #688]	; (8004ffc <_dtoa_r+0x61c>)
 8004d4c:	b957      	cbnz	r7, 8004d64 <_dtoa_r+0x384>
 8004d4e:	4642      	mov	r2, r8
 8004d50:	464b      	mov	r3, r9
 8004d52:	4650      	mov	r0, sl
 8004d54:	4659      	mov	r1, fp
 8004d56:	f7fb fd79 	bl	800084c <__aeabi_ddiv>
 8004d5a:	4682      	mov	sl, r0
 8004d5c:	468b      	mov	fp, r1
 8004d5e:	e028      	b.n	8004db2 <_dtoa_r+0x3d2>
 8004d60:	2502      	movs	r5, #2
 8004d62:	e7f2      	b.n	8004d4a <_dtoa_r+0x36a>
 8004d64:	07f9      	lsls	r1, r7, #31
 8004d66:	d508      	bpl.n	8004d7a <_dtoa_r+0x39a>
 8004d68:	4640      	mov	r0, r8
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004d70:	f7fb fc42 	bl	80005f8 <__aeabi_dmul>
 8004d74:	3501      	adds	r5, #1
 8004d76:	4680      	mov	r8, r0
 8004d78:	4689      	mov	r9, r1
 8004d7a:	107f      	asrs	r7, r7, #1
 8004d7c:	3608      	adds	r6, #8
 8004d7e:	e7e5      	b.n	8004d4c <_dtoa_r+0x36c>
 8004d80:	f000 809b 	beq.w	8004eba <_dtoa_r+0x4da>
 8004d84:	9b00      	ldr	r3, [sp, #0]
 8004d86:	4f9d      	ldr	r7, [pc, #628]	; (8004ffc <_dtoa_r+0x61c>)
 8004d88:	425e      	negs	r6, r3
 8004d8a:	4b9b      	ldr	r3, [pc, #620]	; (8004ff8 <_dtoa_r+0x618>)
 8004d8c:	f006 020f 	and.w	r2, r6, #15
 8004d90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d98:	ec51 0b19 	vmov	r0, r1, d9
 8004d9c:	f7fb fc2c 	bl	80005f8 <__aeabi_dmul>
 8004da0:	1136      	asrs	r6, r6, #4
 8004da2:	4682      	mov	sl, r0
 8004da4:	468b      	mov	fp, r1
 8004da6:	2300      	movs	r3, #0
 8004da8:	2502      	movs	r5, #2
 8004daa:	2e00      	cmp	r6, #0
 8004dac:	d17a      	bne.n	8004ea4 <_dtoa_r+0x4c4>
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1d3      	bne.n	8004d5a <_dtoa_r+0x37a>
 8004db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 8082 	beq.w	8004ebe <_dtoa_r+0x4de>
 8004dba:	4b91      	ldr	r3, [pc, #580]	; (8005000 <_dtoa_r+0x620>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	4650      	mov	r0, sl
 8004dc0:	4659      	mov	r1, fp
 8004dc2:	f7fb fe8b 	bl	8000adc <__aeabi_dcmplt>
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	d079      	beq.n	8004ebe <_dtoa_r+0x4de>
 8004dca:	9b03      	ldr	r3, [sp, #12]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d076      	beq.n	8004ebe <_dtoa_r+0x4de>
 8004dd0:	9b02      	ldr	r3, [sp, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	dd36      	ble.n	8004e44 <_dtoa_r+0x464>
 8004dd6:	9b00      	ldr	r3, [sp, #0]
 8004dd8:	4650      	mov	r0, sl
 8004dda:	4659      	mov	r1, fp
 8004ddc:	1e5f      	subs	r7, r3, #1
 8004dde:	2200      	movs	r2, #0
 8004de0:	4b88      	ldr	r3, [pc, #544]	; (8005004 <_dtoa_r+0x624>)
 8004de2:	f7fb fc09 	bl	80005f8 <__aeabi_dmul>
 8004de6:	9e02      	ldr	r6, [sp, #8]
 8004de8:	4682      	mov	sl, r0
 8004dea:	468b      	mov	fp, r1
 8004dec:	3501      	adds	r5, #1
 8004dee:	4628      	mov	r0, r5
 8004df0:	f7fb fb98 	bl	8000524 <__aeabi_i2d>
 8004df4:	4652      	mov	r2, sl
 8004df6:	465b      	mov	r3, fp
 8004df8:	f7fb fbfe 	bl	80005f8 <__aeabi_dmul>
 8004dfc:	4b82      	ldr	r3, [pc, #520]	; (8005008 <_dtoa_r+0x628>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f7fb fa44 	bl	800028c <__adddf3>
 8004e04:	46d0      	mov	r8, sl
 8004e06:	46d9      	mov	r9, fp
 8004e08:	4682      	mov	sl, r0
 8004e0a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004e0e:	2e00      	cmp	r6, #0
 8004e10:	d158      	bne.n	8004ec4 <_dtoa_r+0x4e4>
 8004e12:	4b7e      	ldr	r3, [pc, #504]	; (800500c <_dtoa_r+0x62c>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	4640      	mov	r0, r8
 8004e18:	4649      	mov	r1, r9
 8004e1a:	f7fb fa35 	bl	8000288 <__aeabi_dsub>
 8004e1e:	4652      	mov	r2, sl
 8004e20:	465b      	mov	r3, fp
 8004e22:	4680      	mov	r8, r0
 8004e24:	4689      	mov	r9, r1
 8004e26:	f7fb fe77 	bl	8000b18 <__aeabi_dcmpgt>
 8004e2a:	2800      	cmp	r0, #0
 8004e2c:	f040 8295 	bne.w	800535a <_dtoa_r+0x97a>
 8004e30:	4652      	mov	r2, sl
 8004e32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004e36:	4640      	mov	r0, r8
 8004e38:	4649      	mov	r1, r9
 8004e3a:	f7fb fe4f 	bl	8000adc <__aeabi_dcmplt>
 8004e3e:	2800      	cmp	r0, #0
 8004e40:	f040 8289 	bne.w	8005356 <_dtoa_r+0x976>
 8004e44:	ec5b ab19 	vmov	sl, fp, d9
 8004e48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f2c0 8148 	blt.w	80050e0 <_dtoa_r+0x700>
 8004e50:	9a00      	ldr	r2, [sp, #0]
 8004e52:	2a0e      	cmp	r2, #14
 8004e54:	f300 8144 	bgt.w	80050e0 <_dtoa_r+0x700>
 8004e58:	4b67      	ldr	r3, [pc, #412]	; (8004ff8 <_dtoa_r+0x618>)
 8004e5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f280 80d5 	bge.w	8005014 <_dtoa_r+0x634>
 8004e6a:	9b03      	ldr	r3, [sp, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f300 80d1 	bgt.w	8005014 <_dtoa_r+0x634>
 8004e72:	f040 826f 	bne.w	8005354 <_dtoa_r+0x974>
 8004e76:	4b65      	ldr	r3, [pc, #404]	; (800500c <_dtoa_r+0x62c>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	4640      	mov	r0, r8
 8004e7c:	4649      	mov	r1, r9
 8004e7e:	f7fb fbbb 	bl	80005f8 <__aeabi_dmul>
 8004e82:	4652      	mov	r2, sl
 8004e84:	465b      	mov	r3, fp
 8004e86:	f7fb fe3d 	bl	8000b04 <__aeabi_dcmpge>
 8004e8a:	9e03      	ldr	r6, [sp, #12]
 8004e8c:	4637      	mov	r7, r6
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	f040 8245 	bne.w	800531e <_dtoa_r+0x93e>
 8004e94:	9d01      	ldr	r5, [sp, #4]
 8004e96:	2331      	movs	r3, #49	; 0x31
 8004e98:	f805 3b01 	strb.w	r3, [r5], #1
 8004e9c:	9b00      	ldr	r3, [sp, #0]
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	e240      	b.n	8005326 <_dtoa_r+0x946>
 8004ea4:	07f2      	lsls	r2, r6, #31
 8004ea6:	d505      	bpl.n	8004eb4 <_dtoa_r+0x4d4>
 8004ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eac:	f7fb fba4 	bl	80005f8 <__aeabi_dmul>
 8004eb0:	3501      	adds	r5, #1
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	1076      	asrs	r6, r6, #1
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	e777      	b.n	8004daa <_dtoa_r+0x3ca>
 8004eba:	2502      	movs	r5, #2
 8004ebc:	e779      	b.n	8004db2 <_dtoa_r+0x3d2>
 8004ebe:	9f00      	ldr	r7, [sp, #0]
 8004ec0:	9e03      	ldr	r6, [sp, #12]
 8004ec2:	e794      	b.n	8004dee <_dtoa_r+0x40e>
 8004ec4:	9901      	ldr	r1, [sp, #4]
 8004ec6:	4b4c      	ldr	r3, [pc, #304]	; (8004ff8 <_dtoa_r+0x618>)
 8004ec8:	4431      	add	r1, r6
 8004eca:	910d      	str	r1, [sp, #52]	; 0x34
 8004ecc:	9908      	ldr	r1, [sp, #32]
 8004ece:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004ed2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004ed6:	2900      	cmp	r1, #0
 8004ed8:	d043      	beq.n	8004f62 <_dtoa_r+0x582>
 8004eda:	494d      	ldr	r1, [pc, #308]	; (8005010 <_dtoa_r+0x630>)
 8004edc:	2000      	movs	r0, #0
 8004ede:	f7fb fcb5 	bl	800084c <__aeabi_ddiv>
 8004ee2:	4652      	mov	r2, sl
 8004ee4:	465b      	mov	r3, fp
 8004ee6:	f7fb f9cf 	bl	8000288 <__aeabi_dsub>
 8004eea:	9d01      	ldr	r5, [sp, #4]
 8004eec:	4682      	mov	sl, r0
 8004eee:	468b      	mov	fp, r1
 8004ef0:	4649      	mov	r1, r9
 8004ef2:	4640      	mov	r0, r8
 8004ef4:	f7fb fe30 	bl	8000b58 <__aeabi_d2iz>
 8004ef8:	4606      	mov	r6, r0
 8004efa:	f7fb fb13 	bl	8000524 <__aeabi_i2d>
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
 8004f02:	4640      	mov	r0, r8
 8004f04:	4649      	mov	r1, r9
 8004f06:	f7fb f9bf 	bl	8000288 <__aeabi_dsub>
 8004f0a:	3630      	adds	r6, #48	; 0x30
 8004f0c:	f805 6b01 	strb.w	r6, [r5], #1
 8004f10:	4652      	mov	r2, sl
 8004f12:	465b      	mov	r3, fp
 8004f14:	4680      	mov	r8, r0
 8004f16:	4689      	mov	r9, r1
 8004f18:	f7fb fde0 	bl	8000adc <__aeabi_dcmplt>
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	d163      	bne.n	8004fe8 <_dtoa_r+0x608>
 8004f20:	4642      	mov	r2, r8
 8004f22:	464b      	mov	r3, r9
 8004f24:	4936      	ldr	r1, [pc, #216]	; (8005000 <_dtoa_r+0x620>)
 8004f26:	2000      	movs	r0, #0
 8004f28:	f7fb f9ae 	bl	8000288 <__aeabi_dsub>
 8004f2c:	4652      	mov	r2, sl
 8004f2e:	465b      	mov	r3, fp
 8004f30:	f7fb fdd4 	bl	8000adc <__aeabi_dcmplt>
 8004f34:	2800      	cmp	r0, #0
 8004f36:	f040 80b5 	bne.w	80050a4 <_dtoa_r+0x6c4>
 8004f3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f3c:	429d      	cmp	r5, r3
 8004f3e:	d081      	beq.n	8004e44 <_dtoa_r+0x464>
 8004f40:	4b30      	ldr	r3, [pc, #192]	; (8005004 <_dtoa_r+0x624>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	4650      	mov	r0, sl
 8004f46:	4659      	mov	r1, fp
 8004f48:	f7fb fb56 	bl	80005f8 <__aeabi_dmul>
 8004f4c:	4b2d      	ldr	r3, [pc, #180]	; (8005004 <_dtoa_r+0x624>)
 8004f4e:	4682      	mov	sl, r0
 8004f50:	468b      	mov	fp, r1
 8004f52:	4640      	mov	r0, r8
 8004f54:	4649      	mov	r1, r9
 8004f56:	2200      	movs	r2, #0
 8004f58:	f7fb fb4e 	bl	80005f8 <__aeabi_dmul>
 8004f5c:	4680      	mov	r8, r0
 8004f5e:	4689      	mov	r9, r1
 8004f60:	e7c6      	b.n	8004ef0 <_dtoa_r+0x510>
 8004f62:	4650      	mov	r0, sl
 8004f64:	4659      	mov	r1, fp
 8004f66:	f7fb fb47 	bl	80005f8 <__aeabi_dmul>
 8004f6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f6c:	9d01      	ldr	r5, [sp, #4]
 8004f6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f70:	4682      	mov	sl, r0
 8004f72:	468b      	mov	fp, r1
 8004f74:	4649      	mov	r1, r9
 8004f76:	4640      	mov	r0, r8
 8004f78:	f7fb fdee 	bl	8000b58 <__aeabi_d2iz>
 8004f7c:	4606      	mov	r6, r0
 8004f7e:	f7fb fad1 	bl	8000524 <__aeabi_i2d>
 8004f82:	3630      	adds	r6, #48	; 0x30
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4640      	mov	r0, r8
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	f7fb f97c 	bl	8000288 <__aeabi_dsub>
 8004f90:	f805 6b01 	strb.w	r6, [r5], #1
 8004f94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f96:	429d      	cmp	r5, r3
 8004f98:	4680      	mov	r8, r0
 8004f9a:	4689      	mov	r9, r1
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	d124      	bne.n	8004fec <_dtoa_r+0x60c>
 8004fa2:	4b1b      	ldr	r3, [pc, #108]	; (8005010 <_dtoa_r+0x630>)
 8004fa4:	4650      	mov	r0, sl
 8004fa6:	4659      	mov	r1, fp
 8004fa8:	f7fb f970 	bl	800028c <__adddf3>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4640      	mov	r0, r8
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	f7fb fdb0 	bl	8000b18 <__aeabi_dcmpgt>
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	d173      	bne.n	80050a4 <_dtoa_r+0x6c4>
 8004fbc:	4652      	mov	r2, sl
 8004fbe:	465b      	mov	r3, fp
 8004fc0:	4913      	ldr	r1, [pc, #76]	; (8005010 <_dtoa_r+0x630>)
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	f7fb f960 	bl	8000288 <__aeabi_dsub>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	4640      	mov	r0, r8
 8004fce:	4649      	mov	r1, r9
 8004fd0:	f7fb fd84 	bl	8000adc <__aeabi_dcmplt>
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	f43f af35 	beq.w	8004e44 <_dtoa_r+0x464>
 8004fda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004fdc:	1e6b      	subs	r3, r5, #1
 8004fde:	930f      	str	r3, [sp, #60]	; 0x3c
 8004fe0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004fe4:	2b30      	cmp	r3, #48	; 0x30
 8004fe6:	d0f8      	beq.n	8004fda <_dtoa_r+0x5fa>
 8004fe8:	9700      	str	r7, [sp, #0]
 8004fea:	e049      	b.n	8005080 <_dtoa_r+0x6a0>
 8004fec:	4b05      	ldr	r3, [pc, #20]	; (8005004 <_dtoa_r+0x624>)
 8004fee:	f7fb fb03 	bl	80005f8 <__aeabi_dmul>
 8004ff2:	4680      	mov	r8, r0
 8004ff4:	4689      	mov	r9, r1
 8004ff6:	e7bd      	b.n	8004f74 <_dtoa_r+0x594>
 8004ff8:	08006f18 	.word	0x08006f18
 8004ffc:	08006ef0 	.word	0x08006ef0
 8005000:	3ff00000 	.word	0x3ff00000
 8005004:	40240000 	.word	0x40240000
 8005008:	401c0000 	.word	0x401c0000
 800500c:	40140000 	.word	0x40140000
 8005010:	3fe00000 	.word	0x3fe00000
 8005014:	9d01      	ldr	r5, [sp, #4]
 8005016:	4656      	mov	r6, sl
 8005018:	465f      	mov	r7, fp
 800501a:	4642      	mov	r2, r8
 800501c:	464b      	mov	r3, r9
 800501e:	4630      	mov	r0, r6
 8005020:	4639      	mov	r1, r7
 8005022:	f7fb fc13 	bl	800084c <__aeabi_ddiv>
 8005026:	f7fb fd97 	bl	8000b58 <__aeabi_d2iz>
 800502a:	4682      	mov	sl, r0
 800502c:	f7fb fa7a 	bl	8000524 <__aeabi_i2d>
 8005030:	4642      	mov	r2, r8
 8005032:	464b      	mov	r3, r9
 8005034:	f7fb fae0 	bl	80005f8 <__aeabi_dmul>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	4630      	mov	r0, r6
 800503e:	4639      	mov	r1, r7
 8005040:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005044:	f7fb f920 	bl	8000288 <__aeabi_dsub>
 8005048:	f805 6b01 	strb.w	r6, [r5], #1
 800504c:	9e01      	ldr	r6, [sp, #4]
 800504e:	9f03      	ldr	r7, [sp, #12]
 8005050:	1bae      	subs	r6, r5, r6
 8005052:	42b7      	cmp	r7, r6
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	d135      	bne.n	80050c6 <_dtoa_r+0x6e6>
 800505a:	f7fb f917 	bl	800028c <__adddf3>
 800505e:	4642      	mov	r2, r8
 8005060:	464b      	mov	r3, r9
 8005062:	4606      	mov	r6, r0
 8005064:	460f      	mov	r7, r1
 8005066:	f7fb fd57 	bl	8000b18 <__aeabi_dcmpgt>
 800506a:	b9d0      	cbnz	r0, 80050a2 <_dtoa_r+0x6c2>
 800506c:	4642      	mov	r2, r8
 800506e:	464b      	mov	r3, r9
 8005070:	4630      	mov	r0, r6
 8005072:	4639      	mov	r1, r7
 8005074:	f7fb fd28 	bl	8000ac8 <__aeabi_dcmpeq>
 8005078:	b110      	cbz	r0, 8005080 <_dtoa_r+0x6a0>
 800507a:	f01a 0f01 	tst.w	sl, #1
 800507e:	d110      	bne.n	80050a2 <_dtoa_r+0x6c2>
 8005080:	4620      	mov	r0, r4
 8005082:	ee18 1a10 	vmov	r1, s16
 8005086:	f000 faf3 	bl	8005670 <_Bfree>
 800508a:	2300      	movs	r3, #0
 800508c:	9800      	ldr	r0, [sp, #0]
 800508e:	702b      	strb	r3, [r5, #0]
 8005090:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005092:	3001      	adds	r0, #1
 8005094:	6018      	str	r0, [r3, #0]
 8005096:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005098:	2b00      	cmp	r3, #0
 800509a:	f43f acf1 	beq.w	8004a80 <_dtoa_r+0xa0>
 800509e:	601d      	str	r5, [r3, #0]
 80050a0:	e4ee      	b.n	8004a80 <_dtoa_r+0xa0>
 80050a2:	9f00      	ldr	r7, [sp, #0]
 80050a4:	462b      	mov	r3, r5
 80050a6:	461d      	mov	r5, r3
 80050a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80050ac:	2a39      	cmp	r2, #57	; 0x39
 80050ae:	d106      	bne.n	80050be <_dtoa_r+0x6de>
 80050b0:	9a01      	ldr	r2, [sp, #4]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d1f7      	bne.n	80050a6 <_dtoa_r+0x6c6>
 80050b6:	9901      	ldr	r1, [sp, #4]
 80050b8:	2230      	movs	r2, #48	; 0x30
 80050ba:	3701      	adds	r7, #1
 80050bc:	700a      	strb	r2, [r1, #0]
 80050be:	781a      	ldrb	r2, [r3, #0]
 80050c0:	3201      	adds	r2, #1
 80050c2:	701a      	strb	r2, [r3, #0]
 80050c4:	e790      	b.n	8004fe8 <_dtoa_r+0x608>
 80050c6:	4ba6      	ldr	r3, [pc, #664]	; (8005360 <_dtoa_r+0x980>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	f7fb fa95 	bl	80005f8 <__aeabi_dmul>
 80050ce:	2200      	movs	r2, #0
 80050d0:	2300      	movs	r3, #0
 80050d2:	4606      	mov	r6, r0
 80050d4:	460f      	mov	r7, r1
 80050d6:	f7fb fcf7 	bl	8000ac8 <__aeabi_dcmpeq>
 80050da:	2800      	cmp	r0, #0
 80050dc:	d09d      	beq.n	800501a <_dtoa_r+0x63a>
 80050de:	e7cf      	b.n	8005080 <_dtoa_r+0x6a0>
 80050e0:	9a08      	ldr	r2, [sp, #32]
 80050e2:	2a00      	cmp	r2, #0
 80050e4:	f000 80d7 	beq.w	8005296 <_dtoa_r+0x8b6>
 80050e8:	9a06      	ldr	r2, [sp, #24]
 80050ea:	2a01      	cmp	r2, #1
 80050ec:	f300 80ba 	bgt.w	8005264 <_dtoa_r+0x884>
 80050f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050f2:	2a00      	cmp	r2, #0
 80050f4:	f000 80b2 	beq.w	800525c <_dtoa_r+0x87c>
 80050f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80050fc:	9e07      	ldr	r6, [sp, #28]
 80050fe:	9d04      	ldr	r5, [sp, #16]
 8005100:	9a04      	ldr	r2, [sp, #16]
 8005102:	441a      	add	r2, r3
 8005104:	9204      	str	r2, [sp, #16]
 8005106:	9a05      	ldr	r2, [sp, #20]
 8005108:	2101      	movs	r1, #1
 800510a:	441a      	add	r2, r3
 800510c:	4620      	mov	r0, r4
 800510e:	9205      	str	r2, [sp, #20]
 8005110:	f000 fb66 	bl	80057e0 <__i2b>
 8005114:	4607      	mov	r7, r0
 8005116:	2d00      	cmp	r5, #0
 8005118:	dd0c      	ble.n	8005134 <_dtoa_r+0x754>
 800511a:	9b05      	ldr	r3, [sp, #20]
 800511c:	2b00      	cmp	r3, #0
 800511e:	dd09      	ble.n	8005134 <_dtoa_r+0x754>
 8005120:	42ab      	cmp	r3, r5
 8005122:	9a04      	ldr	r2, [sp, #16]
 8005124:	bfa8      	it	ge
 8005126:	462b      	movge	r3, r5
 8005128:	1ad2      	subs	r2, r2, r3
 800512a:	9204      	str	r2, [sp, #16]
 800512c:	9a05      	ldr	r2, [sp, #20]
 800512e:	1aed      	subs	r5, r5, r3
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	9305      	str	r3, [sp, #20]
 8005134:	9b07      	ldr	r3, [sp, #28]
 8005136:	b31b      	cbz	r3, 8005180 <_dtoa_r+0x7a0>
 8005138:	9b08      	ldr	r3, [sp, #32]
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 80af 	beq.w	800529e <_dtoa_r+0x8be>
 8005140:	2e00      	cmp	r6, #0
 8005142:	dd13      	ble.n	800516c <_dtoa_r+0x78c>
 8005144:	4639      	mov	r1, r7
 8005146:	4632      	mov	r2, r6
 8005148:	4620      	mov	r0, r4
 800514a:	f000 fc09 	bl	8005960 <__pow5mult>
 800514e:	ee18 2a10 	vmov	r2, s16
 8005152:	4601      	mov	r1, r0
 8005154:	4607      	mov	r7, r0
 8005156:	4620      	mov	r0, r4
 8005158:	f000 fb58 	bl	800580c <__multiply>
 800515c:	ee18 1a10 	vmov	r1, s16
 8005160:	4680      	mov	r8, r0
 8005162:	4620      	mov	r0, r4
 8005164:	f000 fa84 	bl	8005670 <_Bfree>
 8005168:	ee08 8a10 	vmov	s16, r8
 800516c:	9b07      	ldr	r3, [sp, #28]
 800516e:	1b9a      	subs	r2, r3, r6
 8005170:	d006      	beq.n	8005180 <_dtoa_r+0x7a0>
 8005172:	ee18 1a10 	vmov	r1, s16
 8005176:	4620      	mov	r0, r4
 8005178:	f000 fbf2 	bl	8005960 <__pow5mult>
 800517c:	ee08 0a10 	vmov	s16, r0
 8005180:	2101      	movs	r1, #1
 8005182:	4620      	mov	r0, r4
 8005184:	f000 fb2c 	bl	80057e0 <__i2b>
 8005188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800518a:	2b00      	cmp	r3, #0
 800518c:	4606      	mov	r6, r0
 800518e:	f340 8088 	ble.w	80052a2 <_dtoa_r+0x8c2>
 8005192:	461a      	mov	r2, r3
 8005194:	4601      	mov	r1, r0
 8005196:	4620      	mov	r0, r4
 8005198:	f000 fbe2 	bl	8005960 <__pow5mult>
 800519c:	9b06      	ldr	r3, [sp, #24]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	4606      	mov	r6, r0
 80051a2:	f340 8081 	ble.w	80052a8 <_dtoa_r+0x8c8>
 80051a6:	f04f 0800 	mov.w	r8, #0
 80051aa:	6933      	ldr	r3, [r6, #16]
 80051ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80051b0:	6918      	ldr	r0, [r3, #16]
 80051b2:	f000 fac5 	bl	8005740 <__hi0bits>
 80051b6:	f1c0 0020 	rsb	r0, r0, #32
 80051ba:	9b05      	ldr	r3, [sp, #20]
 80051bc:	4418      	add	r0, r3
 80051be:	f010 001f 	ands.w	r0, r0, #31
 80051c2:	f000 8092 	beq.w	80052ea <_dtoa_r+0x90a>
 80051c6:	f1c0 0320 	rsb	r3, r0, #32
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	f340 808a 	ble.w	80052e4 <_dtoa_r+0x904>
 80051d0:	f1c0 001c 	rsb	r0, r0, #28
 80051d4:	9b04      	ldr	r3, [sp, #16]
 80051d6:	4403      	add	r3, r0
 80051d8:	9304      	str	r3, [sp, #16]
 80051da:	9b05      	ldr	r3, [sp, #20]
 80051dc:	4403      	add	r3, r0
 80051de:	4405      	add	r5, r0
 80051e0:	9305      	str	r3, [sp, #20]
 80051e2:	9b04      	ldr	r3, [sp, #16]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	dd07      	ble.n	80051f8 <_dtoa_r+0x818>
 80051e8:	ee18 1a10 	vmov	r1, s16
 80051ec:	461a      	mov	r2, r3
 80051ee:	4620      	mov	r0, r4
 80051f0:	f000 fc10 	bl	8005a14 <__lshift>
 80051f4:	ee08 0a10 	vmov	s16, r0
 80051f8:	9b05      	ldr	r3, [sp, #20]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	dd05      	ble.n	800520a <_dtoa_r+0x82a>
 80051fe:	4631      	mov	r1, r6
 8005200:	461a      	mov	r2, r3
 8005202:	4620      	mov	r0, r4
 8005204:	f000 fc06 	bl	8005a14 <__lshift>
 8005208:	4606      	mov	r6, r0
 800520a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800520c:	2b00      	cmp	r3, #0
 800520e:	d06e      	beq.n	80052ee <_dtoa_r+0x90e>
 8005210:	ee18 0a10 	vmov	r0, s16
 8005214:	4631      	mov	r1, r6
 8005216:	f000 fc6d 	bl	8005af4 <__mcmp>
 800521a:	2800      	cmp	r0, #0
 800521c:	da67      	bge.n	80052ee <_dtoa_r+0x90e>
 800521e:	9b00      	ldr	r3, [sp, #0]
 8005220:	3b01      	subs	r3, #1
 8005222:	ee18 1a10 	vmov	r1, s16
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	220a      	movs	r2, #10
 800522a:	2300      	movs	r3, #0
 800522c:	4620      	mov	r0, r4
 800522e:	f000 fa41 	bl	80056b4 <__multadd>
 8005232:	9b08      	ldr	r3, [sp, #32]
 8005234:	ee08 0a10 	vmov	s16, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 81b1 	beq.w	80055a0 <_dtoa_r+0xbc0>
 800523e:	2300      	movs	r3, #0
 8005240:	4639      	mov	r1, r7
 8005242:	220a      	movs	r2, #10
 8005244:	4620      	mov	r0, r4
 8005246:	f000 fa35 	bl	80056b4 <__multadd>
 800524a:	9b02      	ldr	r3, [sp, #8]
 800524c:	2b00      	cmp	r3, #0
 800524e:	4607      	mov	r7, r0
 8005250:	f300 808e 	bgt.w	8005370 <_dtoa_r+0x990>
 8005254:	9b06      	ldr	r3, [sp, #24]
 8005256:	2b02      	cmp	r3, #2
 8005258:	dc51      	bgt.n	80052fe <_dtoa_r+0x91e>
 800525a:	e089      	b.n	8005370 <_dtoa_r+0x990>
 800525c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800525e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005262:	e74b      	b.n	80050fc <_dtoa_r+0x71c>
 8005264:	9b03      	ldr	r3, [sp, #12]
 8005266:	1e5e      	subs	r6, r3, #1
 8005268:	9b07      	ldr	r3, [sp, #28]
 800526a:	42b3      	cmp	r3, r6
 800526c:	bfbf      	itttt	lt
 800526e:	9b07      	ldrlt	r3, [sp, #28]
 8005270:	9607      	strlt	r6, [sp, #28]
 8005272:	1af2      	sublt	r2, r6, r3
 8005274:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005276:	bfb6      	itet	lt
 8005278:	189b      	addlt	r3, r3, r2
 800527a:	1b9e      	subge	r6, r3, r6
 800527c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800527e:	9b03      	ldr	r3, [sp, #12]
 8005280:	bfb8      	it	lt
 8005282:	2600      	movlt	r6, #0
 8005284:	2b00      	cmp	r3, #0
 8005286:	bfb7      	itett	lt
 8005288:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800528c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005290:	1a9d      	sublt	r5, r3, r2
 8005292:	2300      	movlt	r3, #0
 8005294:	e734      	b.n	8005100 <_dtoa_r+0x720>
 8005296:	9e07      	ldr	r6, [sp, #28]
 8005298:	9d04      	ldr	r5, [sp, #16]
 800529a:	9f08      	ldr	r7, [sp, #32]
 800529c:	e73b      	b.n	8005116 <_dtoa_r+0x736>
 800529e:	9a07      	ldr	r2, [sp, #28]
 80052a0:	e767      	b.n	8005172 <_dtoa_r+0x792>
 80052a2:	9b06      	ldr	r3, [sp, #24]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	dc18      	bgt.n	80052da <_dtoa_r+0x8fa>
 80052a8:	f1ba 0f00 	cmp.w	sl, #0
 80052ac:	d115      	bne.n	80052da <_dtoa_r+0x8fa>
 80052ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80052b2:	b993      	cbnz	r3, 80052da <_dtoa_r+0x8fa>
 80052b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80052b8:	0d1b      	lsrs	r3, r3, #20
 80052ba:	051b      	lsls	r3, r3, #20
 80052bc:	b183      	cbz	r3, 80052e0 <_dtoa_r+0x900>
 80052be:	9b04      	ldr	r3, [sp, #16]
 80052c0:	3301      	adds	r3, #1
 80052c2:	9304      	str	r3, [sp, #16]
 80052c4:	9b05      	ldr	r3, [sp, #20]
 80052c6:	3301      	adds	r3, #1
 80052c8:	9305      	str	r3, [sp, #20]
 80052ca:	f04f 0801 	mov.w	r8, #1
 80052ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f47f af6a 	bne.w	80051aa <_dtoa_r+0x7ca>
 80052d6:	2001      	movs	r0, #1
 80052d8:	e76f      	b.n	80051ba <_dtoa_r+0x7da>
 80052da:	f04f 0800 	mov.w	r8, #0
 80052de:	e7f6      	b.n	80052ce <_dtoa_r+0x8ee>
 80052e0:	4698      	mov	r8, r3
 80052e2:	e7f4      	b.n	80052ce <_dtoa_r+0x8ee>
 80052e4:	f43f af7d 	beq.w	80051e2 <_dtoa_r+0x802>
 80052e8:	4618      	mov	r0, r3
 80052ea:	301c      	adds	r0, #28
 80052ec:	e772      	b.n	80051d4 <_dtoa_r+0x7f4>
 80052ee:	9b03      	ldr	r3, [sp, #12]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	dc37      	bgt.n	8005364 <_dtoa_r+0x984>
 80052f4:	9b06      	ldr	r3, [sp, #24]
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	dd34      	ble.n	8005364 <_dtoa_r+0x984>
 80052fa:	9b03      	ldr	r3, [sp, #12]
 80052fc:	9302      	str	r3, [sp, #8]
 80052fe:	9b02      	ldr	r3, [sp, #8]
 8005300:	b96b      	cbnz	r3, 800531e <_dtoa_r+0x93e>
 8005302:	4631      	mov	r1, r6
 8005304:	2205      	movs	r2, #5
 8005306:	4620      	mov	r0, r4
 8005308:	f000 f9d4 	bl	80056b4 <__multadd>
 800530c:	4601      	mov	r1, r0
 800530e:	4606      	mov	r6, r0
 8005310:	ee18 0a10 	vmov	r0, s16
 8005314:	f000 fbee 	bl	8005af4 <__mcmp>
 8005318:	2800      	cmp	r0, #0
 800531a:	f73f adbb 	bgt.w	8004e94 <_dtoa_r+0x4b4>
 800531e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005320:	9d01      	ldr	r5, [sp, #4]
 8005322:	43db      	mvns	r3, r3
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	f04f 0800 	mov.w	r8, #0
 800532a:	4631      	mov	r1, r6
 800532c:	4620      	mov	r0, r4
 800532e:	f000 f99f 	bl	8005670 <_Bfree>
 8005332:	2f00      	cmp	r7, #0
 8005334:	f43f aea4 	beq.w	8005080 <_dtoa_r+0x6a0>
 8005338:	f1b8 0f00 	cmp.w	r8, #0
 800533c:	d005      	beq.n	800534a <_dtoa_r+0x96a>
 800533e:	45b8      	cmp	r8, r7
 8005340:	d003      	beq.n	800534a <_dtoa_r+0x96a>
 8005342:	4641      	mov	r1, r8
 8005344:	4620      	mov	r0, r4
 8005346:	f000 f993 	bl	8005670 <_Bfree>
 800534a:	4639      	mov	r1, r7
 800534c:	4620      	mov	r0, r4
 800534e:	f000 f98f 	bl	8005670 <_Bfree>
 8005352:	e695      	b.n	8005080 <_dtoa_r+0x6a0>
 8005354:	2600      	movs	r6, #0
 8005356:	4637      	mov	r7, r6
 8005358:	e7e1      	b.n	800531e <_dtoa_r+0x93e>
 800535a:	9700      	str	r7, [sp, #0]
 800535c:	4637      	mov	r7, r6
 800535e:	e599      	b.n	8004e94 <_dtoa_r+0x4b4>
 8005360:	40240000 	.word	0x40240000
 8005364:	9b08      	ldr	r3, [sp, #32]
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 80ca 	beq.w	8005500 <_dtoa_r+0xb20>
 800536c:	9b03      	ldr	r3, [sp, #12]
 800536e:	9302      	str	r3, [sp, #8]
 8005370:	2d00      	cmp	r5, #0
 8005372:	dd05      	ble.n	8005380 <_dtoa_r+0x9a0>
 8005374:	4639      	mov	r1, r7
 8005376:	462a      	mov	r2, r5
 8005378:	4620      	mov	r0, r4
 800537a:	f000 fb4b 	bl	8005a14 <__lshift>
 800537e:	4607      	mov	r7, r0
 8005380:	f1b8 0f00 	cmp.w	r8, #0
 8005384:	d05b      	beq.n	800543e <_dtoa_r+0xa5e>
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	4620      	mov	r0, r4
 800538a:	f000 f931 	bl	80055f0 <_Balloc>
 800538e:	4605      	mov	r5, r0
 8005390:	b928      	cbnz	r0, 800539e <_dtoa_r+0x9be>
 8005392:	4b87      	ldr	r3, [pc, #540]	; (80055b0 <_dtoa_r+0xbd0>)
 8005394:	4602      	mov	r2, r0
 8005396:	f240 21ea 	movw	r1, #746	; 0x2ea
 800539a:	f7ff bb3b 	b.w	8004a14 <_dtoa_r+0x34>
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	3202      	adds	r2, #2
 80053a2:	0092      	lsls	r2, r2, #2
 80053a4:	f107 010c 	add.w	r1, r7, #12
 80053a8:	300c      	adds	r0, #12
 80053aa:	f000 f913 	bl	80055d4 <memcpy>
 80053ae:	2201      	movs	r2, #1
 80053b0:	4629      	mov	r1, r5
 80053b2:	4620      	mov	r0, r4
 80053b4:	f000 fb2e 	bl	8005a14 <__lshift>
 80053b8:	9b01      	ldr	r3, [sp, #4]
 80053ba:	f103 0901 	add.w	r9, r3, #1
 80053be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80053c2:	4413      	add	r3, r2
 80053c4:	9305      	str	r3, [sp, #20]
 80053c6:	f00a 0301 	and.w	r3, sl, #1
 80053ca:	46b8      	mov	r8, r7
 80053cc:	9304      	str	r3, [sp, #16]
 80053ce:	4607      	mov	r7, r0
 80053d0:	4631      	mov	r1, r6
 80053d2:	ee18 0a10 	vmov	r0, s16
 80053d6:	f7ff fa77 	bl	80048c8 <quorem>
 80053da:	4641      	mov	r1, r8
 80053dc:	9002      	str	r0, [sp, #8]
 80053de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80053e2:	ee18 0a10 	vmov	r0, s16
 80053e6:	f000 fb85 	bl	8005af4 <__mcmp>
 80053ea:	463a      	mov	r2, r7
 80053ec:	9003      	str	r0, [sp, #12]
 80053ee:	4631      	mov	r1, r6
 80053f0:	4620      	mov	r0, r4
 80053f2:	f000 fb9b 	bl	8005b2c <__mdiff>
 80053f6:	68c2      	ldr	r2, [r0, #12]
 80053f8:	f109 3bff 	add.w	fp, r9, #4294967295
 80053fc:	4605      	mov	r5, r0
 80053fe:	bb02      	cbnz	r2, 8005442 <_dtoa_r+0xa62>
 8005400:	4601      	mov	r1, r0
 8005402:	ee18 0a10 	vmov	r0, s16
 8005406:	f000 fb75 	bl	8005af4 <__mcmp>
 800540a:	4602      	mov	r2, r0
 800540c:	4629      	mov	r1, r5
 800540e:	4620      	mov	r0, r4
 8005410:	9207      	str	r2, [sp, #28]
 8005412:	f000 f92d 	bl	8005670 <_Bfree>
 8005416:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800541a:	ea43 0102 	orr.w	r1, r3, r2
 800541e:	9b04      	ldr	r3, [sp, #16]
 8005420:	430b      	orrs	r3, r1
 8005422:	464d      	mov	r5, r9
 8005424:	d10f      	bne.n	8005446 <_dtoa_r+0xa66>
 8005426:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800542a:	d02a      	beq.n	8005482 <_dtoa_r+0xaa2>
 800542c:	9b03      	ldr	r3, [sp, #12]
 800542e:	2b00      	cmp	r3, #0
 8005430:	dd02      	ble.n	8005438 <_dtoa_r+0xa58>
 8005432:	9b02      	ldr	r3, [sp, #8]
 8005434:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005438:	f88b a000 	strb.w	sl, [fp]
 800543c:	e775      	b.n	800532a <_dtoa_r+0x94a>
 800543e:	4638      	mov	r0, r7
 8005440:	e7ba      	b.n	80053b8 <_dtoa_r+0x9d8>
 8005442:	2201      	movs	r2, #1
 8005444:	e7e2      	b.n	800540c <_dtoa_r+0xa2c>
 8005446:	9b03      	ldr	r3, [sp, #12]
 8005448:	2b00      	cmp	r3, #0
 800544a:	db04      	blt.n	8005456 <_dtoa_r+0xa76>
 800544c:	9906      	ldr	r1, [sp, #24]
 800544e:	430b      	orrs	r3, r1
 8005450:	9904      	ldr	r1, [sp, #16]
 8005452:	430b      	orrs	r3, r1
 8005454:	d122      	bne.n	800549c <_dtoa_r+0xabc>
 8005456:	2a00      	cmp	r2, #0
 8005458:	ddee      	ble.n	8005438 <_dtoa_r+0xa58>
 800545a:	ee18 1a10 	vmov	r1, s16
 800545e:	2201      	movs	r2, #1
 8005460:	4620      	mov	r0, r4
 8005462:	f000 fad7 	bl	8005a14 <__lshift>
 8005466:	4631      	mov	r1, r6
 8005468:	ee08 0a10 	vmov	s16, r0
 800546c:	f000 fb42 	bl	8005af4 <__mcmp>
 8005470:	2800      	cmp	r0, #0
 8005472:	dc03      	bgt.n	800547c <_dtoa_r+0xa9c>
 8005474:	d1e0      	bne.n	8005438 <_dtoa_r+0xa58>
 8005476:	f01a 0f01 	tst.w	sl, #1
 800547a:	d0dd      	beq.n	8005438 <_dtoa_r+0xa58>
 800547c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005480:	d1d7      	bne.n	8005432 <_dtoa_r+0xa52>
 8005482:	2339      	movs	r3, #57	; 0x39
 8005484:	f88b 3000 	strb.w	r3, [fp]
 8005488:	462b      	mov	r3, r5
 800548a:	461d      	mov	r5, r3
 800548c:	3b01      	subs	r3, #1
 800548e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005492:	2a39      	cmp	r2, #57	; 0x39
 8005494:	d071      	beq.n	800557a <_dtoa_r+0xb9a>
 8005496:	3201      	adds	r2, #1
 8005498:	701a      	strb	r2, [r3, #0]
 800549a:	e746      	b.n	800532a <_dtoa_r+0x94a>
 800549c:	2a00      	cmp	r2, #0
 800549e:	dd07      	ble.n	80054b0 <_dtoa_r+0xad0>
 80054a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80054a4:	d0ed      	beq.n	8005482 <_dtoa_r+0xaa2>
 80054a6:	f10a 0301 	add.w	r3, sl, #1
 80054aa:	f88b 3000 	strb.w	r3, [fp]
 80054ae:	e73c      	b.n	800532a <_dtoa_r+0x94a>
 80054b0:	9b05      	ldr	r3, [sp, #20]
 80054b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80054b6:	4599      	cmp	r9, r3
 80054b8:	d047      	beq.n	800554a <_dtoa_r+0xb6a>
 80054ba:	ee18 1a10 	vmov	r1, s16
 80054be:	2300      	movs	r3, #0
 80054c0:	220a      	movs	r2, #10
 80054c2:	4620      	mov	r0, r4
 80054c4:	f000 f8f6 	bl	80056b4 <__multadd>
 80054c8:	45b8      	cmp	r8, r7
 80054ca:	ee08 0a10 	vmov	s16, r0
 80054ce:	f04f 0300 	mov.w	r3, #0
 80054d2:	f04f 020a 	mov.w	r2, #10
 80054d6:	4641      	mov	r1, r8
 80054d8:	4620      	mov	r0, r4
 80054da:	d106      	bne.n	80054ea <_dtoa_r+0xb0a>
 80054dc:	f000 f8ea 	bl	80056b4 <__multadd>
 80054e0:	4680      	mov	r8, r0
 80054e2:	4607      	mov	r7, r0
 80054e4:	f109 0901 	add.w	r9, r9, #1
 80054e8:	e772      	b.n	80053d0 <_dtoa_r+0x9f0>
 80054ea:	f000 f8e3 	bl	80056b4 <__multadd>
 80054ee:	4639      	mov	r1, r7
 80054f0:	4680      	mov	r8, r0
 80054f2:	2300      	movs	r3, #0
 80054f4:	220a      	movs	r2, #10
 80054f6:	4620      	mov	r0, r4
 80054f8:	f000 f8dc 	bl	80056b4 <__multadd>
 80054fc:	4607      	mov	r7, r0
 80054fe:	e7f1      	b.n	80054e4 <_dtoa_r+0xb04>
 8005500:	9b03      	ldr	r3, [sp, #12]
 8005502:	9302      	str	r3, [sp, #8]
 8005504:	9d01      	ldr	r5, [sp, #4]
 8005506:	ee18 0a10 	vmov	r0, s16
 800550a:	4631      	mov	r1, r6
 800550c:	f7ff f9dc 	bl	80048c8 <quorem>
 8005510:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005514:	9b01      	ldr	r3, [sp, #4]
 8005516:	f805 ab01 	strb.w	sl, [r5], #1
 800551a:	1aea      	subs	r2, r5, r3
 800551c:	9b02      	ldr	r3, [sp, #8]
 800551e:	4293      	cmp	r3, r2
 8005520:	dd09      	ble.n	8005536 <_dtoa_r+0xb56>
 8005522:	ee18 1a10 	vmov	r1, s16
 8005526:	2300      	movs	r3, #0
 8005528:	220a      	movs	r2, #10
 800552a:	4620      	mov	r0, r4
 800552c:	f000 f8c2 	bl	80056b4 <__multadd>
 8005530:	ee08 0a10 	vmov	s16, r0
 8005534:	e7e7      	b.n	8005506 <_dtoa_r+0xb26>
 8005536:	9b02      	ldr	r3, [sp, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	bfc8      	it	gt
 800553c:	461d      	movgt	r5, r3
 800553e:	9b01      	ldr	r3, [sp, #4]
 8005540:	bfd8      	it	le
 8005542:	2501      	movle	r5, #1
 8005544:	441d      	add	r5, r3
 8005546:	f04f 0800 	mov.w	r8, #0
 800554a:	ee18 1a10 	vmov	r1, s16
 800554e:	2201      	movs	r2, #1
 8005550:	4620      	mov	r0, r4
 8005552:	f000 fa5f 	bl	8005a14 <__lshift>
 8005556:	4631      	mov	r1, r6
 8005558:	ee08 0a10 	vmov	s16, r0
 800555c:	f000 faca 	bl	8005af4 <__mcmp>
 8005560:	2800      	cmp	r0, #0
 8005562:	dc91      	bgt.n	8005488 <_dtoa_r+0xaa8>
 8005564:	d102      	bne.n	800556c <_dtoa_r+0xb8c>
 8005566:	f01a 0f01 	tst.w	sl, #1
 800556a:	d18d      	bne.n	8005488 <_dtoa_r+0xaa8>
 800556c:	462b      	mov	r3, r5
 800556e:	461d      	mov	r5, r3
 8005570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005574:	2a30      	cmp	r2, #48	; 0x30
 8005576:	d0fa      	beq.n	800556e <_dtoa_r+0xb8e>
 8005578:	e6d7      	b.n	800532a <_dtoa_r+0x94a>
 800557a:	9a01      	ldr	r2, [sp, #4]
 800557c:	429a      	cmp	r2, r3
 800557e:	d184      	bne.n	800548a <_dtoa_r+0xaaa>
 8005580:	9b00      	ldr	r3, [sp, #0]
 8005582:	3301      	adds	r3, #1
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	2331      	movs	r3, #49	; 0x31
 8005588:	7013      	strb	r3, [r2, #0]
 800558a:	e6ce      	b.n	800532a <_dtoa_r+0x94a>
 800558c:	4b09      	ldr	r3, [pc, #36]	; (80055b4 <_dtoa_r+0xbd4>)
 800558e:	f7ff ba95 	b.w	8004abc <_dtoa_r+0xdc>
 8005592:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005594:	2b00      	cmp	r3, #0
 8005596:	f47f aa6e 	bne.w	8004a76 <_dtoa_r+0x96>
 800559a:	4b07      	ldr	r3, [pc, #28]	; (80055b8 <_dtoa_r+0xbd8>)
 800559c:	f7ff ba8e 	b.w	8004abc <_dtoa_r+0xdc>
 80055a0:	9b02      	ldr	r3, [sp, #8]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	dcae      	bgt.n	8005504 <_dtoa_r+0xb24>
 80055a6:	9b06      	ldr	r3, [sp, #24]
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	f73f aea8 	bgt.w	80052fe <_dtoa_r+0x91e>
 80055ae:	e7a9      	b.n	8005504 <_dtoa_r+0xb24>
 80055b0:	08006e7f 	.word	0x08006e7f
 80055b4:	08006ddc 	.word	0x08006ddc
 80055b8:	08006e00 	.word	0x08006e00

080055bc <_localeconv_r>:
 80055bc:	4800      	ldr	r0, [pc, #0]	; (80055c0 <_localeconv_r+0x4>)
 80055be:	4770      	bx	lr
 80055c0:	20000160 	.word	0x20000160

080055c4 <malloc>:
 80055c4:	4b02      	ldr	r3, [pc, #8]	; (80055d0 <malloc+0xc>)
 80055c6:	4601      	mov	r1, r0
 80055c8:	6818      	ldr	r0, [r3, #0]
 80055ca:	f000 bc17 	b.w	8005dfc <_malloc_r>
 80055ce:	bf00      	nop
 80055d0:	2000000c 	.word	0x2000000c

080055d4 <memcpy>:
 80055d4:	440a      	add	r2, r1
 80055d6:	4291      	cmp	r1, r2
 80055d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80055dc:	d100      	bne.n	80055e0 <memcpy+0xc>
 80055de:	4770      	bx	lr
 80055e0:	b510      	push	{r4, lr}
 80055e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055ea:	4291      	cmp	r1, r2
 80055ec:	d1f9      	bne.n	80055e2 <memcpy+0xe>
 80055ee:	bd10      	pop	{r4, pc}

080055f0 <_Balloc>:
 80055f0:	b570      	push	{r4, r5, r6, lr}
 80055f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80055f4:	4604      	mov	r4, r0
 80055f6:	460d      	mov	r5, r1
 80055f8:	b976      	cbnz	r6, 8005618 <_Balloc+0x28>
 80055fa:	2010      	movs	r0, #16
 80055fc:	f7ff ffe2 	bl	80055c4 <malloc>
 8005600:	4602      	mov	r2, r0
 8005602:	6260      	str	r0, [r4, #36]	; 0x24
 8005604:	b920      	cbnz	r0, 8005610 <_Balloc+0x20>
 8005606:	4b18      	ldr	r3, [pc, #96]	; (8005668 <_Balloc+0x78>)
 8005608:	4818      	ldr	r0, [pc, #96]	; (800566c <_Balloc+0x7c>)
 800560a:	2166      	movs	r1, #102	; 0x66
 800560c:	f000 fdd6 	bl	80061bc <__assert_func>
 8005610:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005614:	6006      	str	r6, [r0, #0]
 8005616:	60c6      	str	r6, [r0, #12]
 8005618:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800561a:	68f3      	ldr	r3, [r6, #12]
 800561c:	b183      	cbz	r3, 8005640 <_Balloc+0x50>
 800561e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005626:	b9b8      	cbnz	r0, 8005658 <_Balloc+0x68>
 8005628:	2101      	movs	r1, #1
 800562a:	fa01 f605 	lsl.w	r6, r1, r5
 800562e:	1d72      	adds	r2, r6, #5
 8005630:	0092      	lsls	r2, r2, #2
 8005632:	4620      	mov	r0, r4
 8005634:	f000 fb60 	bl	8005cf8 <_calloc_r>
 8005638:	b160      	cbz	r0, 8005654 <_Balloc+0x64>
 800563a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800563e:	e00e      	b.n	800565e <_Balloc+0x6e>
 8005640:	2221      	movs	r2, #33	; 0x21
 8005642:	2104      	movs	r1, #4
 8005644:	4620      	mov	r0, r4
 8005646:	f000 fb57 	bl	8005cf8 <_calloc_r>
 800564a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800564c:	60f0      	str	r0, [r6, #12]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e4      	bne.n	800561e <_Balloc+0x2e>
 8005654:	2000      	movs	r0, #0
 8005656:	bd70      	pop	{r4, r5, r6, pc}
 8005658:	6802      	ldr	r2, [r0, #0]
 800565a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800565e:	2300      	movs	r3, #0
 8005660:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005664:	e7f7      	b.n	8005656 <_Balloc+0x66>
 8005666:	bf00      	nop
 8005668:	08006e0d 	.word	0x08006e0d
 800566c:	08006e90 	.word	0x08006e90

08005670 <_Bfree>:
 8005670:	b570      	push	{r4, r5, r6, lr}
 8005672:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005674:	4605      	mov	r5, r0
 8005676:	460c      	mov	r4, r1
 8005678:	b976      	cbnz	r6, 8005698 <_Bfree+0x28>
 800567a:	2010      	movs	r0, #16
 800567c:	f7ff ffa2 	bl	80055c4 <malloc>
 8005680:	4602      	mov	r2, r0
 8005682:	6268      	str	r0, [r5, #36]	; 0x24
 8005684:	b920      	cbnz	r0, 8005690 <_Bfree+0x20>
 8005686:	4b09      	ldr	r3, [pc, #36]	; (80056ac <_Bfree+0x3c>)
 8005688:	4809      	ldr	r0, [pc, #36]	; (80056b0 <_Bfree+0x40>)
 800568a:	218a      	movs	r1, #138	; 0x8a
 800568c:	f000 fd96 	bl	80061bc <__assert_func>
 8005690:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005694:	6006      	str	r6, [r0, #0]
 8005696:	60c6      	str	r6, [r0, #12]
 8005698:	b13c      	cbz	r4, 80056aa <_Bfree+0x3a>
 800569a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800569c:	6862      	ldr	r2, [r4, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80056a4:	6021      	str	r1, [r4, #0]
 80056a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80056aa:	bd70      	pop	{r4, r5, r6, pc}
 80056ac:	08006e0d 	.word	0x08006e0d
 80056b0:	08006e90 	.word	0x08006e90

080056b4 <__multadd>:
 80056b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b8:	690d      	ldr	r5, [r1, #16]
 80056ba:	4607      	mov	r7, r0
 80056bc:	460c      	mov	r4, r1
 80056be:	461e      	mov	r6, r3
 80056c0:	f101 0c14 	add.w	ip, r1, #20
 80056c4:	2000      	movs	r0, #0
 80056c6:	f8dc 3000 	ldr.w	r3, [ip]
 80056ca:	b299      	uxth	r1, r3
 80056cc:	fb02 6101 	mla	r1, r2, r1, r6
 80056d0:	0c1e      	lsrs	r6, r3, #16
 80056d2:	0c0b      	lsrs	r3, r1, #16
 80056d4:	fb02 3306 	mla	r3, r2, r6, r3
 80056d8:	b289      	uxth	r1, r1
 80056da:	3001      	adds	r0, #1
 80056dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80056e0:	4285      	cmp	r5, r0
 80056e2:	f84c 1b04 	str.w	r1, [ip], #4
 80056e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80056ea:	dcec      	bgt.n	80056c6 <__multadd+0x12>
 80056ec:	b30e      	cbz	r6, 8005732 <__multadd+0x7e>
 80056ee:	68a3      	ldr	r3, [r4, #8]
 80056f0:	42ab      	cmp	r3, r5
 80056f2:	dc19      	bgt.n	8005728 <__multadd+0x74>
 80056f4:	6861      	ldr	r1, [r4, #4]
 80056f6:	4638      	mov	r0, r7
 80056f8:	3101      	adds	r1, #1
 80056fa:	f7ff ff79 	bl	80055f0 <_Balloc>
 80056fe:	4680      	mov	r8, r0
 8005700:	b928      	cbnz	r0, 800570e <__multadd+0x5a>
 8005702:	4602      	mov	r2, r0
 8005704:	4b0c      	ldr	r3, [pc, #48]	; (8005738 <__multadd+0x84>)
 8005706:	480d      	ldr	r0, [pc, #52]	; (800573c <__multadd+0x88>)
 8005708:	21b5      	movs	r1, #181	; 0xb5
 800570a:	f000 fd57 	bl	80061bc <__assert_func>
 800570e:	6922      	ldr	r2, [r4, #16]
 8005710:	3202      	adds	r2, #2
 8005712:	f104 010c 	add.w	r1, r4, #12
 8005716:	0092      	lsls	r2, r2, #2
 8005718:	300c      	adds	r0, #12
 800571a:	f7ff ff5b 	bl	80055d4 <memcpy>
 800571e:	4621      	mov	r1, r4
 8005720:	4638      	mov	r0, r7
 8005722:	f7ff ffa5 	bl	8005670 <_Bfree>
 8005726:	4644      	mov	r4, r8
 8005728:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800572c:	3501      	adds	r5, #1
 800572e:	615e      	str	r6, [r3, #20]
 8005730:	6125      	str	r5, [r4, #16]
 8005732:	4620      	mov	r0, r4
 8005734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005738:	08006e7f 	.word	0x08006e7f
 800573c:	08006e90 	.word	0x08006e90

08005740 <__hi0bits>:
 8005740:	0c03      	lsrs	r3, r0, #16
 8005742:	041b      	lsls	r3, r3, #16
 8005744:	b9d3      	cbnz	r3, 800577c <__hi0bits+0x3c>
 8005746:	0400      	lsls	r0, r0, #16
 8005748:	2310      	movs	r3, #16
 800574a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800574e:	bf04      	itt	eq
 8005750:	0200      	lsleq	r0, r0, #8
 8005752:	3308      	addeq	r3, #8
 8005754:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005758:	bf04      	itt	eq
 800575a:	0100      	lsleq	r0, r0, #4
 800575c:	3304      	addeq	r3, #4
 800575e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005762:	bf04      	itt	eq
 8005764:	0080      	lsleq	r0, r0, #2
 8005766:	3302      	addeq	r3, #2
 8005768:	2800      	cmp	r0, #0
 800576a:	db05      	blt.n	8005778 <__hi0bits+0x38>
 800576c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005770:	f103 0301 	add.w	r3, r3, #1
 8005774:	bf08      	it	eq
 8005776:	2320      	moveq	r3, #32
 8005778:	4618      	mov	r0, r3
 800577a:	4770      	bx	lr
 800577c:	2300      	movs	r3, #0
 800577e:	e7e4      	b.n	800574a <__hi0bits+0xa>

08005780 <__lo0bits>:
 8005780:	6803      	ldr	r3, [r0, #0]
 8005782:	f013 0207 	ands.w	r2, r3, #7
 8005786:	4601      	mov	r1, r0
 8005788:	d00b      	beq.n	80057a2 <__lo0bits+0x22>
 800578a:	07da      	lsls	r2, r3, #31
 800578c:	d423      	bmi.n	80057d6 <__lo0bits+0x56>
 800578e:	0798      	lsls	r0, r3, #30
 8005790:	bf49      	itett	mi
 8005792:	085b      	lsrmi	r3, r3, #1
 8005794:	089b      	lsrpl	r3, r3, #2
 8005796:	2001      	movmi	r0, #1
 8005798:	600b      	strmi	r3, [r1, #0]
 800579a:	bf5c      	itt	pl
 800579c:	600b      	strpl	r3, [r1, #0]
 800579e:	2002      	movpl	r0, #2
 80057a0:	4770      	bx	lr
 80057a2:	b298      	uxth	r0, r3
 80057a4:	b9a8      	cbnz	r0, 80057d2 <__lo0bits+0x52>
 80057a6:	0c1b      	lsrs	r3, r3, #16
 80057a8:	2010      	movs	r0, #16
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	b90a      	cbnz	r2, 80057b2 <__lo0bits+0x32>
 80057ae:	3008      	adds	r0, #8
 80057b0:	0a1b      	lsrs	r3, r3, #8
 80057b2:	071a      	lsls	r2, r3, #28
 80057b4:	bf04      	itt	eq
 80057b6:	091b      	lsreq	r3, r3, #4
 80057b8:	3004      	addeq	r0, #4
 80057ba:	079a      	lsls	r2, r3, #30
 80057bc:	bf04      	itt	eq
 80057be:	089b      	lsreq	r3, r3, #2
 80057c0:	3002      	addeq	r0, #2
 80057c2:	07da      	lsls	r2, r3, #31
 80057c4:	d403      	bmi.n	80057ce <__lo0bits+0x4e>
 80057c6:	085b      	lsrs	r3, r3, #1
 80057c8:	f100 0001 	add.w	r0, r0, #1
 80057cc:	d005      	beq.n	80057da <__lo0bits+0x5a>
 80057ce:	600b      	str	r3, [r1, #0]
 80057d0:	4770      	bx	lr
 80057d2:	4610      	mov	r0, r2
 80057d4:	e7e9      	b.n	80057aa <__lo0bits+0x2a>
 80057d6:	2000      	movs	r0, #0
 80057d8:	4770      	bx	lr
 80057da:	2020      	movs	r0, #32
 80057dc:	4770      	bx	lr
	...

080057e0 <__i2b>:
 80057e0:	b510      	push	{r4, lr}
 80057e2:	460c      	mov	r4, r1
 80057e4:	2101      	movs	r1, #1
 80057e6:	f7ff ff03 	bl	80055f0 <_Balloc>
 80057ea:	4602      	mov	r2, r0
 80057ec:	b928      	cbnz	r0, 80057fa <__i2b+0x1a>
 80057ee:	4b05      	ldr	r3, [pc, #20]	; (8005804 <__i2b+0x24>)
 80057f0:	4805      	ldr	r0, [pc, #20]	; (8005808 <__i2b+0x28>)
 80057f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80057f6:	f000 fce1 	bl	80061bc <__assert_func>
 80057fa:	2301      	movs	r3, #1
 80057fc:	6144      	str	r4, [r0, #20]
 80057fe:	6103      	str	r3, [r0, #16]
 8005800:	bd10      	pop	{r4, pc}
 8005802:	bf00      	nop
 8005804:	08006e7f 	.word	0x08006e7f
 8005808:	08006e90 	.word	0x08006e90

0800580c <__multiply>:
 800580c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005810:	4691      	mov	r9, r2
 8005812:	690a      	ldr	r2, [r1, #16]
 8005814:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005818:	429a      	cmp	r2, r3
 800581a:	bfb8      	it	lt
 800581c:	460b      	movlt	r3, r1
 800581e:	460c      	mov	r4, r1
 8005820:	bfbc      	itt	lt
 8005822:	464c      	movlt	r4, r9
 8005824:	4699      	movlt	r9, r3
 8005826:	6927      	ldr	r7, [r4, #16]
 8005828:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800582c:	68a3      	ldr	r3, [r4, #8]
 800582e:	6861      	ldr	r1, [r4, #4]
 8005830:	eb07 060a 	add.w	r6, r7, sl
 8005834:	42b3      	cmp	r3, r6
 8005836:	b085      	sub	sp, #20
 8005838:	bfb8      	it	lt
 800583a:	3101      	addlt	r1, #1
 800583c:	f7ff fed8 	bl	80055f0 <_Balloc>
 8005840:	b930      	cbnz	r0, 8005850 <__multiply+0x44>
 8005842:	4602      	mov	r2, r0
 8005844:	4b44      	ldr	r3, [pc, #272]	; (8005958 <__multiply+0x14c>)
 8005846:	4845      	ldr	r0, [pc, #276]	; (800595c <__multiply+0x150>)
 8005848:	f240 115d 	movw	r1, #349	; 0x15d
 800584c:	f000 fcb6 	bl	80061bc <__assert_func>
 8005850:	f100 0514 	add.w	r5, r0, #20
 8005854:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005858:	462b      	mov	r3, r5
 800585a:	2200      	movs	r2, #0
 800585c:	4543      	cmp	r3, r8
 800585e:	d321      	bcc.n	80058a4 <__multiply+0x98>
 8005860:	f104 0314 	add.w	r3, r4, #20
 8005864:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005868:	f109 0314 	add.w	r3, r9, #20
 800586c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005870:	9202      	str	r2, [sp, #8]
 8005872:	1b3a      	subs	r2, r7, r4
 8005874:	3a15      	subs	r2, #21
 8005876:	f022 0203 	bic.w	r2, r2, #3
 800587a:	3204      	adds	r2, #4
 800587c:	f104 0115 	add.w	r1, r4, #21
 8005880:	428f      	cmp	r7, r1
 8005882:	bf38      	it	cc
 8005884:	2204      	movcc	r2, #4
 8005886:	9201      	str	r2, [sp, #4]
 8005888:	9a02      	ldr	r2, [sp, #8]
 800588a:	9303      	str	r3, [sp, #12]
 800588c:	429a      	cmp	r2, r3
 800588e:	d80c      	bhi.n	80058aa <__multiply+0x9e>
 8005890:	2e00      	cmp	r6, #0
 8005892:	dd03      	ble.n	800589c <__multiply+0x90>
 8005894:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005898:	2b00      	cmp	r3, #0
 800589a:	d05a      	beq.n	8005952 <__multiply+0x146>
 800589c:	6106      	str	r6, [r0, #16]
 800589e:	b005      	add	sp, #20
 80058a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058a4:	f843 2b04 	str.w	r2, [r3], #4
 80058a8:	e7d8      	b.n	800585c <__multiply+0x50>
 80058aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80058ae:	f1ba 0f00 	cmp.w	sl, #0
 80058b2:	d024      	beq.n	80058fe <__multiply+0xf2>
 80058b4:	f104 0e14 	add.w	lr, r4, #20
 80058b8:	46a9      	mov	r9, r5
 80058ba:	f04f 0c00 	mov.w	ip, #0
 80058be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80058c2:	f8d9 1000 	ldr.w	r1, [r9]
 80058c6:	fa1f fb82 	uxth.w	fp, r2
 80058ca:	b289      	uxth	r1, r1
 80058cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80058d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80058d4:	f8d9 2000 	ldr.w	r2, [r9]
 80058d8:	4461      	add	r1, ip
 80058da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80058de:	fb0a c20b 	mla	r2, sl, fp, ip
 80058e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80058e6:	b289      	uxth	r1, r1
 80058e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80058ec:	4577      	cmp	r7, lr
 80058ee:	f849 1b04 	str.w	r1, [r9], #4
 80058f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80058f6:	d8e2      	bhi.n	80058be <__multiply+0xb2>
 80058f8:	9a01      	ldr	r2, [sp, #4]
 80058fa:	f845 c002 	str.w	ip, [r5, r2]
 80058fe:	9a03      	ldr	r2, [sp, #12]
 8005900:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005904:	3304      	adds	r3, #4
 8005906:	f1b9 0f00 	cmp.w	r9, #0
 800590a:	d020      	beq.n	800594e <__multiply+0x142>
 800590c:	6829      	ldr	r1, [r5, #0]
 800590e:	f104 0c14 	add.w	ip, r4, #20
 8005912:	46ae      	mov	lr, r5
 8005914:	f04f 0a00 	mov.w	sl, #0
 8005918:	f8bc b000 	ldrh.w	fp, [ip]
 800591c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005920:	fb09 220b 	mla	r2, r9, fp, r2
 8005924:	4492      	add	sl, r2
 8005926:	b289      	uxth	r1, r1
 8005928:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800592c:	f84e 1b04 	str.w	r1, [lr], #4
 8005930:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005934:	f8be 1000 	ldrh.w	r1, [lr]
 8005938:	0c12      	lsrs	r2, r2, #16
 800593a:	fb09 1102 	mla	r1, r9, r2, r1
 800593e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005942:	4567      	cmp	r7, ip
 8005944:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005948:	d8e6      	bhi.n	8005918 <__multiply+0x10c>
 800594a:	9a01      	ldr	r2, [sp, #4]
 800594c:	50a9      	str	r1, [r5, r2]
 800594e:	3504      	adds	r5, #4
 8005950:	e79a      	b.n	8005888 <__multiply+0x7c>
 8005952:	3e01      	subs	r6, #1
 8005954:	e79c      	b.n	8005890 <__multiply+0x84>
 8005956:	bf00      	nop
 8005958:	08006e7f 	.word	0x08006e7f
 800595c:	08006e90 	.word	0x08006e90

08005960 <__pow5mult>:
 8005960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005964:	4615      	mov	r5, r2
 8005966:	f012 0203 	ands.w	r2, r2, #3
 800596a:	4606      	mov	r6, r0
 800596c:	460f      	mov	r7, r1
 800596e:	d007      	beq.n	8005980 <__pow5mult+0x20>
 8005970:	4c25      	ldr	r4, [pc, #148]	; (8005a08 <__pow5mult+0xa8>)
 8005972:	3a01      	subs	r2, #1
 8005974:	2300      	movs	r3, #0
 8005976:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800597a:	f7ff fe9b 	bl	80056b4 <__multadd>
 800597e:	4607      	mov	r7, r0
 8005980:	10ad      	asrs	r5, r5, #2
 8005982:	d03d      	beq.n	8005a00 <__pow5mult+0xa0>
 8005984:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005986:	b97c      	cbnz	r4, 80059a8 <__pow5mult+0x48>
 8005988:	2010      	movs	r0, #16
 800598a:	f7ff fe1b 	bl	80055c4 <malloc>
 800598e:	4602      	mov	r2, r0
 8005990:	6270      	str	r0, [r6, #36]	; 0x24
 8005992:	b928      	cbnz	r0, 80059a0 <__pow5mult+0x40>
 8005994:	4b1d      	ldr	r3, [pc, #116]	; (8005a0c <__pow5mult+0xac>)
 8005996:	481e      	ldr	r0, [pc, #120]	; (8005a10 <__pow5mult+0xb0>)
 8005998:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800599c:	f000 fc0e 	bl	80061bc <__assert_func>
 80059a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80059a4:	6004      	str	r4, [r0, #0]
 80059a6:	60c4      	str	r4, [r0, #12]
 80059a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80059ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80059b0:	b94c      	cbnz	r4, 80059c6 <__pow5mult+0x66>
 80059b2:	f240 2171 	movw	r1, #625	; 0x271
 80059b6:	4630      	mov	r0, r6
 80059b8:	f7ff ff12 	bl	80057e0 <__i2b>
 80059bc:	2300      	movs	r3, #0
 80059be:	f8c8 0008 	str.w	r0, [r8, #8]
 80059c2:	4604      	mov	r4, r0
 80059c4:	6003      	str	r3, [r0, #0]
 80059c6:	f04f 0900 	mov.w	r9, #0
 80059ca:	07eb      	lsls	r3, r5, #31
 80059cc:	d50a      	bpl.n	80059e4 <__pow5mult+0x84>
 80059ce:	4639      	mov	r1, r7
 80059d0:	4622      	mov	r2, r4
 80059d2:	4630      	mov	r0, r6
 80059d4:	f7ff ff1a 	bl	800580c <__multiply>
 80059d8:	4639      	mov	r1, r7
 80059da:	4680      	mov	r8, r0
 80059dc:	4630      	mov	r0, r6
 80059de:	f7ff fe47 	bl	8005670 <_Bfree>
 80059e2:	4647      	mov	r7, r8
 80059e4:	106d      	asrs	r5, r5, #1
 80059e6:	d00b      	beq.n	8005a00 <__pow5mult+0xa0>
 80059e8:	6820      	ldr	r0, [r4, #0]
 80059ea:	b938      	cbnz	r0, 80059fc <__pow5mult+0x9c>
 80059ec:	4622      	mov	r2, r4
 80059ee:	4621      	mov	r1, r4
 80059f0:	4630      	mov	r0, r6
 80059f2:	f7ff ff0b 	bl	800580c <__multiply>
 80059f6:	6020      	str	r0, [r4, #0]
 80059f8:	f8c0 9000 	str.w	r9, [r0]
 80059fc:	4604      	mov	r4, r0
 80059fe:	e7e4      	b.n	80059ca <__pow5mult+0x6a>
 8005a00:	4638      	mov	r0, r7
 8005a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a06:	bf00      	nop
 8005a08:	08006fe0 	.word	0x08006fe0
 8005a0c:	08006e0d 	.word	0x08006e0d
 8005a10:	08006e90 	.word	0x08006e90

08005a14 <__lshift>:
 8005a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a18:	460c      	mov	r4, r1
 8005a1a:	6849      	ldr	r1, [r1, #4]
 8005a1c:	6923      	ldr	r3, [r4, #16]
 8005a1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005a22:	68a3      	ldr	r3, [r4, #8]
 8005a24:	4607      	mov	r7, r0
 8005a26:	4691      	mov	r9, r2
 8005a28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005a2c:	f108 0601 	add.w	r6, r8, #1
 8005a30:	42b3      	cmp	r3, r6
 8005a32:	db0b      	blt.n	8005a4c <__lshift+0x38>
 8005a34:	4638      	mov	r0, r7
 8005a36:	f7ff fddb 	bl	80055f0 <_Balloc>
 8005a3a:	4605      	mov	r5, r0
 8005a3c:	b948      	cbnz	r0, 8005a52 <__lshift+0x3e>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	4b2a      	ldr	r3, [pc, #168]	; (8005aec <__lshift+0xd8>)
 8005a42:	482b      	ldr	r0, [pc, #172]	; (8005af0 <__lshift+0xdc>)
 8005a44:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005a48:	f000 fbb8 	bl	80061bc <__assert_func>
 8005a4c:	3101      	adds	r1, #1
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	e7ee      	b.n	8005a30 <__lshift+0x1c>
 8005a52:	2300      	movs	r3, #0
 8005a54:	f100 0114 	add.w	r1, r0, #20
 8005a58:	f100 0210 	add.w	r2, r0, #16
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	4553      	cmp	r3, sl
 8005a60:	db37      	blt.n	8005ad2 <__lshift+0xbe>
 8005a62:	6920      	ldr	r0, [r4, #16]
 8005a64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a68:	f104 0314 	add.w	r3, r4, #20
 8005a6c:	f019 091f 	ands.w	r9, r9, #31
 8005a70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005a78:	d02f      	beq.n	8005ada <__lshift+0xc6>
 8005a7a:	f1c9 0e20 	rsb	lr, r9, #32
 8005a7e:	468a      	mov	sl, r1
 8005a80:	f04f 0c00 	mov.w	ip, #0
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	fa02 f209 	lsl.w	r2, r2, r9
 8005a8a:	ea42 020c 	orr.w	r2, r2, ip
 8005a8e:	f84a 2b04 	str.w	r2, [sl], #4
 8005a92:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a96:	4298      	cmp	r0, r3
 8005a98:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005a9c:	d8f2      	bhi.n	8005a84 <__lshift+0x70>
 8005a9e:	1b03      	subs	r3, r0, r4
 8005aa0:	3b15      	subs	r3, #21
 8005aa2:	f023 0303 	bic.w	r3, r3, #3
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	f104 0215 	add.w	r2, r4, #21
 8005aac:	4290      	cmp	r0, r2
 8005aae:	bf38      	it	cc
 8005ab0:	2304      	movcc	r3, #4
 8005ab2:	f841 c003 	str.w	ip, [r1, r3]
 8005ab6:	f1bc 0f00 	cmp.w	ip, #0
 8005aba:	d001      	beq.n	8005ac0 <__lshift+0xac>
 8005abc:	f108 0602 	add.w	r6, r8, #2
 8005ac0:	3e01      	subs	r6, #1
 8005ac2:	4638      	mov	r0, r7
 8005ac4:	612e      	str	r6, [r5, #16]
 8005ac6:	4621      	mov	r1, r4
 8005ac8:	f7ff fdd2 	bl	8005670 <_Bfree>
 8005acc:	4628      	mov	r0, r5
 8005ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ad2:	f842 0f04 	str.w	r0, [r2, #4]!
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	e7c1      	b.n	8005a5e <__lshift+0x4a>
 8005ada:	3904      	subs	r1, #4
 8005adc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ae0:	f841 2f04 	str.w	r2, [r1, #4]!
 8005ae4:	4298      	cmp	r0, r3
 8005ae6:	d8f9      	bhi.n	8005adc <__lshift+0xc8>
 8005ae8:	e7ea      	b.n	8005ac0 <__lshift+0xac>
 8005aea:	bf00      	nop
 8005aec:	08006e7f 	.word	0x08006e7f
 8005af0:	08006e90 	.word	0x08006e90

08005af4 <__mcmp>:
 8005af4:	b530      	push	{r4, r5, lr}
 8005af6:	6902      	ldr	r2, [r0, #16]
 8005af8:	690c      	ldr	r4, [r1, #16]
 8005afa:	1b12      	subs	r2, r2, r4
 8005afc:	d10e      	bne.n	8005b1c <__mcmp+0x28>
 8005afe:	f100 0314 	add.w	r3, r0, #20
 8005b02:	3114      	adds	r1, #20
 8005b04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005b08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005b0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005b10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005b14:	42a5      	cmp	r5, r4
 8005b16:	d003      	beq.n	8005b20 <__mcmp+0x2c>
 8005b18:	d305      	bcc.n	8005b26 <__mcmp+0x32>
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	bd30      	pop	{r4, r5, pc}
 8005b20:	4283      	cmp	r3, r0
 8005b22:	d3f3      	bcc.n	8005b0c <__mcmp+0x18>
 8005b24:	e7fa      	b.n	8005b1c <__mcmp+0x28>
 8005b26:	f04f 32ff 	mov.w	r2, #4294967295
 8005b2a:	e7f7      	b.n	8005b1c <__mcmp+0x28>

08005b2c <__mdiff>:
 8005b2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b30:	460c      	mov	r4, r1
 8005b32:	4606      	mov	r6, r0
 8005b34:	4611      	mov	r1, r2
 8005b36:	4620      	mov	r0, r4
 8005b38:	4690      	mov	r8, r2
 8005b3a:	f7ff ffdb 	bl	8005af4 <__mcmp>
 8005b3e:	1e05      	subs	r5, r0, #0
 8005b40:	d110      	bne.n	8005b64 <__mdiff+0x38>
 8005b42:	4629      	mov	r1, r5
 8005b44:	4630      	mov	r0, r6
 8005b46:	f7ff fd53 	bl	80055f0 <_Balloc>
 8005b4a:	b930      	cbnz	r0, 8005b5a <__mdiff+0x2e>
 8005b4c:	4b3a      	ldr	r3, [pc, #232]	; (8005c38 <__mdiff+0x10c>)
 8005b4e:	4602      	mov	r2, r0
 8005b50:	f240 2132 	movw	r1, #562	; 0x232
 8005b54:	4839      	ldr	r0, [pc, #228]	; (8005c3c <__mdiff+0x110>)
 8005b56:	f000 fb31 	bl	80061bc <__assert_func>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005b60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b64:	bfa4      	itt	ge
 8005b66:	4643      	movge	r3, r8
 8005b68:	46a0      	movge	r8, r4
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005b70:	bfa6      	itte	ge
 8005b72:	461c      	movge	r4, r3
 8005b74:	2500      	movge	r5, #0
 8005b76:	2501      	movlt	r5, #1
 8005b78:	f7ff fd3a 	bl	80055f0 <_Balloc>
 8005b7c:	b920      	cbnz	r0, 8005b88 <__mdiff+0x5c>
 8005b7e:	4b2e      	ldr	r3, [pc, #184]	; (8005c38 <__mdiff+0x10c>)
 8005b80:	4602      	mov	r2, r0
 8005b82:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005b86:	e7e5      	b.n	8005b54 <__mdiff+0x28>
 8005b88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005b8c:	6926      	ldr	r6, [r4, #16]
 8005b8e:	60c5      	str	r5, [r0, #12]
 8005b90:	f104 0914 	add.w	r9, r4, #20
 8005b94:	f108 0514 	add.w	r5, r8, #20
 8005b98:	f100 0e14 	add.w	lr, r0, #20
 8005b9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005ba0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005ba4:	f108 0210 	add.w	r2, r8, #16
 8005ba8:	46f2      	mov	sl, lr
 8005baa:	2100      	movs	r1, #0
 8005bac:	f859 3b04 	ldr.w	r3, [r9], #4
 8005bb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005bb4:	fa1f f883 	uxth.w	r8, r3
 8005bb8:	fa11 f18b 	uxtah	r1, r1, fp
 8005bbc:	0c1b      	lsrs	r3, r3, #16
 8005bbe:	eba1 0808 	sub.w	r8, r1, r8
 8005bc2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005bc6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005bca:	fa1f f888 	uxth.w	r8, r8
 8005bce:	1419      	asrs	r1, r3, #16
 8005bd0:	454e      	cmp	r6, r9
 8005bd2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005bd6:	f84a 3b04 	str.w	r3, [sl], #4
 8005bda:	d8e7      	bhi.n	8005bac <__mdiff+0x80>
 8005bdc:	1b33      	subs	r3, r6, r4
 8005bde:	3b15      	subs	r3, #21
 8005be0:	f023 0303 	bic.w	r3, r3, #3
 8005be4:	3304      	adds	r3, #4
 8005be6:	3415      	adds	r4, #21
 8005be8:	42a6      	cmp	r6, r4
 8005bea:	bf38      	it	cc
 8005bec:	2304      	movcc	r3, #4
 8005bee:	441d      	add	r5, r3
 8005bf0:	4473      	add	r3, lr
 8005bf2:	469e      	mov	lr, r3
 8005bf4:	462e      	mov	r6, r5
 8005bf6:	4566      	cmp	r6, ip
 8005bf8:	d30e      	bcc.n	8005c18 <__mdiff+0xec>
 8005bfa:	f10c 0203 	add.w	r2, ip, #3
 8005bfe:	1b52      	subs	r2, r2, r5
 8005c00:	f022 0203 	bic.w	r2, r2, #3
 8005c04:	3d03      	subs	r5, #3
 8005c06:	45ac      	cmp	ip, r5
 8005c08:	bf38      	it	cc
 8005c0a:	2200      	movcc	r2, #0
 8005c0c:	441a      	add	r2, r3
 8005c0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005c12:	b17b      	cbz	r3, 8005c34 <__mdiff+0x108>
 8005c14:	6107      	str	r7, [r0, #16]
 8005c16:	e7a3      	b.n	8005b60 <__mdiff+0x34>
 8005c18:	f856 8b04 	ldr.w	r8, [r6], #4
 8005c1c:	fa11 f288 	uxtah	r2, r1, r8
 8005c20:	1414      	asrs	r4, r2, #16
 8005c22:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005c26:	b292      	uxth	r2, r2
 8005c28:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005c2c:	f84e 2b04 	str.w	r2, [lr], #4
 8005c30:	1421      	asrs	r1, r4, #16
 8005c32:	e7e0      	b.n	8005bf6 <__mdiff+0xca>
 8005c34:	3f01      	subs	r7, #1
 8005c36:	e7ea      	b.n	8005c0e <__mdiff+0xe2>
 8005c38:	08006e7f 	.word	0x08006e7f
 8005c3c:	08006e90 	.word	0x08006e90

08005c40 <__d2b>:
 8005c40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005c44:	4689      	mov	r9, r1
 8005c46:	2101      	movs	r1, #1
 8005c48:	ec57 6b10 	vmov	r6, r7, d0
 8005c4c:	4690      	mov	r8, r2
 8005c4e:	f7ff fccf 	bl	80055f0 <_Balloc>
 8005c52:	4604      	mov	r4, r0
 8005c54:	b930      	cbnz	r0, 8005c64 <__d2b+0x24>
 8005c56:	4602      	mov	r2, r0
 8005c58:	4b25      	ldr	r3, [pc, #148]	; (8005cf0 <__d2b+0xb0>)
 8005c5a:	4826      	ldr	r0, [pc, #152]	; (8005cf4 <__d2b+0xb4>)
 8005c5c:	f240 310a 	movw	r1, #778	; 0x30a
 8005c60:	f000 faac 	bl	80061bc <__assert_func>
 8005c64:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005c68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005c6c:	bb35      	cbnz	r5, 8005cbc <__d2b+0x7c>
 8005c6e:	2e00      	cmp	r6, #0
 8005c70:	9301      	str	r3, [sp, #4]
 8005c72:	d028      	beq.n	8005cc6 <__d2b+0x86>
 8005c74:	4668      	mov	r0, sp
 8005c76:	9600      	str	r6, [sp, #0]
 8005c78:	f7ff fd82 	bl	8005780 <__lo0bits>
 8005c7c:	9900      	ldr	r1, [sp, #0]
 8005c7e:	b300      	cbz	r0, 8005cc2 <__d2b+0x82>
 8005c80:	9a01      	ldr	r2, [sp, #4]
 8005c82:	f1c0 0320 	rsb	r3, r0, #32
 8005c86:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8a:	430b      	orrs	r3, r1
 8005c8c:	40c2      	lsrs	r2, r0
 8005c8e:	6163      	str	r3, [r4, #20]
 8005c90:	9201      	str	r2, [sp, #4]
 8005c92:	9b01      	ldr	r3, [sp, #4]
 8005c94:	61a3      	str	r3, [r4, #24]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	bf14      	ite	ne
 8005c9a:	2202      	movne	r2, #2
 8005c9c:	2201      	moveq	r2, #1
 8005c9e:	6122      	str	r2, [r4, #16]
 8005ca0:	b1d5      	cbz	r5, 8005cd8 <__d2b+0x98>
 8005ca2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005ca6:	4405      	add	r5, r0
 8005ca8:	f8c9 5000 	str.w	r5, [r9]
 8005cac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005cb0:	f8c8 0000 	str.w	r0, [r8]
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	b003      	add	sp, #12
 8005cb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005cbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cc0:	e7d5      	b.n	8005c6e <__d2b+0x2e>
 8005cc2:	6161      	str	r1, [r4, #20]
 8005cc4:	e7e5      	b.n	8005c92 <__d2b+0x52>
 8005cc6:	a801      	add	r0, sp, #4
 8005cc8:	f7ff fd5a 	bl	8005780 <__lo0bits>
 8005ccc:	9b01      	ldr	r3, [sp, #4]
 8005cce:	6163      	str	r3, [r4, #20]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	6122      	str	r2, [r4, #16]
 8005cd4:	3020      	adds	r0, #32
 8005cd6:	e7e3      	b.n	8005ca0 <__d2b+0x60>
 8005cd8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005cdc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005ce0:	f8c9 0000 	str.w	r0, [r9]
 8005ce4:	6918      	ldr	r0, [r3, #16]
 8005ce6:	f7ff fd2b 	bl	8005740 <__hi0bits>
 8005cea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005cee:	e7df      	b.n	8005cb0 <__d2b+0x70>
 8005cf0:	08006e7f 	.word	0x08006e7f
 8005cf4:	08006e90 	.word	0x08006e90

08005cf8 <_calloc_r>:
 8005cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cfa:	fba1 2402 	umull	r2, r4, r1, r2
 8005cfe:	b94c      	cbnz	r4, 8005d14 <_calloc_r+0x1c>
 8005d00:	4611      	mov	r1, r2
 8005d02:	9201      	str	r2, [sp, #4]
 8005d04:	f000 f87a 	bl	8005dfc <_malloc_r>
 8005d08:	9a01      	ldr	r2, [sp, #4]
 8005d0a:	4605      	mov	r5, r0
 8005d0c:	b930      	cbnz	r0, 8005d1c <_calloc_r+0x24>
 8005d0e:	4628      	mov	r0, r5
 8005d10:	b003      	add	sp, #12
 8005d12:	bd30      	pop	{r4, r5, pc}
 8005d14:	220c      	movs	r2, #12
 8005d16:	6002      	str	r2, [r0, #0]
 8005d18:	2500      	movs	r5, #0
 8005d1a:	e7f8      	b.n	8005d0e <_calloc_r+0x16>
 8005d1c:	4621      	mov	r1, r4
 8005d1e:	f7fe f941 	bl	8003fa4 <memset>
 8005d22:	e7f4      	b.n	8005d0e <_calloc_r+0x16>

08005d24 <_free_r>:
 8005d24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d26:	2900      	cmp	r1, #0
 8005d28:	d044      	beq.n	8005db4 <_free_r+0x90>
 8005d2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d2e:	9001      	str	r0, [sp, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f1a1 0404 	sub.w	r4, r1, #4
 8005d36:	bfb8      	it	lt
 8005d38:	18e4      	addlt	r4, r4, r3
 8005d3a:	f000 fa9b 	bl	8006274 <__malloc_lock>
 8005d3e:	4a1e      	ldr	r2, [pc, #120]	; (8005db8 <_free_r+0x94>)
 8005d40:	9801      	ldr	r0, [sp, #4]
 8005d42:	6813      	ldr	r3, [r2, #0]
 8005d44:	b933      	cbnz	r3, 8005d54 <_free_r+0x30>
 8005d46:	6063      	str	r3, [r4, #4]
 8005d48:	6014      	str	r4, [r2, #0]
 8005d4a:	b003      	add	sp, #12
 8005d4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d50:	f000 ba96 	b.w	8006280 <__malloc_unlock>
 8005d54:	42a3      	cmp	r3, r4
 8005d56:	d908      	bls.n	8005d6a <_free_r+0x46>
 8005d58:	6825      	ldr	r5, [r4, #0]
 8005d5a:	1961      	adds	r1, r4, r5
 8005d5c:	428b      	cmp	r3, r1
 8005d5e:	bf01      	itttt	eq
 8005d60:	6819      	ldreq	r1, [r3, #0]
 8005d62:	685b      	ldreq	r3, [r3, #4]
 8005d64:	1949      	addeq	r1, r1, r5
 8005d66:	6021      	streq	r1, [r4, #0]
 8005d68:	e7ed      	b.n	8005d46 <_free_r+0x22>
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	b10b      	cbz	r3, 8005d74 <_free_r+0x50>
 8005d70:	42a3      	cmp	r3, r4
 8005d72:	d9fa      	bls.n	8005d6a <_free_r+0x46>
 8005d74:	6811      	ldr	r1, [r2, #0]
 8005d76:	1855      	adds	r5, r2, r1
 8005d78:	42a5      	cmp	r5, r4
 8005d7a:	d10b      	bne.n	8005d94 <_free_r+0x70>
 8005d7c:	6824      	ldr	r4, [r4, #0]
 8005d7e:	4421      	add	r1, r4
 8005d80:	1854      	adds	r4, r2, r1
 8005d82:	42a3      	cmp	r3, r4
 8005d84:	6011      	str	r1, [r2, #0]
 8005d86:	d1e0      	bne.n	8005d4a <_free_r+0x26>
 8005d88:	681c      	ldr	r4, [r3, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	6053      	str	r3, [r2, #4]
 8005d8e:	4421      	add	r1, r4
 8005d90:	6011      	str	r1, [r2, #0]
 8005d92:	e7da      	b.n	8005d4a <_free_r+0x26>
 8005d94:	d902      	bls.n	8005d9c <_free_r+0x78>
 8005d96:	230c      	movs	r3, #12
 8005d98:	6003      	str	r3, [r0, #0]
 8005d9a:	e7d6      	b.n	8005d4a <_free_r+0x26>
 8005d9c:	6825      	ldr	r5, [r4, #0]
 8005d9e:	1961      	adds	r1, r4, r5
 8005da0:	428b      	cmp	r3, r1
 8005da2:	bf04      	itt	eq
 8005da4:	6819      	ldreq	r1, [r3, #0]
 8005da6:	685b      	ldreq	r3, [r3, #4]
 8005da8:	6063      	str	r3, [r4, #4]
 8005daa:	bf04      	itt	eq
 8005dac:	1949      	addeq	r1, r1, r5
 8005dae:	6021      	streq	r1, [r4, #0]
 8005db0:	6054      	str	r4, [r2, #4]
 8005db2:	e7ca      	b.n	8005d4a <_free_r+0x26>
 8005db4:	b003      	add	sp, #12
 8005db6:	bd30      	pop	{r4, r5, pc}
 8005db8:	200002ac 	.word	0x200002ac

08005dbc <sbrk_aligned>:
 8005dbc:	b570      	push	{r4, r5, r6, lr}
 8005dbe:	4e0e      	ldr	r6, [pc, #56]	; (8005df8 <sbrk_aligned+0x3c>)
 8005dc0:	460c      	mov	r4, r1
 8005dc2:	6831      	ldr	r1, [r6, #0]
 8005dc4:	4605      	mov	r5, r0
 8005dc6:	b911      	cbnz	r1, 8005dce <sbrk_aligned+0x12>
 8005dc8:	f000 f9e8 	bl	800619c <_sbrk_r>
 8005dcc:	6030      	str	r0, [r6, #0]
 8005dce:	4621      	mov	r1, r4
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	f000 f9e3 	bl	800619c <_sbrk_r>
 8005dd6:	1c43      	adds	r3, r0, #1
 8005dd8:	d00a      	beq.n	8005df0 <sbrk_aligned+0x34>
 8005dda:	1cc4      	adds	r4, r0, #3
 8005ddc:	f024 0403 	bic.w	r4, r4, #3
 8005de0:	42a0      	cmp	r0, r4
 8005de2:	d007      	beq.n	8005df4 <sbrk_aligned+0x38>
 8005de4:	1a21      	subs	r1, r4, r0
 8005de6:	4628      	mov	r0, r5
 8005de8:	f000 f9d8 	bl	800619c <_sbrk_r>
 8005dec:	3001      	adds	r0, #1
 8005dee:	d101      	bne.n	8005df4 <sbrk_aligned+0x38>
 8005df0:	f04f 34ff 	mov.w	r4, #4294967295
 8005df4:	4620      	mov	r0, r4
 8005df6:	bd70      	pop	{r4, r5, r6, pc}
 8005df8:	200002b0 	.word	0x200002b0

08005dfc <_malloc_r>:
 8005dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e00:	1ccd      	adds	r5, r1, #3
 8005e02:	f025 0503 	bic.w	r5, r5, #3
 8005e06:	3508      	adds	r5, #8
 8005e08:	2d0c      	cmp	r5, #12
 8005e0a:	bf38      	it	cc
 8005e0c:	250c      	movcc	r5, #12
 8005e0e:	2d00      	cmp	r5, #0
 8005e10:	4607      	mov	r7, r0
 8005e12:	db01      	blt.n	8005e18 <_malloc_r+0x1c>
 8005e14:	42a9      	cmp	r1, r5
 8005e16:	d905      	bls.n	8005e24 <_malloc_r+0x28>
 8005e18:	230c      	movs	r3, #12
 8005e1a:	603b      	str	r3, [r7, #0]
 8005e1c:	2600      	movs	r6, #0
 8005e1e:	4630      	mov	r0, r6
 8005e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e24:	4e2e      	ldr	r6, [pc, #184]	; (8005ee0 <_malloc_r+0xe4>)
 8005e26:	f000 fa25 	bl	8006274 <__malloc_lock>
 8005e2a:	6833      	ldr	r3, [r6, #0]
 8005e2c:	461c      	mov	r4, r3
 8005e2e:	bb34      	cbnz	r4, 8005e7e <_malloc_r+0x82>
 8005e30:	4629      	mov	r1, r5
 8005e32:	4638      	mov	r0, r7
 8005e34:	f7ff ffc2 	bl	8005dbc <sbrk_aligned>
 8005e38:	1c43      	adds	r3, r0, #1
 8005e3a:	4604      	mov	r4, r0
 8005e3c:	d14d      	bne.n	8005eda <_malloc_r+0xde>
 8005e3e:	6834      	ldr	r4, [r6, #0]
 8005e40:	4626      	mov	r6, r4
 8005e42:	2e00      	cmp	r6, #0
 8005e44:	d140      	bne.n	8005ec8 <_malloc_r+0xcc>
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	4631      	mov	r1, r6
 8005e4a:	4638      	mov	r0, r7
 8005e4c:	eb04 0803 	add.w	r8, r4, r3
 8005e50:	f000 f9a4 	bl	800619c <_sbrk_r>
 8005e54:	4580      	cmp	r8, r0
 8005e56:	d13a      	bne.n	8005ece <_malloc_r+0xd2>
 8005e58:	6821      	ldr	r1, [r4, #0]
 8005e5a:	3503      	adds	r5, #3
 8005e5c:	1a6d      	subs	r5, r5, r1
 8005e5e:	f025 0503 	bic.w	r5, r5, #3
 8005e62:	3508      	adds	r5, #8
 8005e64:	2d0c      	cmp	r5, #12
 8005e66:	bf38      	it	cc
 8005e68:	250c      	movcc	r5, #12
 8005e6a:	4629      	mov	r1, r5
 8005e6c:	4638      	mov	r0, r7
 8005e6e:	f7ff ffa5 	bl	8005dbc <sbrk_aligned>
 8005e72:	3001      	adds	r0, #1
 8005e74:	d02b      	beq.n	8005ece <_malloc_r+0xd2>
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	442b      	add	r3, r5
 8005e7a:	6023      	str	r3, [r4, #0]
 8005e7c:	e00e      	b.n	8005e9c <_malloc_r+0xa0>
 8005e7e:	6822      	ldr	r2, [r4, #0]
 8005e80:	1b52      	subs	r2, r2, r5
 8005e82:	d41e      	bmi.n	8005ec2 <_malloc_r+0xc6>
 8005e84:	2a0b      	cmp	r2, #11
 8005e86:	d916      	bls.n	8005eb6 <_malloc_r+0xba>
 8005e88:	1961      	adds	r1, r4, r5
 8005e8a:	42a3      	cmp	r3, r4
 8005e8c:	6025      	str	r5, [r4, #0]
 8005e8e:	bf18      	it	ne
 8005e90:	6059      	strne	r1, [r3, #4]
 8005e92:	6863      	ldr	r3, [r4, #4]
 8005e94:	bf08      	it	eq
 8005e96:	6031      	streq	r1, [r6, #0]
 8005e98:	5162      	str	r2, [r4, r5]
 8005e9a:	604b      	str	r3, [r1, #4]
 8005e9c:	4638      	mov	r0, r7
 8005e9e:	f104 060b 	add.w	r6, r4, #11
 8005ea2:	f000 f9ed 	bl	8006280 <__malloc_unlock>
 8005ea6:	f026 0607 	bic.w	r6, r6, #7
 8005eaa:	1d23      	adds	r3, r4, #4
 8005eac:	1af2      	subs	r2, r6, r3
 8005eae:	d0b6      	beq.n	8005e1e <_malloc_r+0x22>
 8005eb0:	1b9b      	subs	r3, r3, r6
 8005eb2:	50a3      	str	r3, [r4, r2]
 8005eb4:	e7b3      	b.n	8005e1e <_malloc_r+0x22>
 8005eb6:	6862      	ldr	r2, [r4, #4]
 8005eb8:	42a3      	cmp	r3, r4
 8005eba:	bf0c      	ite	eq
 8005ebc:	6032      	streq	r2, [r6, #0]
 8005ebe:	605a      	strne	r2, [r3, #4]
 8005ec0:	e7ec      	b.n	8005e9c <_malloc_r+0xa0>
 8005ec2:	4623      	mov	r3, r4
 8005ec4:	6864      	ldr	r4, [r4, #4]
 8005ec6:	e7b2      	b.n	8005e2e <_malloc_r+0x32>
 8005ec8:	4634      	mov	r4, r6
 8005eca:	6876      	ldr	r6, [r6, #4]
 8005ecc:	e7b9      	b.n	8005e42 <_malloc_r+0x46>
 8005ece:	230c      	movs	r3, #12
 8005ed0:	603b      	str	r3, [r7, #0]
 8005ed2:	4638      	mov	r0, r7
 8005ed4:	f000 f9d4 	bl	8006280 <__malloc_unlock>
 8005ed8:	e7a1      	b.n	8005e1e <_malloc_r+0x22>
 8005eda:	6025      	str	r5, [r4, #0]
 8005edc:	e7de      	b.n	8005e9c <_malloc_r+0xa0>
 8005ede:	bf00      	nop
 8005ee0:	200002ac 	.word	0x200002ac

08005ee4 <__ssputs_r>:
 8005ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee8:	688e      	ldr	r6, [r1, #8]
 8005eea:	429e      	cmp	r6, r3
 8005eec:	4682      	mov	sl, r0
 8005eee:	460c      	mov	r4, r1
 8005ef0:	4690      	mov	r8, r2
 8005ef2:	461f      	mov	r7, r3
 8005ef4:	d838      	bhi.n	8005f68 <__ssputs_r+0x84>
 8005ef6:	898a      	ldrh	r2, [r1, #12]
 8005ef8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005efc:	d032      	beq.n	8005f64 <__ssputs_r+0x80>
 8005efe:	6825      	ldr	r5, [r4, #0]
 8005f00:	6909      	ldr	r1, [r1, #16]
 8005f02:	eba5 0901 	sub.w	r9, r5, r1
 8005f06:	6965      	ldr	r5, [r4, #20]
 8005f08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f10:	3301      	adds	r3, #1
 8005f12:	444b      	add	r3, r9
 8005f14:	106d      	asrs	r5, r5, #1
 8005f16:	429d      	cmp	r5, r3
 8005f18:	bf38      	it	cc
 8005f1a:	461d      	movcc	r5, r3
 8005f1c:	0553      	lsls	r3, r2, #21
 8005f1e:	d531      	bpl.n	8005f84 <__ssputs_r+0xa0>
 8005f20:	4629      	mov	r1, r5
 8005f22:	f7ff ff6b 	bl	8005dfc <_malloc_r>
 8005f26:	4606      	mov	r6, r0
 8005f28:	b950      	cbnz	r0, 8005f40 <__ssputs_r+0x5c>
 8005f2a:	230c      	movs	r3, #12
 8005f2c:	f8ca 3000 	str.w	r3, [sl]
 8005f30:	89a3      	ldrh	r3, [r4, #12]
 8005f32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f36:	81a3      	strh	r3, [r4, #12]
 8005f38:	f04f 30ff 	mov.w	r0, #4294967295
 8005f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f40:	6921      	ldr	r1, [r4, #16]
 8005f42:	464a      	mov	r2, r9
 8005f44:	f7ff fb46 	bl	80055d4 <memcpy>
 8005f48:	89a3      	ldrh	r3, [r4, #12]
 8005f4a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f52:	81a3      	strh	r3, [r4, #12]
 8005f54:	6126      	str	r6, [r4, #16]
 8005f56:	6165      	str	r5, [r4, #20]
 8005f58:	444e      	add	r6, r9
 8005f5a:	eba5 0509 	sub.w	r5, r5, r9
 8005f5e:	6026      	str	r6, [r4, #0]
 8005f60:	60a5      	str	r5, [r4, #8]
 8005f62:	463e      	mov	r6, r7
 8005f64:	42be      	cmp	r6, r7
 8005f66:	d900      	bls.n	8005f6a <__ssputs_r+0x86>
 8005f68:	463e      	mov	r6, r7
 8005f6a:	6820      	ldr	r0, [r4, #0]
 8005f6c:	4632      	mov	r2, r6
 8005f6e:	4641      	mov	r1, r8
 8005f70:	f000 f966 	bl	8006240 <memmove>
 8005f74:	68a3      	ldr	r3, [r4, #8]
 8005f76:	1b9b      	subs	r3, r3, r6
 8005f78:	60a3      	str	r3, [r4, #8]
 8005f7a:	6823      	ldr	r3, [r4, #0]
 8005f7c:	4433      	add	r3, r6
 8005f7e:	6023      	str	r3, [r4, #0]
 8005f80:	2000      	movs	r0, #0
 8005f82:	e7db      	b.n	8005f3c <__ssputs_r+0x58>
 8005f84:	462a      	mov	r2, r5
 8005f86:	f000 f981 	bl	800628c <_realloc_r>
 8005f8a:	4606      	mov	r6, r0
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	d1e1      	bne.n	8005f54 <__ssputs_r+0x70>
 8005f90:	6921      	ldr	r1, [r4, #16]
 8005f92:	4650      	mov	r0, sl
 8005f94:	f7ff fec6 	bl	8005d24 <_free_r>
 8005f98:	e7c7      	b.n	8005f2a <__ssputs_r+0x46>
	...

08005f9c <_svfiprintf_r>:
 8005f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa0:	4698      	mov	r8, r3
 8005fa2:	898b      	ldrh	r3, [r1, #12]
 8005fa4:	061b      	lsls	r3, r3, #24
 8005fa6:	b09d      	sub	sp, #116	; 0x74
 8005fa8:	4607      	mov	r7, r0
 8005faa:	460d      	mov	r5, r1
 8005fac:	4614      	mov	r4, r2
 8005fae:	d50e      	bpl.n	8005fce <_svfiprintf_r+0x32>
 8005fb0:	690b      	ldr	r3, [r1, #16]
 8005fb2:	b963      	cbnz	r3, 8005fce <_svfiprintf_r+0x32>
 8005fb4:	2140      	movs	r1, #64	; 0x40
 8005fb6:	f7ff ff21 	bl	8005dfc <_malloc_r>
 8005fba:	6028      	str	r0, [r5, #0]
 8005fbc:	6128      	str	r0, [r5, #16]
 8005fbe:	b920      	cbnz	r0, 8005fca <_svfiprintf_r+0x2e>
 8005fc0:	230c      	movs	r3, #12
 8005fc2:	603b      	str	r3, [r7, #0]
 8005fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fc8:	e0d1      	b.n	800616e <_svfiprintf_r+0x1d2>
 8005fca:	2340      	movs	r3, #64	; 0x40
 8005fcc:	616b      	str	r3, [r5, #20]
 8005fce:	2300      	movs	r3, #0
 8005fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8005fd2:	2320      	movs	r3, #32
 8005fd4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fdc:	2330      	movs	r3, #48	; 0x30
 8005fde:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006188 <_svfiprintf_r+0x1ec>
 8005fe2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fe6:	f04f 0901 	mov.w	r9, #1
 8005fea:	4623      	mov	r3, r4
 8005fec:	469a      	mov	sl, r3
 8005fee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ff2:	b10a      	cbz	r2, 8005ff8 <_svfiprintf_r+0x5c>
 8005ff4:	2a25      	cmp	r2, #37	; 0x25
 8005ff6:	d1f9      	bne.n	8005fec <_svfiprintf_r+0x50>
 8005ff8:	ebba 0b04 	subs.w	fp, sl, r4
 8005ffc:	d00b      	beq.n	8006016 <_svfiprintf_r+0x7a>
 8005ffe:	465b      	mov	r3, fp
 8006000:	4622      	mov	r2, r4
 8006002:	4629      	mov	r1, r5
 8006004:	4638      	mov	r0, r7
 8006006:	f7ff ff6d 	bl	8005ee4 <__ssputs_r>
 800600a:	3001      	adds	r0, #1
 800600c:	f000 80aa 	beq.w	8006164 <_svfiprintf_r+0x1c8>
 8006010:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006012:	445a      	add	r2, fp
 8006014:	9209      	str	r2, [sp, #36]	; 0x24
 8006016:	f89a 3000 	ldrb.w	r3, [sl]
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 80a2 	beq.w	8006164 <_svfiprintf_r+0x1c8>
 8006020:	2300      	movs	r3, #0
 8006022:	f04f 32ff 	mov.w	r2, #4294967295
 8006026:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800602a:	f10a 0a01 	add.w	sl, sl, #1
 800602e:	9304      	str	r3, [sp, #16]
 8006030:	9307      	str	r3, [sp, #28]
 8006032:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006036:	931a      	str	r3, [sp, #104]	; 0x68
 8006038:	4654      	mov	r4, sl
 800603a:	2205      	movs	r2, #5
 800603c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006040:	4851      	ldr	r0, [pc, #324]	; (8006188 <_svfiprintf_r+0x1ec>)
 8006042:	f7fa f8cd 	bl	80001e0 <memchr>
 8006046:	9a04      	ldr	r2, [sp, #16]
 8006048:	b9d8      	cbnz	r0, 8006082 <_svfiprintf_r+0xe6>
 800604a:	06d0      	lsls	r0, r2, #27
 800604c:	bf44      	itt	mi
 800604e:	2320      	movmi	r3, #32
 8006050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006054:	0711      	lsls	r1, r2, #28
 8006056:	bf44      	itt	mi
 8006058:	232b      	movmi	r3, #43	; 0x2b
 800605a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800605e:	f89a 3000 	ldrb.w	r3, [sl]
 8006062:	2b2a      	cmp	r3, #42	; 0x2a
 8006064:	d015      	beq.n	8006092 <_svfiprintf_r+0xf6>
 8006066:	9a07      	ldr	r2, [sp, #28]
 8006068:	4654      	mov	r4, sl
 800606a:	2000      	movs	r0, #0
 800606c:	f04f 0c0a 	mov.w	ip, #10
 8006070:	4621      	mov	r1, r4
 8006072:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006076:	3b30      	subs	r3, #48	; 0x30
 8006078:	2b09      	cmp	r3, #9
 800607a:	d94e      	bls.n	800611a <_svfiprintf_r+0x17e>
 800607c:	b1b0      	cbz	r0, 80060ac <_svfiprintf_r+0x110>
 800607e:	9207      	str	r2, [sp, #28]
 8006080:	e014      	b.n	80060ac <_svfiprintf_r+0x110>
 8006082:	eba0 0308 	sub.w	r3, r0, r8
 8006086:	fa09 f303 	lsl.w	r3, r9, r3
 800608a:	4313      	orrs	r3, r2
 800608c:	9304      	str	r3, [sp, #16]
 800608e:	46a2      	mov	sl, r4
 8006090:	e7d2      	b.n	8006038 <_svfiprintf_r+0x9c>
 8006092:	9b03      	ldr	r3, [sp, #12]
 8006094:	1d19      	adds	r1, r3, #4
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	9103      	str	r1, [sp, #12]
 800609a:	2b00      	cmp	r3, #0
 800609c:	bfbb      	ittet	lt
 800609e:	425b      	neglt	r3, r3
 80060a0:	f042 0202 	orrlt.w	r2, r2, #2
 80060a4:	9307      	strge	r3, [sp, #28]
 80060a6:	9307      	strlt	r3, [sp, #28]
 80060a8:	bfb8      	it	lt
 80060aa:	9204      	strlt	r2, [sp, #16]
 80060ac:	7823      	ldrb	r3, [r4, #0]
 80060ae:	2b2e      	cmp	r3, #46	; 0x2e
 80060b0:	d10c      	bne.n	80060cc <_svfiprintf_r+0x130>
 80060b2:	7863      	ldrb	r3, [r4, #1]
 80060b4:	2b2a      	cmp	r3, #42	; 0x2a
 80060b6:	d135      	bne.n	8006124 <_svfiprintf_r+0x188>
 80060b8:	9b03      	ldr	r3, [sp, #12]
 80060ba:	1d1a      	adds	r2, r3, #4
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	9203      	str	r2, [sp, #12]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	bfb8      	it	lt
 80060c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80060c8:	3402      	adds	r4, #2
 80060ca:	9305      	str	r3, [sp, #20]
 80060cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006198 <_svfiprintf_r+0x1fc>
 80060d0:	7821      	ldrb	r1, [r4, #0]
 80060d2:	2203      	movs	r2, #3
 80060d4:	4650      	mov	r0, sl
 80060d6:	f7fa f883 	bl	80001e0 <memchr>
 80060da:	b140      	cbz	r0, 80060ee <_svfiprintf_r+0x152>
 80060dc:	2340      	movs	r3, #64	; 0x40
 80060de:	eba0 000a 	sub.w	r0, r0, sl
 80060e2:	fa03 f000 	lsl.w	r0, r3, r0
 80060e6:	9b04      	ldr	r3, [sp, #16]
 80060e8:	4303      	orrs	r3, r0
 80060ea:	3401      	adds	r4, #1
 80060ec:	9304      	str	r3, [sp, #16]
 80060ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060f2:	4826      	ldr	r0, [pc, #152]	; (800618c <_svfiprintf_r+0x1f0>)
 80060f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060f8:	2206      	movs	r2, #6
 80060fa:	f7fa f871 	bl	80001e0 <memchr>
 80060fe:	2800      	cmp	r0, #0
 8006100:	d038      	beq.n	8006174 <_svfiprintf_r+0x1d8>
 8006102:	4b23      	ldr	r3, [pc, #140]	; (8006190 <_svfiprintf_r+0x1f4>)
 8006104:	bb1b      	cbnz	r3, 800614e <_svfiprintf_r+0x1b2>
 8006106:	9b03      	ldr	r3, [sp, #12]
 8006108:	3307      	adds	r3, #7
 800610a:	f023 0307 	bic.w	r3, r3, #7
 800610e:	3308      	adds	r3, #8
 8006110:	9303      	str	r3, [sp, #12]
 8006112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006114:	4433      	add	r3, r6
 8006116:	9309      	str	r3, [sp, #36]	; 0x24
 8006118:	e767      	b.n	8005fea <_svfiprintf_r+0x4e>
 800611a:	fb0c 3202 	mla	r2, ip, r2, r3
 800611e:	460c      	mov	r4, r1
 8006120:	2001      	movs	r0, #1
 8006122:	e7a5      	b.n	8006070 <_svfiprintf_r+0xd4>
 8006124:	2300      	movs	r3, #0
 8006126:	3401      	adds	r4, #1
 8006128:	9305      	str	r3, [sp, #20]
 800612a:	4619      	mov	r1, r3
 800612c:	f04f 0c0a 	mov.w	ip, #10
 8006130:	4620      	mov	r0, r4
 8006132:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006136:	3a30      	subs	r2, #48	; 0x30
 8006138:	2a09      	cmp	r2, #9
 800613a:	d903      	bls.n	8006144 <_svfiprintf_r+0x1a8>
 800613c:	2b00      	cmp	r3, #0
 800613e:	d0c5      	beq.n	80060cc <_svfiprintf_r+0x130>
 8006140:	9105      	str	r1, [sp, #20]
 8006142:	e7c3      	b.n	80060cc <_svfiprintf_r+0x130>
 8006144:	fb0c 2101 	mla	r1, ip, r1, r2
 8006148:	4604      	mov	r4, r0
 800614a:	2301      	movs	r3, #1
 800614c:	e7f0      	b.n	8006130 <_svfiprintf_r+0x194>
 800614e:	ab03      	add	r3, sp, #12
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	462a      	mov	r2, r5
 8006154:	4b0f      	ldr	r3, [pc, #60]	; (8006194 <_svfiprintf_r+0x1f8>)
 8006156:	a904      	add	r1, sp, #16
 8006158:	4638      	mov	r0, r7
 800615a:	f7fd ffcb 	bl	80040f4 <_printf_float>
 800615e:	1c42      	adds	r2, r0, #1
 8006160:	4606      	mov	r6, r0
 8006162:	d1d6      	bne.n	8006112 <_svfiprintf_r+0x176>
 8006164:	89ab      	ldrh	r3, [r5, #12]
 8006166:	065b      	lsls	r3, r3, #25
 8006168:	f53f af2c 	bmi.w	8005fc4 <_svfiprintf_r+0x28>
 800616c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800616e:	b01d      	add	sp, #116	; 0x74
 8006170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006174:	ab03      	add	r3, sp, #12
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	462a      	mov	r2, r5
 800617a:	4b06      	ldr	r3, [pc, #24]	; (8006194 <_svfiprintf_r+0x1f8>)
 800617c:	a904      	add	r1, sp, #16
 800617e:	4638      	mov	r0, r7
 8006180:	f7fe fa5c 	bl	800463c <_printf_i>
 8006184:	e7eb      	b.n	800615e <_svfiprintf_r+0x1c2>
 8006186:	bf00      	nop
 8006188:	08006fec 	.word	0x08006fec
 800618c:	08006ff6 	.word	0x08006ff6
 8006190:	080040f5 	.word	0x080040f5
 8006194:	08005ee5 	.word	0x08005ee5
 8006198:	08006ff2 	.word	0x08006ff2

0800619c <_sbrk_r>:
 800619c:	b538      	push	{r3, r4, r5, lr}
 800619e:	4d06      	ldr	r5, [pc, #24]	; (80061b8 <_sbrk_r+0x1c>)
 80061a0:	2300      	movs	r3, #0
 80061a2:	4604      	mov	r4, r0
 80061a4:	4608      	mov	r0, r1
 80061a6:	602b      	str	r3, [r5, #0]
 80061a8:	f7fb f9de 	bl	8001568 <_sbrk>
 80061ac:	1c43      	adds	r3, r0, #1
 80061ae:	d102      	bne.n	80061b6 <_sbrk_r+0x1a>
 80061b0:	682b      	ldr	r3, [r5, #0]
 80061b2:	b103      	cbz	r3, 80061b6 <_sbrk_r+0x1a>
 80061b4:	6023      	str	r3, [r4, #0]
 80061b6:	bd38      	pop	{r3, r4, r5, pc}
 80061b8:	200002b4 	.word	0x200002b4

080061bc <__assert_func>:
 80061bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061be:	4614      	mov	r4, r2
 80061c0:	461a      	mov	r2, r3
 80061c2:	4b09      	ldr	r3, [pc, #36]	; (80061e8 <__assert_func+0x2c>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4605      	mov	r5, r0
 80061c8:	68d8      	ldr	r0, [r3, #12]
 80061ca:	b14c      	cbz	r4, 80061e0 <__assert_func+0x24>
 80061cc:	4b07      	ldr	r3, [pc, #28]	; (80061ec <__assert_func+0x30>)
 80061ce:	9100      	str	r1, [sp, #0]
 80061d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80061d4:	4906      	ldr	r1, [pc, #24]	; (80061f0 <__assert_func+0x34>)
 80061d6:	462b      	mov	r3, r5
 80061d8:	f000 f80e 	bl	80061f8 <fiprintf>
 80061dc:	f000 faac 	bl	8006738 <abort>
 80061e0:	4b04      	ldr	r3, [pc, #16]	; (80061f4 <__assert_func+0x38>)
 80061e2:	461c      	mov	r4, r3
 80061e4:	e7f3      	b.n	80061ce <__assert_func+0x12>
 80061e6:	bf00      	nop
 80061e8:	2000000c 	.word	0x2000000c
 80061ec:	08006ffd 	.word	0x08006ffd
 80061f0:	0800700a 	.word	0x0800700a
 80061f4:	08007038 	.word	0x08007038

080061f8 <fiprintf>:
 80061f8:	b40e      	push	{r1, r2, r3}
 80061fa:	b503      	push	{r0, r1, lr}
 80061fc:	4601      	mov	r1, r0
 80061fe:	ab03      	add	r3, sp, #12
 8006200:	4805      	ldr	r0, [pc, #20]	; (8006218 <fiprintf+0x20>)
 8006202:	f853 2b04 	ldr.w	r2, [r3], #4
 8006206:	6800      	ldr	r0, [r0, #0]
 8006208:	9301      	str	r3, [sp, #4]
 800620a:	f000 f897 	bl	800633c <_vfiprintf_r>
 800620e:	b002      	add	sp, #8
 8006210:	f85d eb04 	ldr.w	lr, [sp], #4
 8006214:	b003      	add	sp, #12
 8006216:	4770      	bx	lr
 8006218:	2000000c 	.word	0x2000000c

0800621c <__ascii_mbtowc>:
 800621c:	b082      	sub	sp, #8
 800621e:	b901      	cbnz	r1, 8006222 <__ascii_mbtowc+0x6>
 8006220:	a901      	add	r1, sp, #4
 8006222:	b142      	cbz	r2, 8006236 <__ascii_mbtowc+0x1a>
 8006224:	b14b      	cbz	r3, 800623a <__ascii_mbtowc+0x1e>
 8006226:	7813      	ldrb	r3, [r2, #0]
 8006228:	600b      	str	r3, [r1, #0]
 800622a:	7812      	ldrb	r2, [r2, #0]
 800622c:	1e10      	subs	r0, r2, #0
 800622e:	bf18      	it	ne
 8006230:	2001      	movne	r0, #1
 8006232:	b002      	add	sp, #8
 8006234:	4770      	bx	lr
 8006236:	4610      	mov	r0, r2
 8006238:	e7fb      	b.n	8006232 <__ascii_mbtowc+0x16>
 800623a:	f06f 0001 	mvn.w	r0, #1
 800623e:	e7f8      	b.n	8006232 <__ascii_mbtowc+0x16>

08006240 <memmove>:
 8006240:	4288      	cmp	r0, r1
 8006242:	b510      	push	{r4, lr}
 8006244:	eb01 0402 	add.w	r4, r1, r2
 8006248:	d902      	bls.n	8006250 <memmove+0x10>
 800624a:	4284      	cmp	r4, r0
 800624c:	4623      	mov	r3, r4
 800624e:	d807      	bhi.n	8006260 <memmove+0x20>
 8006250:	1e43      	subs	r3, r0, #1
 8006252:	42a1      	cmp	r1, r4
 8006254:	d008      	beq.n	8006268 <memmove+0x28>
 8006256:	f811 2b01 	ldrb.w	r2, [r1], #1
 800625a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800625e:	e7f8      	b.n	8006252 <memmove+0x12>
 8006260:	4402      	add	r2, r0
 8006262:	4601      	mov	r1, r0
 8006264:	428a      	cmp	r2, r1
 8006266:	d100      	bne.n	800626a <memmove+0x2a>
 8006268:	bd10      	pop	{r4, pc}
 800626a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800626e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006272:	e7f7      	b.n	8006264 <memmove+0x24>

08006274 <__malloc_lock>:
 8006274:	4801      	ldr	r0, [pc, #4]	; (800627c <__malloc_lock+0x8>)
 8006276:	f000 bc1f 	b.w	8006ab8 <__retarget_lock_acquire_recursive>
 800627a:	bf00      	nop
 800627c:	200002b8 	.word	0x200002b8

08006280 <__malloc_unlock>:
 8006280:	4801      	ldr	r0, [pc, #4]	; (8006288 <__malloc_unlock+0x8>)
 8006282:	f000 bc1a 	b.w	8006aba <__retarget_lock_release_recursive>
 8006286:	bf00      	nop
 8006288:	200002b8 	.word	0x200002b8

0800628c <_realloc_r>:
 800628c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006290:	4680      	mov	r8, r0
 8006292:	4614      	mov	r4, r2
 8006294:	460e      	mov	r6, r1
 8006296:	b921      	cbnz	r1, 80062a2 <_realloc_r+0x16>
 8006298:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800629c:	4611      	mov	r1, r2
 800629e:	f7ff bdad 	b.w	8005dfc <_malloc_r>
 80062a2:	b92a      	cbnz	r2, 80062b0 <_realloc_r+0x24>
 80062a4:	f7ff fd3e 	bl	8005d24 <_free_r>
 80062a8:	4625      	mov	r5, r4
 80062aa:	4628      	mov	r0, r5
 80062ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062b0:	f000 fc6a 	bl	8006b88 <_malloc_usable_size_r>
 80062b4:	4284      	cmp	r4, r0
 80062b6:	4607      	mov	r7, r0
 80062b8:	d802      	bhi.n	80062c0 <_realloc_r+0x34>
 80062ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80062be:	d812      	bhi.n	80062e6 <_realloc_r+0x5a>
 80062c0:	4621      	mov	r1, r4
 80062c2:	4640      	mov	r0, r8
 80062c4:	f7ff fd9a 	bl	8005dfc <_malloc_r>
 80062c8:	4605      	mov	r5, r0
 80062ca:	2800      	cmp	r0, #0
 80062cc:	d0ed      	beq.n	80062aa <_realloc_r+0x1e>
 80062ce:	42bc      	cmp	r4, r7
 80062d0:	4622      	mov	r2, r4
 80062d2:	4631      	mov	r1, r6
 80062d4:	bf28      	it	cs
 80062d6:	463a      	movcs	r2, r7
 80062d8:	f7ff f97c 	bl	80055d4 <memcpy>
 80062dc:	4631      	mov	r1, r6
 80062de:	4640      	mov	r0, r8
 80062e0:	f7ff fd20 	bl	8005d24 <_free_r>
 80062e4:	e7e1      	b.n	80062aa <_realloc_r+0x1e>
 80062e6:	4635      	mov	r5, r6
 80062e8:	e7df      	b.n	80062aa <_realloc_r+0x1e>

080062ea <__sfputc_r>:
 80062ea:	6893      	ldr	r3, [r2, #8]
 80062ec:	3b01      	subs	r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	b410      	push	{r4}
 80062f2:	6093      	str	r3, [r2, #8]
 80062f4:	da08      	bge.n	8006308 <__sfputc_r+0x1e>
 80062f6:	6994      	ldr	r4, [r2, #24]
 80062f8:	42a3      	cmp	r3, r4
 80062fa:	db01      	blt.n	8006300 <__sfputc_r+0x16>
 80062fc:	290a      	cmp	r1, #10
 80062fe:	d103      	bne.n	8006308 <__sfputc_r+0x1e>
 8006300:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006304:	f000 b94a 	b.w	800659c <__swbuf_r>
 8006308:	6813      	ldr	r3, [r2, #0]
 800630a:	1c58      	adds	r0, r3, #1
 800630c:	6010      	str	r0, [r2, #0]
 800630e:	7019      	strb	r1, [r3, #0]
 8006310:	4608      	mov	r0, r1
 8006312:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006316:	4770      	bx	lr

08006318 <__sfputs_r>:
 8006318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631a:	4606      	mov	r6, r0
 800631c:	460f      	mov	r7, r1
 800631e:	4614      	mov	r4, r2
 8006320:	18d5      	adds	r5, r2, r3
 8006322:	42ac      	cmp	r4, r5
 8006324:	d101      	bne.n	800632a <__sfputs_r+0x12>
 8006326:	2000      	movs	r0, #0
 8006328:	e007      	b.n	800633a <__sfputs_r+0x22>
 800632a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800632e:	463a      	mov	r2, r7
 8006330:	4630      	mov	r0, r6
 8006332:	f7ff ffda 	bl	80062ea <__sfputc_r>
 8006336:	1c43      	adds	r3, r0, #1
 8006338:	d1f3      	bne.n	8006322 <__sfputs_r+0xa>
 800633a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800633c <_vfiprintf_r>:
 800633c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006340:	460d      	mov	r5, r1
 8006342:	b09d      	sub	sp, #116	; 0x74
 8006344:	4614      	mov	r4, r2
 8006346:	4698      	mov	r8, r3
 8006348:	4606      	mov	r6, r0
 800634a:	b118      	cbz	r0, 8006354 <_vfiprintf_r+0x18>
 800634c:	6983      	ldr	r3, [r0, #24]
 800634e:	b90b      	cbnz	r3, 8006354 <_vfiprintf_r+0x18>
 8006350:	f000 fb14 	bl	800697c <__sinit>
 8006354:	4b89      	ldr	r3, [pc, #548]	; (800657c <_vfiprintf_r+0x240>)
 8006356:	429d      	cmp	r5, r3
 8006358:	d11b      	bne.n	8006392 <_vfiprintf_r+0x56>
 800635a:	6875      	ldr	r5, [r6, #4]
 800635c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800635e:	07d9      	lsls	r1, r3, #31
 8006360:	d405      	bmi.n	800636e <_vfiprintf_r+0x32>
 8006362:	89ab      	ldrh	r3, [r5, #12]
 8006364:	059a      	lsls	r2, r3, #22
 8006366:	d402      	bmi.n	800636e <_vfiprintf_r+0x32>
 8006368:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800636a:	f000 fba5 	bl	8006ab8 <__retarget_lock_acquire_recursive>
 800636e:	89ab      	ldrh	r3, [r5, #12]
 8006370:	071b      	lsls	r3, r3, #28
 8006372:	d501      	bpl.n	8006378 <_vfiprintf_r+0x3c>
 8006374:	692b      	ldr	r3, [r5, #16]
 8006376:	b9eb      	cbnz	r3, 80063b4 <_vfiprintf_r+0x78>
 8006378:	4629      	mov	r1, r5
 800637a:	4630      	mov	r0, r6
 800637c:	f000 f96e 	bl	800665c <__swsetup_r>
 8006380:	b1c0      	cbz	r0, 80063b4 <_vfiprintf_r+0x78>
 8006382:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006384:	07dc      	lsls	r4, r3, #31
 8006386:	d50e      	bpl.n	80063a6 <_vfiprintf_r+0x6a>
 8006388:	f04f 30ff 	mov.w	r0, #4294967295
 800638c:	b01d      	add	sp, #116	; 0x74
 800638e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006392:	4b7b      	ldr	r3, [pc, #492]	; (8006580 <_vfiprintf_r+0x244>)
 8006394:	429d      	cmp	r5, r3
 8006396:	d101      	bne.n	800639c <_vfiprintf_r+0x60>
 8006398:	68b5      	ldr	r5, [r6, #8]
 800639a:	e7df      	b.n	800635c <_vfiprintf_r+0x20>
 800639c:	4b79      	ldr	r3, [pc, #484]	; (8006584 <_vfiprintf_r+0x248>)
 800639e:	429d      	cmp	r5, r3
 80063a0:	bf08      	it	eq
 80063a2:	68f5      	ldreq	r5, [r6, #12]
 80063a4:	e7da      	b.n	800635c <_vfiprintf_r+0x20>
 80063a6:	89ab      	ldrh	r3, [r5, #12]
 80063a8:	0598      	lsls	r0, r3, #22
 80063aa:	d4ed      	bmi.n	8006388 <_vfiprintf_r+0x4c>
 80063ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80063ae:	f000 fb84 	bl	8006aba <__retarget_lock_release_recursive>
 80063b2:	e7e9      	b.n	8006388 <_vfiprintf_r+0x4c>
 80063b4:	2300      	movs	r3, #0
 80063b6:	9309      	str	r3, [sp, #36]	; 0x24
 80063b8:	2320      	movs	r3, #32
 80063ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063be:	f8cd 800c 	str.w	r8, [sp, #12]
 80063c2:	2330      	movs	r3, #48	; 0x30
 80063c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006588 <_vfiprintf_r+0x24c>
 80063c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063cc:	f04f 0901 	mov.w	r9, #1
 80063d0:	4623      	mov	r3, r4
 80063d2:	469a      	mov	sl, r3
 80063d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063d8:	b10a      	cbz	r2, 80063de <_vfiprintf_r+0xa2>
 80063da:	2a25      	cmp	r2, #37	; 0x25
 80063dc:	d1f9      	bne.n	80063d2 <_vfiprintf_r+0x96>
 80063de:	ebba 0b04 	subs.w	fp, sl, r4
 80063e2:	d00b      	beq.n	80063fc <_vfiprintf_r+0xc0>
 80063e4:	465b      	mov	r3, fp
 80063e6:	4622      	mov	r2, r4
 80063e8:	4629      	mov	r1, r5
 80063ea:	4630      	mov	r0, r6
 80063ec:	f7ff ff94 	bl	8006318 <__sfputs_r>
 80063f0:	3001      	adds	r0, #1
 80063f2:	f000 80aa 	beq.w	800654a <_vfiprintf_r+0x20e>
 80063f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063f8:	445a      	add	r2, fp
 80063fa:	9209      	str	r2, [sp, #36]	; 0x24
 80063fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 80a2 	beq.w	800654a <_vfiprintf_r+0x20e>
 8006406:	2300      	movs	r3, #0
 8006408:	f04f 32ff 	mov.w	r2, #4294967295
 800640c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006410:	f10a 0a01 	add.w	sl, sl, #1
 8006414:	9304      	str	r3, [sp, #16]
 8006416:	9307      	str	r3, [sp, #28]
 8006418:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800641c:	931a      	str	r3, [sp, #104]	; 0x68
 800641e:	4654      	mov	r4, sl
 8006420:	2205      	movs	r2, #5
 8006422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006426:	4858      	ldr	r0, [pc, #352]	; (8006588 <_vfiprintf_r+0x24c>)
 8006428:	f7f9 feda 	bl	80001e0 <memchr>
 800642c:	9a04      	ldr	r2, [sp, #16]
 800642e:	b9d8      	cbnz	r0, 8006468 <_vfiprintf_r+0x12c>
 8006430:	06d1      	lsls	r1, r2, #27
 8006432:	bf44      	itt	mi
 8006434:	2320      	movmi	r3, #32
 8006436:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800643a:	0713      	lsls	r3, r2, #28
 800643c:	bf44      	itt	mi
 800643e:	232b      	movmi	r3, #43	; 0x2b
 8006440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006444:	f89a 3000 	ldrb.w	r3, [sl]
 8006448:	2b2a      	cmp	r3, #42	; 0x2a
 800644a:	d015      	beq.n	8006478 <_vfiprintf_r+0x13c>
 800644c:	9a07      	ldr	r2, [sp, #28]
 800644e:	4654      	mov	r4, sl
 8006450:	2000      	movs	r0, #0
 8006452:	f04f 0c0a 	mov.w	ip, #10
 8006456:	4621      	mov	r1, r4
 8006458:	f811 3b01 	ldrb.w	r3, [r1], #1
 800645c:	3b30      	subs	r3, #48	; 0x30
 800645e:	2b09      	cmp	r3, #9
 8006460:	d94e      	bls.n	8006500 <_vfiprintf_r+0x1c4>
 8006462:	b1b0      	cbz	r0, 8006492 <_vfiprintf_r+0x156>
 8006464:	9207      	str	r2, [sp, #28]
 8006466:	e014      	b.n	8006492 <_vfiprintf_r+0x156>
 8006468:	eba0 0308 	sub.w	r3, r0, r8
 800646c:	fa09 f303 	lsl.w	r3, r9, r3
 8006470:	4313      	orrs	r3, r2
 8006472:	9304      	str	r3, [sp, #16]
 8006474:	46a2      	mov	sl, r4
 8006476:	e7d2      	b.n	800641e <_vfiprintf_r+0xe2>
 8006478:	9b03      	ldr	r3, [sp, #12]
 800647a:	1d19      	adds	r1, r3, #4
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	9103      	str	r1, [sp, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	bfbb      	ittet	lt
 8006484:	425b      	neglt	r3, r3
 8006486:	f042 0202 	orrlt.w	r2, r2, #2
 800648a:	9307      	strge	r3, [sp, #28]
 800648c:	9307      	strlt	r3, [sp, #28]
 800648e:	bfb8      	it	lt
 8006490:	9204      	strlt	r2, [sp, #16]
 8006492:	7823      	ldrb	r3, [r4, #0]
 8006494:	2b2e      	cmp	r3, #46	; 0x2e
 8006496:	d10c      	bne.n	80064b2 <_vfiprintf_r+0x176>
 8006498:	7863      	ldrb	r3, [r4, #1]
 800649a:	2b2a      	cmp	r3, #42	; 0x2a
 800649c:	d135      	bne.n	800650a <_vfiprintf_r+0x1ce>
 800649e:	9b03      	ldr	r3, [sp, #12]
 80064a0:	1d1a      	adds	r2, r3, #4
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	9203      	str	r2, [sp, #12]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	bfb8      	it	lt
 80064aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80064ae:	3402      	adds	r4, #2
 80064b0:	9305      	str	r3, [sp, #20]
 80064b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006598 <_vfiprintf_r+0x25c>
 80064b6:	7821      	ldrb	r1, [r4, #0]
 80064b8:	2203      	movs	r2, #3
 80064ba:	4650      	mov	r0, sl
 80064bc:	f7f9 fe90 	bl	80001e0 <memchr>
 80064c0:	b140      	cbz	r0, 80064d4 <_vfiprintf_r+0x198>
 80064c2:	2340      	movs	r3, #64	; 0x40
 80064c4:	eba0 000a 	sub.w	r0, r0, sl
 80064c8:	fa03 f000 	lsl.w	r0, r3, r0
 80064cc:	9b04      	ldr	r3, [sp, #16]
 80064ce:	4303      	orrs	r3, r0
 80064d0:	3401      	adds	r4, #1
 80064d2:	9304      	str	r3, [sp, #16]
 80064d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064d8:	482c      	ldr	r0, [pc, #176]	; (800658c <_vfiprintf_r+0x250>)
 80064da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064de:	2206      	movs	r2, #6
 80064e0:	f7f9 fe7e 	bl	80001e0 <memchr>
 80064e4:	2800      	cmp	r0, #0
 80064e6:	d03f      	beq.n	8006568 <_vfiprintf_r+0x22c>
 80064e8:	4b29      	ldr	r3, [pc, #164]	; (8006590 <_vfiprintf_r+0x254>)
 80064ea:	bb1b      	cbnz	r3, 8006534 <_vfiprintf_r+0x1f8>
 80064ec:	9b03      	ldr	r3, [sp, #12]
 80064ee:	3307      	adds	r3, #7
 80064f0:	f023 0307 	bic.w	r3, r3, #7
 80064f4:	3308      	adds	r3, #8
 80064f6:	9303      	str	r3, [sp, #12]
 80064f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064fa:	443b      	add	r3, r7
 80064fc:	9309      	str	r3, [sp, #36]	; 0x24
 80064fe:	e767      	b.n	80063d0 <_vfiprintf_r+0x94>
 8006500:	fb0c 3202 	mla	r2, ip, r2, r3
 8006504:	460c      	mov	r4, r1
 8006506:	2001      	movs	r0, #1
 8006508:	e7a5      	b.n	8006456 <_vfiprintf_r+0x11a>
 800650a:	2300      	movs	r3, #0
 800650c:	3401      	adds	r4, #1
 800650e:	9305      	str	r3, [sp, #20]
 8006510:	4619      	mov	r1, r3
 8006512:	f04f 0c0a 	mov.w	ip, #10
 8006516:	4620      	mov	r0, r4
 8006518:	f810 2b01 	ldrb.w	r2, [r0], #1
 800651c:	3a30      	subs	r2, #48	; 0x30
 800651e:	2a09      	cmp	r2, #9
 8006520:	d903      	bls.n	800652a <_vfiprintf_r+0x1ee>
 8006522:	2b00      	cmp	r3, #0
 8006524:	d0c5      	beq.n	80064b2 <_vfiprintf_r+0x176>
 8006526:	9105      	str	r1, [sp, #20]
 8006528:	e7c3      	b.n	80064b2 <_vfiprintf_r+0x176>
 800652a:	fb0c 2101 	mla	r1, ip, r1, r2
 800652e:	4604      	mov	r4, r0
 8006530:	2301      	movs	r3, #1
 8006532:	e7f0      	b.n	8006516 <_vfiprintf_r+0x1da>
 8006534:	ab03      	add	r3, sp, #12
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	462a      	mov	r2, r5
 800653a:	4b16      	ldr	r3, [pc, #88]	; (8006594 <_vfiprintf_r+0x258>)
 800653c:	a904      	add	r1, sp, #16
 800653e:	4630      	mov	r0, r6
 8006540:	f7fd fdd8 	bl	80040f4 <_printf_float>
 8006544:	4607      	mov	r7, r0
 8006546:	1c78      	adds	r0, r7, #1
 8006548:	d1d6      	bne.n	80064f8 <_vfiprintf_r+0x1bc>
 800654a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800654c:	07d9      	lsls	r1, r3, #31
 800654e:	d405      	bmi.n	800655c <_vfiprintf_r+0x220>
 8006550:	89ab      	ldrh	r3, [r5, #12]
 8006552:	059a      	lsls	r2, r3, #22
 8006554:	d402      	bmi.n	800655c <_vfiprintf_r+0x220>
 8006556:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006558:	f000 faaf 	bl	8006aba <__retarget_lock_release_recursive>
 800655c:	89ab      	ldrh	r3, [r5, #12]
 800655e:	065b      	lsls	r3, r3, #25
 8006560:	f53f af12 	bmi.w	8006388 <_vfiprintf_r+0x4c>
 8006564:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006566:	e711      	b.n	800638c <_vfiprintf_r+0x50>
 8006568:	ab03      	add	r3, sp, #12
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	462a      	mov	r2, r5
 800656e:	4b09      	ldr	r3, [pc, #36]	; (8006594 <_vfiprintf_r+0x258>)
 8006570:	a904      	add	r1, sp, #16
 8006572:	4630      	mov	r0, r6
 8006574:	f7fe f862 	bl	800463c <_printf_i>
 8006578:	e7e4      	b.n	8006544 <_vfiprintf_r+0x208>
 800657a:	bf00      	nop
 800657c:	08007164 	.word	0x08007164
 8006580:	08007184 	.word	0x08007184
 8006584:	08007144 	.word	0x08007144
 8006588:	08006fec 	.word	0x08006fec
 800658c:	08006ff6 	.word	0x08006ff6
 8006590:	080040f5 	.word	0x080040f5
 8006594:	08006319 	.word	0x08006319
 8006598:	08006ff2 	.word	0x08006ff2

0800659c <__swbuf_r>:
 800659c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659e:	460e      	mov	r6, r1
 80065a0:	4614      	mov	r4, r2
 80065a2:	4605      	mov	r5, r0
 80065a4:	b118      	cbz	r0, 80065ae <__swbuf_r+0x12>
 80065a6:	6983      	ldr	r3, [r0, #24]
 80065a8:	b90b      	cbnz	r3, 80065ae <__swbuf_r+0x12>
 80065aa:	f000 f9e7 	bl	800697c <__sinit>
 80065ae:	4b21      	ldr	r3, [pc, #132]	; (8006634 <__swbuf_r+0x98>)
 80065b0:	429c      	cmp	r4, r3
 80065b2:	d12b      	bne.n	800660c <__swbuf_r+0x70>
 80065b4:	686c      	ldr	r4, [r5, #4]
 80065b6:	69a3      	ldr	r3, [r4, #24]
 80065b8:	60a3      	str	r3, [r4, #8]
 80065ba:	89a3      	ldrh	r3, [r4, #12]
 80065bc:	071a      	lsls	r2, r3, #28
 80065be:	d52f      	bpl.n	8006620 <__swbuf_r+0x84>
 80065c0:	6923      	ldr	r3, [r4, #16]
 80065c2:	b36b      	cbz	r3, 8006620 <__swbuf_r+0x84>
 80065c4:	6923      	ldr	r3, [r4, #16]
 80065c6:	6820      	ldr	r0, [r4, #0]
 80065c8:	1ac0      	subs	r0, r0, r3
 80065ca:	6963      	ldr	r3, [r4, #20]
 80065cc:	b2f6      	uxtb	r6, r6
 80065ce:	4283      	cmp	r3, r0
 80065d0:	4637      	mov	r7, r6
 80065d2:	dc04      	bgt.n	80065de <__swbuf_r+0x42>
 80065d4:	4621      	mov	r1, r4
 80065d6:	4628      	mov	r0, r5
 80065d8:	f000 f93c 	bl	8006854 <_fflush_r>
 80065dc:	bb30      	cbnz	r0, 800662c <__swbuf_r+0x90>
 80065de:	68a3      	ldr	r3, [r4, #8]
 80065e0:	3b01      	subs	r3, #1
 80065e2:	60a3      	str	r3, [r4, #8]
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	1c5a      	adds	r2, r3, #1
 80065e8:	6022      	str	r2, [r4, #0]
 80065ea:	701e      	strb	r6, [r3, #0]
 80065ec:	6963      	ldr	r3, [r4, #20]
 80065ee:	3001      	adds	r0, #1
 80065f0:	4283      	cmp	r3, r0
 80065f2:	d004      	beq.n	80065fe <__swbuf_r+0x62>
 80065f4:	89a3      	ldrh	r3, [r4, #12]
 80065f6:	07db      	lsls	r3, r3, #31
 80065f8:	d506      	bpl.n	8006608 <__swbuf_r+0x6c>
 80065fa:	2e0a      	cmp	r6, #10
 80065fc:	d104      	bne.n	8006608 <__swbuf_r+0x6c>
 80065fe:	4621      	mov	r1, r4
 8006600:	4628      	mov	r0, r5
 8006602:	f000 f927 	bl	8006854 <_fflush_r>
 8006606:	b988      	cbnz	r0, 800662c <__swbuf_r+0x90>
 8006608:	4638      	mov	r0, r7
 800660a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800660c:	4b0a      	ldr	r3, [pc, #40]	; (8006638 <__swbuf_r+0x9c>)
 800660e:	429c      	cmp	r4, r3
 8006610:	d101      	bne.n	8006616 <__swbuf_r+0x7a>
 8006612:	68ac      	ldr	r4, [r5, #8]
 8006614:	e7cf      	b.n	80065b6 <__swbuf_r+0x1a>
 8006616:	4b09      	ldr	r3, [pc, #36]	; (800663c <__swbuf_r+0xa0>)
 8006618:	429c      	cmp	r4, r3
 800661a:	bf08      	it	eq
 800661c:	68ec      	ldreq	r4, [r5, #12]
 800661e:	e7ca      	b.n	80065b6 <__swbuf_r+0x1a>
 8006620:	4621      	mov	r1, r4
 8006622:	4628      	mov	r0, r5
 8006624:	f000 f81a 	bl	800665c <__swsetup_r>
 8006628:	2800      	cmp	r0, #0
 800662a:	d0cb      	beq.n	80065c4 <__swbuf_r+0x28>
 800662c:	f04f 37ff 	mov.w	r7, #4294967295
 8006630:	e7ea      	b.n	8006608 <__swbuf_r+0x6c>
 8006632:	bf00      	nop
 8006634:	08007164 	.word	0x08007164
 8006638:	08007184 	.word	0x08007184
 800663c:	08007144 	.word	0x08007144

08006640 <__ascii_wctomb>:
 8006640:	b149      	cbz	r1, 8006656 <__ascii_wctomb+0x16>
 8006642:	2aff      	cmp	r2, #255	; 0xff
 8006644:	bf85      	ittet	hi
 8006646:	238a      	movhi	r3, #138	; 0x8a
 8006648:	6003      	strhi	r3, [r0, #0]
 800664a:	700a      	strbls	r2, [r1, #0]
 800664c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006650:	bf98      	it	ls
 8006652:	2001      	movls	r0, #1
 8006654:	4770      	bx	lr
 8006656:	4608      	mov	r0, r1
 8006658:	4770      	bx	lr
	...

0800665c <__swsetup_r>:
 800665c:	4b32      	ldr	r3, [pc, #200]	; (8006728 <__swsetup_r+0xcc>)
 800665e:	b570      	push	{r4, r5, r6, lr}
 8006660:	681d      	ldr	r5, [r3, #0]
 8006662:	4606      	mov	r6, r0
 8006664:	460c      	mov	r4, r1
 8006666:	b125      	cbz	r5, 8006672 <__swsetup_r+0x16>
 8006668:	69ab      	ldr	r3, [r5, #24]
 800666a:	b913      	cbnz	r3, 8006672 <__swsetup_r+0x16>
 800666c:	4628      	mov	r0, r5
 800666e:	f000 f985 	bl	800697c <__sinit>
 8006672:	4b2e      	ldr	r3, [pc, #184]	; (800672c <__swsetup_r+0xd0>)
 8006674:	429c      	cmp	r4, r3
 8006676:	d10f      	bne.n	8006698 <__swsetup_r+0x3c>
 8006678:	686c      	ldr	r4, [r5, #4]
 800667a:	89a3      	ldrh	r3, [r4, #12]
 800667c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006680:	0719      	lsls	r1, r3, #28
 8006682:	d42c      	bmi.n	80066de <__swsetup_r+0x82>
 8006684:	06dd      	lsls	r5, r3, #27
 8006686:	d411      	bmi.n	80066ac <__swsetup_r+0x50>
 8006688:	2309      	movs	r3, #9
 800668a:	6033      	str	r3, [r6, #0]
 800668c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006690:	81a3      	strh	r3, [r4, #12]
 8006692:	f04f 30ff 	mov.w	r0, #4294967295
 8006696:	e03e      	b.n	8006716 <__swsetup_r+0xba>
 8006698:	4b25      	ldr	r3, [pc, #148]	; (8006730 <__swsetup_r+0xd4>)
 800669a:	429c      	cmp	r4, r3
 800669c:	d101      	bne.n	80066a2 <__swsetup_r+0x46>
 800669e:	68ac      	ldr	r4, [r5, #8]
 80066a0:	e7eb      	b.n	800667a <__swsetup_r+0x1e>
 80066a2:	4b24      	ldr	r3, [pc, #144]	; (8006734 <__swsetup_r+0xd8>)
 80066a4:	429c      	cmp	r4, r3
 80066a6:	bf08      	it	eq
 80066a8:	68ec      	ldreq	r4, [r5, #12]
 80066aa:	e7e6      	b.n	800667a <__swsetup_r+0x1e>
 80066ac:	0758      	lsls	r0, r3, #29
 80066ae:	d512      	bpl.n	80066d6 <__swsetup_r+0x7a>
 80066b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066b2:	b141      	cbz	r1, 80066c6 <__swsetup_r+0x6a>
 80066b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066b8:	4299      	cmp	r1, r3
 80066ba:	d002      	beq.n	80066c2 <__swsetup_r+0x66>
 80066bc:	4630      	mov	r0, r6
 80066be:	f7ff fb31 	bl	8005d24 <_free_r>
 80066c2:	2300      	movs	r3, #0
 80066c4:	6363      	str	r3, [r4, #52]	; 0x34
 80066c6:	89a3      	ldrh	r3, [r4, #12]
 80066c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80066cc:	81a3      	strh	r3, [r4, #12]
 80066ce:	2300      	movs	r3, #0
 80066d0:	6063      	str	r3, [r4, #4]
 80066d2:	6923      	ldr	r3, [r4, #16]
 80066d4:	6023      	str	r3, [r4, #0]
 80066d6:	89a3      	ldrh	r3, [r4, #12]
 80066d8:	f043 0308 	orr.w	r3, r3, #8
 80066dc:	81a3      	strh	r3, [r4, #12]
 80066de:	6923      	ldr	r3, [r4, #16]
 80066e0:	b94b      	cbnz	r3, 80066f6 <__swsetup_r+0x9a>
 80066e2:	89a3      	ldrh	r3, [r4, #12]
 80066e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80066e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066ec:	d003      	beq.n	80066f6 <__swsetup_r+0x9a>
 80066ee:	4621      	mov	r1, r4
 80066f0:	4630      	mov	r0, r6
 80066f2:	f000 fa09 	bl	8006b08 <__smakebuf_r>
 80066f6:	89a0      	ldrh	r0, [r4, #12]
 80066f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066fc:	f010 0301 	ands.w	r3, r0, #1
 8006700:	d00a      	beq.n	8006718 <__swsetup_r+0xbc>
 8006702:	2300      	movs	r3, #0
 8006704:	60a3      	str	r3, [r4, #8]
 8006706:	6963      	ldr	r3, [r4, #20]
 8006708:	425b      	negs	r3, r3
 800670a:	61a3      	str	r3, [r4, #24]
 800670c:	6923      	ldr	r3, [r4, #16]
 800670e:	b943      	cbnz	r3, 8006722 <__swsetup_r+0xc6>
 8006710:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006714:	d1ba      	bne.n	800668c <__swsetup_r+0x30>
 8006716:	bd70      	pop	{r4, r5, r6, pc}
 8006718:	0781      	lsls	r1, r0, #30
 800671a:	bf58      	it	pl
 800671c:	6963      	ldrpl	r3, [r4, #20]
 800671e:	60a3      	str	r3, [r4, #8]
 8006720:	e7f4      	b.n	800670c <__swsetup_r+0xb0>
 8006722:	2000      	movs	r0, #0
 8006724:	e7f7      	b.n	8006716 <__swsetup_r+0xba>
 8006726:	bf00      	nop
 8006728:	2000000c 	.word	0x2000000c
 800672c:	08007164 	.word	0x08007164
 8006730:	08007184 	.word	0x08007184
 8006734:	08007144 	.word	0x08007144

08006738 <abort>:
 8006738:	b508      	push	{r3, lr}
 800673a:	2006      	movs	r0, #6
 800673c:	f000 fa54 	bl	8006be8 <raise>
 8006740:	2001      	movs	r0, #1
 8006742:	f7fa fe99 	bl	8001478 <_exit>
	...

08006748 <__sflush_r>:
 8006748:	898a      	ldrh	r2, [r1, #12]
 800674a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800674e:	4605      	mov	r5, r0
 8006750:	0710      	lsls	r0, r2, #28
 8006752:	460c      	mov	r4, r1
 8006754:	d458      	bmi.n	8006808 <__sflush_r+0xc0>
 8006756:	684b      	ldr	r3, [r1, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	dc05      	bgt.n	8006768 <__sflush_r+0x20>
 800675c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800675e:	2b00      	cmp	r3, #0
 8006760:	dc02      	bgt.n	8006768 <__sflush_r+0x20>
 8006762:	2000      	movs	r0, #0
 8006764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006768:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800676a:	2e00      	cmp	r6, #0
 800676c:	d0f9      	beq.n	8006762 <__sflush_r+0x1a>
 800676e:	2300      	movs	r3, #0
 8006770:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006774:	682f      	ldr	r7, [r5, #0]
 8006776:	602b      	str	r3, [r5, #0]
 8006778:	d032      	beq.n	80067e0 <__sflush_r+0x98>
 800677a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800677c:	89a3      	ldrh	r3, [r4, #12]
 800677e:	075a      	lsls	r2, r3, #29
 8006780:	d505      	bpl.n	800678e <__sflush_r+0x46>
 8006782:	6863      	ldr	r3, [r4, #4]
 8006784:	1ac0      	subs	r0, r0, r3
 8006786:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006788:	b10b      	cbz	r3, 800678e <__sflush_r+0x46>
 800678a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800678c:	1ac0      	subs	r0, r0, r3
 800678e:	2300      	movs	r3, #0
 8006790:	4602      	mov	r2, r0
 8006792:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006794:	6a21      	ldr	r1, [r4, #32]
 8006796:	4628      	mov	r0, r5
 8006798:	47b0      	blx	r6
 800679a:	1c43      	adds	r3, r0, #1
 800679c:	89a3      	ldrh	r3, [r4, #12]
 800679e:	d106      	bne.n	80067ae <__sflush_r+0x66>
 80067a0:	6829      	ldr	r1, [r5, #0]
 80067a2:	291d      	cmp	r1, #29
 80067a4:	d82c      	bhi.n	8006800 <__sflush_r+0xb8>
 80067a6:	4a2a      	ldr	r2, [pc, #168]	; (8006850 <__sflush_r+0x108>)
 80067a8:	40ca      	lsrs	r2, r1
 80067aa:	07d6      	lsls	r6, r2, #31
 80067ac:	d528      	bpl.n	8006800 <__sflush_r+0xb8>
 80067ae:	2200      	movs	r2, #0
 80067b0:	6062      	str	r2, [r4, #4]
 80067b2:	04d9      	lsls	r1, r3, #19
 80067b4:	6922      	ldr	r2, [r4, #16]
 80067b6:	6022      	str	r2, [r4, #0]
 80067b8:	d504      	bpl.n	80067c4 <__sflush_r+0x7c>
 80067ba:	1c42      	adds	r2, r0, #1
 80067bc:	d101      	bne.n	80067c2 <__sflush_r+0x7a>
 80067be:	682b      	ldr	r3, [r5, #0]
 80067c0:	b903      	cbnz	r3, 80067c4 <__sflush_r+0x7c>
 80067c2:	6560      	str	r0, [r4, #84]	; 0x54
 80067c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067c6:	602f      	str	r7, [r5, #0]
 80067c8:	2900      	cmp	r1, #0
 80067ca:	d0ca      	beq.n	8006762 <__sflush_r+0x1a>
 80067cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067d0:	4299      	cmp	r1, r3
 80067d2:	d002      	beq.n	80067da <__sflush_r+0x92>
 80067d4:	4628      	mov	r0, r5
 80067d6:	f7ff faa5 	bl	8005d24 <_free_r>
 80067da:	2000      	movs	r0, #0
 80067dc:	6360      	str	r0, [r4, #52]	; 0x34
 80067de:	e7c1      	b.n	8006764 <__sflush_r+0x1c>
 80067e0:	6a21      	ldr	r1, [r4, #32]
 80067e2:	2301      	movs	r3, #1
 80067e4:	4628      	mov	r0, r5
 80067e6:	47b0      	blx	r6
 80067e8:	1c41      	adds	r1, r0, #1
 80067ea:	d1c7      	bne.n	800677c <__sflush_r+0x34>
 80067ec:	682b      	ldr	r3, [r5, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d0c4      	beq.n	800677c <__sflush_r+0x34>
 80067f2:	2b1d      	cmp	r3, #29
 80067f4:	d001      	beq.n	80067fa <__sflush_r+0xb2>
 80067f6:	2b16      	cmp	r3, #22
 80067f8:	d101      	bne.n	80067fe <__sflush_r+0xb6>
 80067fa:	602f      	str	r7, [r5, #0]
 80067fc:	e7b1      	b.n	8006762 <__sflush_r+0x1a>
 80067fe:	89a3      	ldrh	r3, [r4, #12]
 8006800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006804:	81a3      	strh	r3, [r4, #12]
 8006806:	e7ad      	b.n	8006764 <__sflush_r+0x1c>
 8006808:	690f      	ldr	r7, [r1, #16]
 800680a:	2f00      	cmp	r7, #0
 800680c:	d0a9      	beq.n	8006762 <__sflush_r+0x1a>
 800680e:	0793      	lsls	r3, r2, #30
 8006810:	680e      	ldr	r6, [r1, #0]
 8006812:	bf08      	it	eq
 8006814:	694b      	ldreq	r3, [r1, #20]
 8006816:	600f      	str	r7, [r1, #0]
 8006818:	bf18      	it	ne
 800681a:	2300      	movne	r3, #0
 800681c:	eba6 0807 	sub.w	r8, r6, r7
 8006820:	608b      	str	r3, [r1, #8]
 8006822:	f1b8 0f00 	cmp.w	r8, #0
 8006826:	dd9c      	ble.n	8006762 <__sflush_r+0x1a>
 8006828:	6a21      	ldr	r1, [r4, #32]
 800682a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800682c:	4643      	mov	r3, r8
 800682e:	463a      	mov	r2, r7
 8006830:	4628      	mov	r0, r5
 8006832:	47b0      	blx	r6
 8006834:	2800      	cmp	r0, #0
 8006836:	dc06      	bgt.n	8006846 <__sflush_r+0xfe>
 8006838:	89a3      	ldrh	r3, [r4, #12]
 800683a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800683e:	81a3      	strh	r3, [r4, #12]
 8006840:	f04f 30ff 	mov.w	r0, #4294967295
 8006844:	e78e      	b.n	8006764 <__sflush_r+0x1c>
 8006846:	4407      	add	r7, r0
 8006848:	eba8 0800 	sub.w	r8, r8, r0
 800684c:	e7e9      	b.n	8006822 <__sflush_r+0xda>
 800684e:	bf00      	nop
 8006850:	20400001 	.word	0x20400001

08006854 <_fflush_r>:
 8006854:	b538      	push	{r3, r4, r5, lr}
 8006856:	690b      	ldr	r3, [r1, #16]
 8006858:	4605      	mov	r5, r0
 800685a:	460c      	mov	r4, r1
 800685c:	b913      	cbnz	r3, 8006864 <_fflush_r+0x10>
 800685e:	2500      	movs	r5, #0
 8006860:	4628      	mov	r0, r5
 8006862:	bd38      	pop	{r3, r4, r5, pc}
 8006864:	b118      	cbz	r0, 800686e <_fflush_r+0x1a>
 8006866:	6983      	ldr	r3, [r0, #24]
 8006868:	b90b      	cbnz	r3, 800686e <_fflush_r+0x1a>
 800686a:	f000 f887 	bl	800697c <__sinit>
 800686e:	4b14      	ldr	r3, [pc, #80]	; (80068c0 <_fflush_r+0x6c>)
 8006870:	429c      	cmp	r4, r3
 8006872:	d11b      	bne.n	80068ac <_fflush_r+0x58>
 8006874:	686c      	ldr	r4, [r5, #4]
 8006876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0ef      	beq.n	800685e <_fflush_r+0xa>
 800687e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006880:	07d0      	lsls	r0, r2, #31
 8006882:	d404      	bmi.n	800688e <_fflush_r+0x3a>
 8006884:	0599      	lsls	r1, r3, #22
 8006886:	d402      	bmi.n	800688e <_fflush_r+0x3a>
 8006888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800688a:	f000 f915 	bl	8006ab8 <__retarget_lock_acquire_recursive>
 800688e:	4628      	mov	r0, r5
 8006890:	4621      	mov	r1, r4
 8006892:	f7ff ff59 	bl	8006748 <__sflush_r>
 8006896:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006898:	07da      	lsls	r2, r3, #31
 800689a:	4605      	mov	r5, r0
 800689c:	d4e0      	bmi.n	8006860 <_fflush_r+0xc>
 800689e:	89a3      	ldrh	r3, [r4, #12]
 80068a0:	059b      	lsls	r3, r3, #22
 80068a2:	d4dd      	bmi.n	8006860 <_fflush_r+0xc>
 80068a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068a6:	f000 f908 	bl	8006aba <__retarget_lock_release_recursive>
 80068aa:	e7d9      	b.n	8006860 <_fflush_r+0xc>
 80068ac:	4b05      	ldr	r3, [pc, #20]	; (80068c4 <_fflush_r+0x70>)
 80068ae:	429c      	cmp	r4, r3
 80068b0:	d101      	bne.n	80068b6 <_fflush_r+0x62>
 80068b2:	68ac      	ldr	r4, [r5, #8]
 80068b4:	e7df      	b.n	8006876 <_fflush_r+0x22>
 80068b6:	4b04      	ldr	r3, [pc, #16]	; (80068c8 <_fflush_r+0x74>)
 80068b8:	429c      	cmp	r4, r3
 80068ba:	bf08      	it	eq
 80068bc:	68ec      	ldreq	r4, [r5, #12]
 80068be:	e7da      	b.n	8006876 <_fflush_r+0x22>
 80068c0:	08007164 	.word	0x08007164
 80068c4:	08007184 	.word	0x08007184
 80068c8:	08007144 	.word	0x08007144

080068cc <std>:
 80068cc:	2300      	movs	r3, #0
 80068ce:	b510      	push	{r4, lr}
 80068d0:	4604      	mov	r4, r0
 80068d2:	e9c0 3300 	strd	r3, r3, [r0]
 80068d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068da:	6083      	str	r3, [r0, #8]
 80068dc:	8181      	strh	r1, [r0, #12]
 80068de:	6643      	str	r3, [r0, #100]	; 0x64
 80068e0:	81c2      	strh	r2, [r0, #14]
 80068e2:	6183      	str	r3, [r0, #24]
 80068e4:	4619      	mov	r1, r3
 80068e6:	2208      	movs	r2, #8
 80068e8:	305c      	adds	r0, #92	; 0x5c
 80068ea:	f7fd fb5b 	bl	8003fa4 <memset>
 80068ee:	4b05      	ldr	r3, [pc, #20]	; (8006904 <std+0x38>)
 80068f0:	6263      	str	r3, [r4, #36]	; 0x24
 80068f2:	4b05      	ldr	r3, [pc, #20]	; (8006908 <std+0x3c>)
 80068f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80068f6:	4b05      	ldr	r3, [pc, #20]	; (800690c <std+0x40>)
 80068f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068fa:	4b05      	ldr	r3, [pc, #20]	; (8006910 <std+0x44>)
 80068fc:	6224      	str	r4, [r4, #32]
 80068fe:	6323      	str	r3, [r4, #48]	; 0x30
 8006900:	bd10      	pop	{r4, pc}
 8006902:	bf00      	nop
 8006904:	08006c21 	.word	0x08006c21
 8006908:	08006c43 	.word	0x08006c43
 800690c:	08006c7b 	.word	0x08006c7b
 8006910:	08006c9f 	.word	0x08006c9f

08006914 <_cleanup_r>:
 8006914:	4901      	ldr	r1, [pc, #4]	; (800691c <_cleanup_r+0x8>)
 8006916:	f000 b8af 	b.w	8006a78 <_fwalk_reent>
 800691a:	bf00      	nop
 800691c:	08006855 	.word	0x08006855

08006920 <__sfmoreglue>:
 8006920:	b570      	push	{r4, r5, r6, lr}
 8006922:	2268      	movs	r2, #104	; 0x68
 8006924:	1e4d      	subs	r5, r1, #1
 8006926:	4355      	muls	r5, r2
 8006928:	460e      	mov	r6, r1
 800692a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800692e:	f7ff fa65 	bl	8005dfc <_malloc_r>
 8006932:	4604      	mov	r4, r0
 8006934:	b140      	cbz	r0, 8006948 <__sfmoreglue+0x28>
 8006936:	2100      	movs	r1, #0
 8006938:	e9c0 1600 	strd	r1, r6, [r0]
 800693c:	300c      	adds	r0, #12
 800693e:	60a0      	str	r0, [r4, #8]
 8006940:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006944:	f7fd fb2e 	bl	8003fa4 <memset>
 8006948:	4620      	mov	r0, r4
 800694a:	bd70      	pop	{r4, r5, r6, pc}

0800694c <__sfp_lock_acquire>:
 800694c:	4801      	ldr	r0, [pc, #4]	; (8006954 <__sfp_lock_acquire+0x8>)
 800694e:	f000 b8b3 	b.w	8006ab8 <__retarget_lock_acquire_recursive>
 8006952:	bf00      	nop
 8006954:	200002b9 	.word	0x200002b9

08006958 <__sfp_lock_release>:
 8006958:	4801      	ldr	r0, [pc, #4]	; (8006960 <__sfp_lock_release+0x8>)
 800695a:	f000 b8ae 	b.w	8006aba <__retarget_lock_release_recursive>
 800695e:	bf00      	nop
 8006960:	200002b9 	.word	0x200002b9

08006964 <__sinit_lock_acquire>:
 8006964:	4801      	ldr	r0, [pc, #4]	; (800696c <__sinit_lock_acquire+0x8>)
 8006966:	f000 b8a7 	b.w	8006ab8 <__retarget_lock_acquire_recursive>
 800696a:	bf00      	nop
 800696c:	200002ba 	.word	0x200002ba

08006970 <__sinit_lock_release>:
 8006970:	4801      	ldr	r0, [pc, #4]	; (8006978 <__sinit_lock_release+0x8>)
 8006972:	f000 b8a2 	b.w	8006aba <__retarget_lock_release_recursive>
 8006976:	bf00      	nop
 8006978:	200002ba 	.word	0x200002ba

0800697c <__sinit>:
 800697c:	b510      	push	{r4, lr}
 800697e:	4604      	mov	r4, r0
 8006980:	f7ff fff0 	bl	8006964 <__sinit_lock_acquire>
 8006984:	69a3      	ldr	r3, [r4, #24]
 8006986:	b11b      	cbz	r3, 8006990 <__sinit+0x14>
 8006988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800698c:	f7ff bff0 	b.w	8006970 <__sinit_lock_release>
 8006990:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006994:	6523      	str	r3, [r4, #80]	; 0x50
 8006996:	4b13      	ldr	r3, [pc, #76]	; (80069e4 <__sinit+0x68>)
 8006998:	4a13      	ldr	r2, [pc, #76]	; (80069e8 <__sinit+0x6c>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	62a2      	str	r2, [r4, #40]	; 0x28
 800699e:	42a3      	cmp	r3, r4
 80069a0:	bf04      	itt	eq
 80069a2:	2301      	moveq	r3, #1
 80069a4:	61a3      	streq	r3, [r4, #24]
 80069a6:	4620      	mov	r0, r4
 80069a8:	f000 f820 	bl	80069ec <__sfp>
 80069ac:	6060      	str	r0, [r4, #4]
 80069ae:	4620      	mov	r0, r4
 80069b0:	f000 f81c 	bl	80069ec <__sfp>
 80069b4:	60a0      	str	r0, [r4, #8]
 80069b6:	4620      	mov	r0, r4
 80069b8:	f000 f818 	bl	80069ec <__sfp>
 80069bc:	2200      	movs	r2, #0
 80069be:	60e0      	str	r0, [r4, #12]
 80069c0:	2104      	movs	r1, #4
 80069c2:	6860      	ldr	r0, [r4, #4]
 80069c4:	f7ff ff82 	bl	80068cc <std>
 80069c8:	68a0      	ldr	r0, [r4, #8]
 80069ca:	2201      	movs	r2, #1
 80069cc:	2109      	movs	r1, #9
 80069ce:	f7ff ff7d 	bl	80068cc <std>
 80069d2:	68e0      	ldr	r0, [r4, #12]
 80069d4:	2202      	movs	r2, #2
 80069d6:	2112      	movs	r1, #18
 80069d8:	f7ff ff78 	bl	80068cc <std>
 80069dc:	2301      	movs	r3, #1
 80069de:	61a3      	str	r3, [r4, #24]
 80069e0:	e7d2      	b.n	8006988 <__sinit+0xc>
 80069e2:	bf00      	nop
 80069e4:	08006dc8 	.word	0x08006dc8
 80069e8:	08006915 	.word	0x08006915

080069ec <__sfp>:
 80069ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ee:	4607      	mov	r7, r0
 80069f0:	f7ff ffac 	bl	800694c <__sfp_lock_acquire>
 80069f4:	4b1e      	ldr	r3, [pc, #120]	; (8006a70 <__sfp+0x84>)
 80069f6:	681e      	ldr	r6, [r3, #0]
 80069f8:	69b3      	ldr	r3, [r6, #24]
 80069fa:	b913      	cbnz	r3, 8006a02 <__sfp+0x16>
 80069fc:	4630      	mov	r0, r6
 80069fe:	f7ff ffbd 	bl	800697c <__sinit>
 8006a02:	3648      	adds	r6, #72	; 0x48
 8006a04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	d503      	bpl.n	8006a14 <__sfp+0x28>
 8006a0c:	6833      	ldr	r3, [r6, #0]
 8006a0e:	b30b      	cbz	r3, 8006a54 <__sfp+0x68>
 8006a10:	6836      	ldr	r6, [r6, #0]
 8006a12:	e7f7      	b.n	8006a04 <__sfp+0x18>
 8006a14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a18:	b9d5      	cbnz	r5, 8006a50 <__sfp+0x64>
 8006a1a:	4b16      	ldr	r3, [pc, #88]	; (8006a74 <__sfp+0x88>)
 8006a1c:	60e3      	str	r3, [r4, #12]
 8006a1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a22:	6665      	str	r5, [r4, #100]	; 0x64
 8006a24:	f000 f847 	bl	8006ab6 <__retarget_lock_init_recursive>
 8006a28:	f7ff ff96 	bl	8006958 <__sfp_lock_release>
 8006a2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a34:	6025      	str	r5, [r4, #0]
 8006a36:	61a5      	str	r5, [r4, #24]
 8006a38:	2208      	movs	r2, #8
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a40:	f7fd fab0 	bl	8003fa4 <memset>
 8006a44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a4c:	4620      	mov	r0, r4
 8006a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a50:	3468      	adds	r4, #104	; 0x68
 8006a52:	e7d9      	b.n	8006a08 <__sfp+0x1c>
 8006a54:	2104      	movs	r1, #4
 8006a56:	4638      	mov	r0, r7
 8006a58:	f7ff ff62 	bl	8006920 <__sfmoreglue>
 8006a5c:	4604      	mov	r4, r0
 8006a5e:	6030      	str	r0, [r6, #0]
 8006a60:	2800      	cmp	r0, #0
 8006a62:	d1d5      	bne.n	8006a10 <__sfp+0x24>
 8006a64:	f7ff ff78 	bl	8006958 <__sfp_lock_release>
 8006a68:	230c      	movs	r3, #12
 8006a6a:	603b      	str	r3, [r7, #0]
 8006a6c:	e7ee      	b.n	8006a4c <__sfp+0x60>
 8006a6e:	bf00      	nop
 8006a70:	08006dc8 	.word	0x08006dc8
 8006a74:	ffff0001 	.word	0xffff0001

08006a78 <_fwalk_reent>:
 8006a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a7c:	4606      	mov	r6, r0
 8006a7e:	4688      	mov	r8, r1
 8006a80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a84:	2700      	movs	r7, #0
 8006a86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a8a:	f1b9 0901 	subs.w	r9, r9, #1
 8006a8e:	d505      	bpl.n	8006a9c <_fwalk_reent+0x24>
 8006a90:	6824      	ldr	r4, [r4, #0]
 8006a92:	2c00      	cmp	r4, #0
 8006a94:	d1f7      	bne.n	8006a86 <_fwalk_reent+0xe>
 8006a96:	4638      	mov	r0, r7
 8006a98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a9c:	89ab      	ldrh	r3, [r5, #12]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d907      	bls.n	8006ab2 <_fwalk_reent+0x3a>
 8006aa2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	d003      	beq.n	8006ab2 <_fwalk_reent+0x3a>
 8006aaa:	4629      	mov	r1, r5
 8006aac:	4630      	mov	r0, r6
 8006aae:	47c0      	blx	r8
 8006ab0:	4307      	orrs	r7, r0
 8006ab2:	3568      	adds	r5, #104	; 0x68
 8006ab4:	e7e9      	b.n	8006a8a <_fwalk_reent+0x12>

08006ab6 <__retarget_lock_init_recursive>:
 8006ab6:	4770      	bx	lr

08006ab8 <__retarget_lock_acquire_recursive>:
 8006ab8:	4770      	bx	lr

08006aba <__retarget_lock_release_recursive>:
 8006aba:	4770      	bx	lr

08006abc <__swhatbuf_r>:
 8006abc:	b570      	push	{r4, r5, r6, lr}
 8006abe:	460e      	mov	r6, r1
 8006ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ac4:	2900      	cmp	r1, #0
 8006ac6:	b096      	sub	sp, #88	; 0x58
 8006ac8:	4614      	mov	r4, r2
 8006aca:	461d      	mov	r5, r3
 8006acc:	da08      	bge.n	8006ae0 <__swhatbuf_r+0x24>
 8006ace:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	602a      	str	r2, [r5, #0]
 8006ad6:	061a      	lsls	r2, r3, #24
 8006ad8:	d410      	bmi.n	8006afc <__swhatbuf_r+0x40>
 8006ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ade:	e00e      	b.n	8006afe <__swhatbuf_r+0x42>
 8006ae0:	466a      	mov	r2, sp
 8006ae2:	f000 f903 	bl	8006cec <_fstat_r>
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	dbf1      	blt.n	8006ace <__swhatbuf_r+0x12>
 8006aea:	9a01      	ldr	r2, [sp, #4]
 8006aec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006af0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006af4:	425a      	negs	r2, r3
 8006af6:	415a      	adcs	r2, r3
 8006af8:	602a      	str	r2, [r5, #0]
 8006afa:	e7ee      	b.n	8006ada <__swhatbuf_r+0x1e>
 8006afc:	2340      	movs	r3, #64	; 0x40
 8006afe:	2000      	movs	r0, #0
 8006b00:	6023      	str	r3, [r4, #0]
 8006b02:	b016      	add	sp, #88	; 0x58
 8006b04:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b08 <__smakebuf_r>:
 8006b08:	898b      	ldrh	r3, [r1, #12]
 8006b0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b0c:	079d      	lsls	r5, r3, #30
 8006b0e:	4606      	mov	r6, r0
 8006b10:	460c      	mov	r4, r1
 8006b12:	d507      	bpl.n	8006b24 <__smakebuf_r+0x1c>
 8006b14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	6123      	str	r3, [r4, #16]
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	6163      	str	r3, [r4, #20]
 8006b20:	b002      	add	sp, #8
 8006b22:	bd70      	pop	{r4, r5, r6, pc}
 8006b24:	ab01      	add	r3, sp, #4
 8006b26:	466a      	mov	r2, sp
 8006b28:	f7ff ffc8 	bl	8006abc <__swhatbuf_r>
 8006b2c:	9900      	ldr	r1, [sp, #0]
 8006b2e:	4605      	mov	r5, r0
 8006b30:	4630      	mov	r0, r6
 8006b32:	f7ff f963 	bl	8005dfc <_malloc_r>
 8006b36:	b948      	cbnz	r0, 8006b4c <__smakebuf_r+0x44>
 8006b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b3c:	059a      	lsls	r2, r3, #22
 8006b3e:	d4ef      	bmi.n	8006b20 <__smakebuf_r+0x18>
 8006b40:	f023 0303 	bic.w	r3, r3, #3
 8006b44:	f043 0302 	orr.w	r3, r3, #2
 8006b48:	81a3      	strh	r3, [r4, #12]
 8006b4a:	e7e3      	b.n	8006b14 <__smakebuf_r+0xc>
 8006b4c:	4b0d      	ldr	r3, [pc, #52]	; (8006b84 <__smakebuf_r+0x7c>)
 8006b4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b50:	89a3      	ldrh	r3, [r4, #12]
 8006b52:	6020      	str	r0, [r4, #0]
 8006b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b58:	81a3      	strh	r3, [r4, #12]
 8006b5a:	9b00      	ldr	r3, [sp, #0]
 8006b5c:	6163      	str	r3, [r4, #20]
 8006b5e:	9b01      	ldr	r3, [sp, #4]
 8006b60:	6120      	str	r0, [r4, #16]
 8006b62:	b15b      	cbz	r3, 8006b7c <__smakebuf_r+0x74>
 8006b64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b68:	4630      	mov	r0, r6
 8006b6a:	f000 f8d1 	bl	8006d10 <_isatty_r>
 8006b6e:	b128      	cbz	r0, 8006b7c <__smakebuf_r+0x74>
 8006b70:	89a3      	ldrh	r3, [r4, #12]
 8006b72:	f023 0303 	bic.w	r3, r3, #3
 8006b76:	f043 0301 	orr.w	r3, r3, #1
 8006b7a:	81a3      	strh	r3, [r4, #12]
 8006b7c:	89a0      	ldrh	r0, [r4, #12]
 8006b7e:	4305      	orrs	r5, r0
 8006b80:	81a5      	strh	r5, [r4, #12]
 8006b82:	e7cd      	b.n	8006b20 <__smakebuf_r+0x18>
 8006b84:	08006915 	.word	0x08006915

08006b88 <_malloc_usable_size_r>:
 8006b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b8c:	1f18      	subs	r0, r3, #4
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	bfbc      	itt	lt
 8006b92:	580b      	ldrlt	r3, [r1, r0]
 8006b94:	18c0      	addlt	r0, r0, r3
 8006b96:	4770      	bx	lr

08006b98 <_raise_r>:
 8006b98:	291f      	cmp	r1, #31
 8006b9a:	b538      	push	{r3, r4, r5, lr}
 8006b9c:	4604      	mov	r4, r0
 8006b9e:	460d      	mov	r5, r1
 8006ba0:	d904      	bls.n	8006bac <_raise_r+0x14>
 8006ba2:	2316      	movs	r3, #22
 8006ba4:	6003      	str	r3, [r0, #0]
 8006ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8006baa:	bd38      	pop	{r3, r4, r5, pc}
 8006bac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006bae:	b112      	cbz	r2, 8006bb6 <_raise_r+0x1e>
 8006bb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006bb4:	b94b      	cbnz	r3, 8006bca <_raise_r+0x32>
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f000 f830 	bl	8006c1c <_getpid_r>
 8006bbc:	462a      	mov	r2, r5
 8006bbe:	4601      	mov	r1, r0
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bc6:	f000 b817 	b.w	8006bf8 <_kill_r>
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d00a      	beq.n	8006be4 <_raise_r+0x4c>
 8006bce:	1c59      	adds	r1, r3, #1
 8006bd0:	d103      	bne.n	8006bda <_raise_r+0x42>
 8006bd2:	2316      	movs	r3, #22
 8006bd4:	6003      	str	r3, [r0, #0]
 8006bd6:	2001      	movs	r0, #1
 8006bd8:	e7e7      	b.n	8006baa <_raise_r+0x12>
 8006bda:	2400      	movs	r4, #0
 8006bdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006be0:	4628      	mov	r0, r5
 8006be2:	4798      	blx	r3
 8006be4:	2000      	movs	r0, #0
 8006be6:	e7e0      	b.n	8006baa <_raise_r+0x12>

08006be8 <raise>:
 8006be8:	4b02      	ldr	r3, [pc, #8]	; (8006bf4 <raise+0xc>)
 8006bea:	4601      	mov	r1, r0
 8006bec:	6818      	ldr	r0, [r3, #0]
 8006bee:	f7ff bfd3 	b.w	8006b98 <_raise_r>
 8006bf2:	bf00      	nop
 8006bf4:	2000000c 	.word	0x2000000c

08006bf8 <_kill_r>:
 8006bf8:	b538      	push	{r3, r4, r5, lr}
 8006bfa:	4d07      	ldr	r5, [pc, #28]	; (8006c18 <_kill_r+0x20>)
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	4604      	mov	r4, r0
 8006c00:	4608      	mov	r0, r1
 8006c02:	4611      	mov	r1, r2
 8006c04:	602b      	str	r3, [r5, #0]
 8006c06:	f7fa fc27 	bl	8001458 <_kill>
 8006c0a:	1c43      	adds	r3, r0, #1
 8006c0c:	d102      	bne.n	8006c14 <_kill_r+0x1c>
 8006c0e:	682b      	ldr	r3, [r5, #0]
 8006c10:	b103      	cbz	r3, 8006c14 <_kill_r+0x1c>
 8006c12:	6023      	str	r3, [r4, #0]
 8006c14:	bd38      	pop	{r3, r4, r5, pc}
 8006c16:	bf00      	nop
 8006c18:	200002b4 	.word	0x200002b4

08006c1c <_getpid_r>:
 8006c1c:	f7fa bc14 	b.w	8001448 <_getpid>

08006c20 <__sread>:
 8006c20:	b510      	push	{r4, lr}
 8006c22:	460c      	mov	r4, r1
 8006c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c28:	f000 f894 	bl	8006d54 <_read_r>
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	bfab      	itete	ge
 8006c30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c32:	89a3      	ldrhlt	r3, [r4, #12]
 8006c34:	181b      	addge	r3, r3, r0
 8006c36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c3a:	bfac      	ite	ge
 8006c3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c3e:	81a3      	strhlt	r3, [r4, #12]
 8006c40:	bd10      	pop	{r4, pc}

08006c42 <__swrite>:
 8006c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c46:	461f      	mov	r7, r3
 8006c48:	898b      	ldrh	r3, [r1, #12]
 8006c4a:	05db      	lsls	r3, r3, #23
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	460c      	mov	r4, r1
 8006c50:	4616      	mov	r6, r2
 8006c52:	d505      	bpl.n	8006c60 <__swrite+0x1e>
 8006c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c58:	2302      	movs	r3, #2
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f000 f868 	bl	8006d30 <_lseek_r>
 8006c60:	89a3      	ldrh	r3, [r4, #12]
 8006c62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c6a:	81a3      	strh	r3, [r4, #12]
 8006c6c:	4632      	mov	r2, r6
 8006c6e:	463b      	mov	r3, r7
 8006c70:	4628      	mov	r0, r5
 8006c72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c76:	f000 b817 	b.w	8006ca8 <_write_r>

08006c7a <__sseek>:
 8006c7a:	b510      	push	{r4, lr}
 8006c7c:	460c      	mov	r4, r1
 8006c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c82:	f000 f855 	bl	8006d30 <_lseek_r>
 8006c86:	1c43      	adds	r3, r0, #1
 8006c88:	89a3      	ldrh	r3, [r4, #12]
 8006c8a:	bf15      	itete	ne
 8006c8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c96:	81a3      	strheq	r3, [r4, #12]
 8006c98:	bf18      	it	ne
 8006c9a:	81a3      	strhne	r3, [r4, #12]
 8006c9c:	bd10      	pop	{r4, pc}

08006c9e <__sclose>:
 8006c9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ca2:	f000 b813 	b.w	8006ccc <_close_r>
	...

08006ca8 <_write_r>:
 8006ca8:	b538      	push	{r3, r4, r5, lr}
 8006caa:	4d07      	ldr	r5, [pc, #28]	; (8006cc8 <_write_r+0x20>)
 8006cac:	4604      	mov	r4, r0
 8006cae:	4608      	mov	r0, r1
 8006cb0:	4611      	mov	r1, r2
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	602a      	str	r2, [r5, #0]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f7fa fc05 	bl	80014c6 <_write>
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	d102      	bne.n	8006cc6 <_write_r+0x1e>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	b103      	cbz	r3, 8006cc6 <_write_r+0x1e>
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	bd38      	pop	{r3, r4, r5, pc}
 8006cc8:	200002b4 	.word	0x200002b4

08006ccc <_close_r>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	4d06      	ldr	r5, [pc, #24]	; (8006ce8 <_close_r+0x1c>)
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	4608      	mov	r0, r1
 8006cd6:	602b      	str	r3, [r5, #0]
 8006cd8:	f7fa fc11 	bl	80014fe <_close>
 8006cdc:	1c43      	adds	r3, r0, #1
 8006cde:	d102      	bne.n	8006ce6 <_close_r+0x1a>
 8006ce0:	682b      	ldr	r3, [r5, #0]
 8006ce2:	b103      	cbz	r3, 8006ce6 <_close_r+0x1a>
 8006ce4:	6023      	str	r3, [r4, #0]
 8006ce6:	bd38      	pop	{r3, r4, r5, pc}
 8006ce8:	200002b4 	.word	0x200002b4

08006cec <_fstat_r>:
 8006cec:	b538      	push	{r3, r4, r5, lr}
 8006cee:	4d07      	ldr	r5, [pc, #28]	; (8006d0c <_fstat_r+0x20>)
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	4608      	mov	r0, r1
 8006cf6:	4611      	mov	r1, r2
 8006cf8:	602b      	str	r3, [r5, #0]
 8006cfa:	f7fa fc0c 	bl	8001516 <_fstat>
 8006cfe:	1c43      	adds	r3, r0, #1
 8006d00:	d102      	bne.n	8006d08 <_fstat_r+0x1c>
 8006d02:	682b      	ldr	r3, [r5, #0]
 8006d04:	b103      	cbz	r3, 8006d08 <_fstat_r+0x1c>
 8006d06:	6023      	str	r3, [r4, #0]
 8006d08:	bd38      	pop	{r3, r4, r5, pc}
 8006d0a:	bf00      	nop
 8006d0c:	200002b4 	.word	0x200002b4

08006d10 <_isatty_r>:
 8006d10:	b538      	push	{r3, r4, r5, lr}
 8006d12:	4d06      	ldr	r5, [pc, #24]	; (8006d2c <_isatty_r+0x1c>)
 8006d14:	2300      	movs	r3, #0
 8006d16:	4604      	mov	r4, r0
 8006d18:	4608      	mov	r0, r1
 8006d1a:	602b      	str	r3, [r5, #0]
 8006d1c:	f7fa fc0b 	bl	8001536 <_isatty>
 8006d20:	1c43      	adds	r3, r0, #1
 8006d22:	d102      	bne.n	8006d2a <_isatty_r+0x1a>
 8006d24:	682b      	ldr	r3, [r5, #0]
 8006d26:	b103      	cbz	r3, 8006d2a <_isatty_r+0x1a>
 8006d28:	6023      	str	r3, [r4, #0]
 8006d2a:	bd38      	pop	{r3, r4, r5, pc}
 8006d2c:	200002b4 	.word	0x200002b4

08006d30 <_lseek_r>:
 8006d30:	b538      	push	{r3, r4, r5, lr}
 8006d32:	4d07      	ldr	r5, [pc, #28]	; (8006d50 <_lseek_r+0x20>)
 8006d34:	4604      	mov	r4, r0
 8006d36:	4608      	mov	r0, r1
 8006d38:	4611      	mov	r1, r2
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	602a      	str	r2, [r5, #0]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	f7fa fc04 	bl	800154c <_lseek>
 8006d44:	1c43      	adds	r3, r0, #1
 8006d46:	d102      	bne.n	8006d4e <_lseek_r+0x1e>
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	b103      	cbz	r3, 8006d4e <_lseek_r+0x1e>
 8006d4c:	6023      	str	r3, [r4, #0]
 8006d4e:	bd38      	pop	{r3, r4, r5, pc}
 8006d50:	200002b4 	.word	0x200002b4

08006d54 <_read_r>:
 8006d54:	b538      	push	{r3, r4, r5, lr}
 8006d56:	4d07      	ldr	r5, [pc, #28]	; (8006d74 <_read_r+0x20>)
 8006d58:	4604      	mov	r4, r0
 8006d5a:	4608      	mov	r0, r1
 8006d5c:	4611      	mov	r1, r2
 8006d5e:	2200      	movs	r2, #0
 8006d60:	602a      	str	r2, [r5, #0]
 8006d62:	461a      	mov	r2, r3
 8006d64:	f7fa fb92 	bl	800148c <_read>
 8006d68:	1c43      	adds	r3, r0, #1
 8006d6a:	d102      	bne.n	8006d72 <_read_r+0x1e>
 8006d6c:	682b      	ldr	r3, [r5, #0]
 8006d6e:	b103      	cbz	r3, 8006d72 <_read_r+0x1e>
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	bd38      	pop	{r3, r4, r5, pc}
 8006d74:	200002b4 	.word	0x200002b4

08006d78 <_init>:
 8006d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7a:	bf00      	nop
 8006d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d7e:	bc08      	pop	{r3}
 8006d80:	469e      	mov	lr, r3
 8006d82:	4770      	bx	lr

08006d84 <_fini>:
 8006d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d86:	bf00      	nop
 8006d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d8a:	bc08      	pop	{r3}
 8006d8c:	469e      	mov	lr, r3
 8006d8e:	4770      	bx	lr
