
Ultra_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028b8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002978  08002978  00012978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029e8  080029e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080029e8  080029e8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029e8  080029e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029e8  080029e8  000129e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029ec  080029ec  000129ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080029f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080029fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080029fc  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007599  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013be  00000000  00000000  000275cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  00028990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000800  00000000  00000000  00029238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000edc1  00000000  00000000  00029a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000977a  00000000  00000000  000387f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005cf7e  00000000  00000000  00041f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009eef1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000205c  00000000  00000000  0009ef44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002960 	.word	0x08002960

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002960 	.word	0x08002960

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fa3d 	bl	80006a8 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 f9c9 	bl	80005d0 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fa2f 	bl	80006a8 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fa25 	bl	80006a8 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f9d5 	bl	800061c <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f9cb 	bl	800061c <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_fadd>:
 8000294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000296:	46c6      	mov	lr, r8
 8000298:	0243      	lsls	r3, r0, #9
 800029a:	0a5b      	lsrs	r3, r3, #9
 800029c:	024e      	lsls	r6, r1, #9
 800029e:	0045      	lsls	r5, r0, #1
 80002a0:	004f      	lsls	r7, r1, #1
 80002a2:	00da      	lsls	r2, r3, #3
 80002a4:	0fc4      	lsrs	r4, r0, #31
 80002a6:	469c      	mov	ip, r3
 80002a8:	0a70      	lsrs	r0, r6, #9
 80002aa:	4690      	mov	r8, r2
 80002ac:	b500      	push	{lr}
 80002ae:	0e2d      	lsrs	r5, r5, #24
 80002b0:	0e3f      	lsrs	r7, r7, #24
 80002b2:	0fc9      	lsrs	r1, r1, #31
 80002b4:	09b6      	lsrs	r6, r6, #6
 80002b6:	428c      	cmp	r4, r1
 80002b8:	d04b      	beq.n	8000352 <__aeabi_fadd+0xbe>
 80002ba:	1bea      	subs	r2, r5, r7
 80002bc:	2a00      	cmp	r2, #0
 80002be:	dd36      	ble.n	800032e <__aeabi_fadd+0x9a>
 80002c0:	2f00      	cmp	r7, #0
 80002c2:	d061      	beq.n	8000388 <__aeabi_fadd+0xf4>
 80002c4:	2dff      	cmp	r5, #255	; 0xff
 80002c6:	d100      	bne.n	80002ca <__aeabi_fadd+0x36>
 80002c8:	e0ad      	b.n	8000426 <__aeabi_fadd+0x192>
 80002ca:	2380      	movs	r3, #128	; 0x80
 80002cc:	04db      	lsls	r3, r3, #19
 80002ce:	431e      	orrs	r6, r3
 80002d0:	2a1b      	cmp	r2, #27
 80002d2:	dc00      	bgt.n	80002d6 <__aeabi_fadd+0x42>
 80002d4:	e0d3      	b.n	800047e <__aeabi_fadd+0x1ea>
 80002d6:	2001      	movs	r0, #1
 80002d8:	4643      	mov	r3, r8
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	0143      	lsls	r3, r0, #5
 80002de:	d400      	bmi.n	80002e2 <__aeabi_fadd+0x4e>
 80002e0:	e08c      	b.n	80003fc <__aeabi_fadd+0x168>
 80002e2:	0180      	lsls	r0, r0, #6
 80002e4:	0987      	lsrs	r7, r0, #6
 80002e6:	0038      	movs	r0, r7
 80002e8:	f000 fda0 	bl	8000e2c <__clzsi2>
 80002ec:	3805      	subs	r0, #5
 80002ee:	4087      	lsls	r7, r0
 80002f0:	4285      	cmp	r5, r0
 80002f2:	dc00      	bgt.n	80002f6 <__aeabi_fadd+0x62>
 80002f4:	e0b6      	b.n	8000464 <__aeabi_fadd+0x1d0>
 80002f6:	1a2d      	subs	r5, r5, r0
 80002f8:	48b3      	ldr	r0, [pc, #716]	; (80005c8 <__aeabi_fadd+0x334>)
 80002fa:	4038      	ands	r0, r7
 80002fc:	0743      	lsls	r3, r0, #29
 80002fe:	d004      	beq.n	800030a <__aeabi_fadd+0x76>
 8000300:	230f      	movs	r3, #15
 8000302:	4003      	ands	r3, r0
 8000304:	2b04      	cmp	r3, #4
 8000306:	d000      	beq.n	800030a <__aeabi_fadd+0x76>
 8000308:	3004      	adds	r0, #4
 800030a:	0143      	lsls	r3, r0, #5
 800030c:	d400      	bmi.n	8000310 <__aeabi_fadd+0x7c>
 800030e:	e078      	b.n	8000402 <__aeabi_fadd+0x16e>
 8000310:	1c6a      	adds	r2, r5, #1
 8000312:	2dfe      	cmp	r5, #254	; 0xfe
 8000314:	d065      	beq.n	80003e2 <__aeabi_fadd+0x14e>
 8000316:	0180      	lsls	r0, r0, #6
 8000318:	0a43      	lsrs	r3, r0, #9
 800031a:	469c      	mov	ip, r3
 800031c:	b2d2      	uxtb	r2, r2
 800031e:	4663      	mov	r3, ip
 8000320:	05d0      	lsls	r0, r2, #23
 8000322:	4318      	orrs	r0, r3
 8000324:	07e4      	lsls	r4, r4, #31
 8000326:	4320      	orrs	r0, r4
 8000328:	bc80      	pop	{r7}
 800032a:	46b8      	mov	r8, r7
 800032c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800032e:	2a00      	cmp	r2, #0
 8000330:	d035      	beq.n	800039e <__aeabi_fadd+0x10a>
 8000332:	1b7a      	subs	r2, r7, r5
 8000334:	2d00      	cmp	r5, #0
 8000336:	d000      	beq.n	800033a <__aeabi_fadd+0xa6>
 8000338:	e0af      	b.n	800049a <__aeabi_fadd+0x206>
 800033a:	4643      	mov	r3, r8
 800033c:	2b00      	cmp	r3, #0
 800033e:	d100      	bne.n	8000342 <__aeabi_fadd+0xae>
 8000340:	e0a7      	b.n	8000492 <__aeabi_fadd+0x1fe>
 8000342:	1e53      	subs	r3, r2, #1
 8000344:	2a01      	cmp	r2, #1
 8000346:	d100      	bne.n	800034a <__aeabi_fadd+0xb6>
 8000348:	e12f      	b.n	80005aa <__aeabi_fadd+0x316>
 800034a:	2aff      	cmp	r2, #255	; 0xff
 800034c:	d069      	beq.n	8000422 <__aeabi_fadd+0x18e>
 800034e:	001a      	movs	r2, r3
 8000350:	e0aa      	b.n	80004a8 <__aeabi_fadd+0x214>
 8000352:	1be9      	subs	r1, r5, r7
 8000354:	2900      	cmp	r1, #0
 8000356:	dd70      	ble.n	800043a <__aeabi_fadd+0x1a6>
 8000358:	2f00      	cmp	r7, #0
 800035a:	d037      	beq.n	80003cc <__aeabi_fadd+0x138>
 800035c:	2dff      	cmp	r5, #255	; 0xff
 800035e:	d062      	beq.n	8000426 <__aeabi_fadd+0x192>
 8000360:	2380      	movs	r3, #128	; 0x80
 8000362:	04db      	lsls	r3, r3, #19
 8000364:	431e      	orrs	r6, r3
 8000366:	291b      	cmp	r1, #27
 8000368:	dc00      	bgt.n	800036c <__aeabi_fadd+0xd8>
 800036a:	e0b0      	b.n	80004ce <__aeabi_fadd+0x23a>
 800036c:	2001      	movs	r0, #1
 800036e:	4440      	add	r0, r8
 8000370:	0143      	lsls	r3, r0, #5
 8000372:	d543      	bpl.n	80003fc <__aeabi_fadd+0x168>
 8000374:	3501      	adds	r5, #1
 8000376:	2dff      	cmp	r5, #255	; 0xff
 8000378:	d033      	beq.n	80003e2 <__aeabi_fadd+0x14e>
 800037a:	2301      	movs	r3, #1
 800037c:	4a93      	ldr	r2, [pc, #588]	; (80005cc <__aeabi_fadd+0x338>)
 800037e:	4003      	ands	r3, r0
 8000380:	0840      	lsrs	r0, r0, #1
 8000382:	4010      	ands	r0, r2
 8000384:	4318      	orrs	r0, r3
 8000386:	e7b9      	b.n	80002fc <__aeabi_fadd+0x68>
 8000388:	2e00      	cmp	r6, #0
 800038a:	d100      	bne.n	800038e <__aeabi_fadd+0xfa>
 800038c:	e083      	b.n	8000496 <__aeabi_fadd+0x202>
 800038e:	1e51      	subs	r1, r2, #1
 8000390:	2a01      	cmp	r2, #1
 8000392:	d100      	bne.n	8000396 <__aeabi_fadd+0x102>
 8000394:	e0d8      	b.n	8000548 <__aeabi_fadd+0x2b4>
 8000396:	2aff      	cmp	r2, #255	; 0xff
 8000398:	d045      	beq.n	8000426 <__aeabi_fadd+0x192>
 800039a:	000a      	movs	r2, r1
 800039c:	e798      	b.n	80002d0 <__aeabi_fadd+0x3c>
 800039e:	27fe      	movs	r7, #254	; 0xfe
 80003a0:	1c6a      	adds	r2, r5, #1
 80003a2:	4217      	tst	r7, r2
 80003a4:	d000      	beq.n	80003a8 <__aeabi_fadd+0x114>
 80003a6:	e086      	b.n	80004b6 <__aeabi_fadd+0x222>
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	d000      	beq.n	80003ae <__aeabi_fadd+0x11a>
 80003ac:	e0b7      	b.n	800051e <__aeabi_fadd+0x28a>
 80003ae:	4643      	mov	r3, r8
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d100      	bne.n	80003b6 <__aeabi_fadd+0x122>
 80003b4:	e0f3      	b.n	800059e <__aeabi_fadd+0x30a>
 80003b6:	2200      	movs	r2, #0
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0b0      	beq.n	800031e <__aeabi_fadd+0x8a>
 80003bc:	1b98      	subs	r0, r3, r6
 80003be:	0143      	lsls	r3, r0, #5
 80003c0:	d400      	bmi.n	80003c4 <__aeabi_fadd+0x130>
 80003c2:	e0fa      	b.n	80005ba <__aeabi_fadd+0x326>
 80003c4:	4643      	mov	r3, r8
 80003c6:	000c      	movs	r4, r1
 80003c8:	1af0      	subs	r0, r6, r3
 80003ca:	e797      	b.n	80002fc <__aeabi_fadd+0x68>
 80003cc:	2e00      	cmp	r6, #0
 80003ce:	d100      	bne.n	80003d2 <__aeabi_fadd+0x13e>
 80003d0:	e0c8      	b.n	8000564 <__aeabi_fadd+0x2d0>
 80003d2:	1e4a      	subs	r2, r1, #1
 80003d4:	2901      	cmp	r1, #1
 80003d6:	d100      	bne.n	80003da <__aeabi_fadd+0x146>
 80003d8:	e0ae      	b.n	8000538 <__aeabi_fadd+0x2a4>
 80003da:	29ff      	cmp	r1, #255	; 0xff
 80003dc:	d023      	beq.n	8000426 <__aeabi_fadd+0x192>
 80003de:	0011      	movs	r1, r2
 80003e0:	e7c1      	b.n	8000366 <__aeabi_fadd+0xd2>
 80003e2:	2300      	movs	r3, #0
 80003e4:	22ff      	movs	r2, #255	; 0xff
 80003e6:	469c      	mov	ip, r3
 80003e8:	e799      	b.n	800031e <__aeabi_fadd+0x8a>
 80003ea:	21fe      	movs	r1, #254	; 0xfe
 80003ec:	1c6a      	adds	r2, r5, #1
 80003ee:	4211      	tst	r1, r2
 80003f0:	d077      	beq.n	80004e2 <__aeabi_fadd+0x24e>
 80003f2:	2aff      	cmp	r2, #255	; 0xff
 80003f4:	d0f5      	beq.n	80003e2 <__aeabi_fadd+0x14e>
 80003f6:	0015      	movs	r5, r2
 80003f8:	4446      	add	r6, r8
 80003fa:	0870      	lsrs	r0, r6, #1
 80003fc:	0743      	lsls	r3, r0, #29
 80003fe:	d000      	beq.n	8000402 <__aeabi_fadd+0x16e>
 8000400:	e77e      	b.n	8000300 <__aeabi_fadd+0x6c>
 8000402:	08c3      	lsrs	r3, r0, #3
 8000404:	2dff      	cmp	r5, #255	; 0xff
 8000406:	d00e      	beq.n	8000426 <__aeabi_fadd+0x192>
 8000408:	025b      	lsls	r3, r3, #9
 800040a:	0a5b      	lsrs	r3, r3, #9
 800040c:	469c      	mov	ip, r3
 800040e:	b2ea      	uxtb	r2, r5
 8000410:	e785      	b.n	800031e <__aeabi_fadd+0x8a>
 8000412:	2e00      	cmp	r6, #0
 8000414:	d007      	beq.n	8000426 <__aeabi_fadd+0x192>
 8000416:	2280      	movs	r2, #128	; 0x80
 8000418:	03d2      	lsls	r2, r2, #15
 800041a:	4213      	tst	r3, r2
 800041c:	d003      	beq.n	8000426 <__aeabi_fadd+0x192>
 800041e:	4210      	tst	r0, r2
 8000420:	d101      	bne.n	8000426 <__aeabi_fadd+0x192>
 8000422:	000c      	movs	r4, r1
 8000424:	0003      	movs	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d0db      	beq.n	80003e2 <__aeabi_fadd+0x14e>
 800042a:	2080      	movs	r0, #128	; 0x80
 800042c:	03c0      	lsls	r0, r0, #15
 800042e:	4318      	orrs	r0, r3
 8000430:	0240      	lsls	r0, r0, #9
 8000432:	0a43      	lsrs	r3, r0, #9
 8000434:	469c      	mov	ip, r3
 8000436:	22ff      	movs	r2, #255	; 0xff
 8000438:	e771      	b.n	800031e <__aeabi_fadd+0x8a>
 800043a:	2900      	cmp	r1, #0
 800043c:	d0d5      	beq.n	80003ea <__aeabi_fadd+0x156>
 800043e:	1b7a      	subs	r2, r7, r5
 8000440:	2d00      	cmp	r5, #0
 8000442:	d160      	bne.n	8000506 <__aeabi_fadd+0x272>
 8000444:	4643      	mov	r3, r8
 8000446:	2b00      	cmp	r3, #0
 8000448:	d024      	beq.n	8000494 <__aeabi_fadd+0x200>
 800044a:	1e53      	subs	r3, r2, #1
 800044c:	2a01      	cmp	r2, #1
 800044e:	d073      	beq.n	8000538 <__aeabi_fadd+0x2a4>
 8000450:	2aff      	cmp	r2, #255	; 0xff
 8000452:	d0e7      	beq.n	8000424 <__aeabi_fadd+0x190>
 8000454:	001a      	movs	r2, r3
 8000456:	2a1b      	cmp	r2, #27
 8000458:	dc00      	bgt.n	800045c <__aeabi_fadd+0x1c8>
 800045a:	e085      	b.n	8000568 <__aeabi_fadd+0x2d4>
 800045c:	2001      	movs	r0, #1
 800045e:	003d      	movs	r5, r7
 8000460:	1980      	adds	r0, r0, r6
 8000462:	e785      	b.n	8000370 <__aeabi_fadd+0xdc>
 8000464:	2320      	movs	r3, #32
 8000466:	003a      	movs	r2, r7
 8000468:	1b45      	subs	r5, r0, r5
 800046a:	0038      	movs	r0, r7
 800046c:	3501      	adds	r5, #1
 800046e:	40ea      	lsrs	r2, r5
 8000470:	1b5d      	subs	r5, r3, r5
 8000472:	40a8      	lsls	r0, r5
 8000474:	1e43      	subs	r3, r0, #1
 8000476:	4198      	sbcs	r0, r3
 8000478:	2500      	movs	r5, #0
 800047a:	4310      	orrs	r0, r2
 800047c:	e73e      	b.n	80002fc <__aeabi_fadd+0x68>
 800047e:	2320      	movs	r3, #32
 8000480:	0030      	movs	r0, r6
 8000482:	1a9b      	subs	r3, r3, r2
 8000484:	0031      	movs	r1, r6
 8000486:	4098      	lsls	r0, r3
 8000488:	40d1      	lsrs	r1, r2
 800048a:	1e43      	subs	r3, r0, #1
 800048c:	4198      	sbcs	r0, r3
 800048e:	4308      	orrs	r0, r1
 8000490:	e722      	b.n	80002d8 <__aeabi_fadd+0x44>
 8000492:	000c      	movs	r4, r1
 8000494:	0003      	movs	r3, r0
 8000496:	0015      	movs	r5, r2
 8000498:	e7b4      	b.n	8000404 <__aeabi_fadd+0x170>
 800049a:	2fff      	cmp	r7, #255	; 0xff
 800049c:	d0c1      	beq.n	8000422 <__aeabi_fadd+0x18e>
 800049e:	2380      	movs	r3, #128	; 0x80
 80004a0:	4640      	mov	r0, r8
 80004a2:	04db      	lsls	r3, r3, #19
 80004a4:	4318      	orrs	r0, r3
 80004a6:	4680      	mov	r8, r0
 80004a8:	2a1b      	cmp	r2, #27
 80004aa:	dd51      	ble.n	8000550 <__aeabi_fadd+0x2bc>
 80004ac:	2001      	movs	r0, #1
 80004ae:	000c      	movs	r4, r1
 80004b0:	003d      	movs	r5, r7
 80004b2:	1a30      	subs	r0, r6, r0
 80004b4:	e712      	b.n	80002dc <__aeabi_fadd+0x48>
 80004b6:	4643      	mov	r3, r8
 80004b8:	1b9f      	subs	r7, r3, r6
 80004ba:	017b      	lsls	r3, r7, #5
 80004bc:	d42b      	bmi.n	8000516 <__aeabi_fadd+0x282>
 80004be:	2f00      	cmp	r7, #0
 80004c0:	d000      	beq.n	80004c4 <__aeabi_fadd+0x230>
 80004c2:	e710      	b.n	80002e6 <__aeabi_fadd+0x52>
 80004c4:	2300      	movs	r3, #0
 80004c6:	2400      	movs	r4, #0
 80004c8:	2200      	movs	r2, #0
 80004ca:	469c      	mov	ip, r3
 80004cc:	e727      	b.n	800031e <__aeabi_fadd+0x8a>
 80004ce:	2320      	movs	r3, #32
 80004d0:	0032      	movs	r2, r6
 80004d2:	0030      	movs	r0, r6
 80004d4:	40ca      	lsrs	r2, r1
 80004d6:	1a59      	subs	r1, r3, r1
 80004d8:	4088      	lsls	r0, r1
 80004da:	1e43      	subs	r3, r0, #1
 80004dc:	4198      	sbcs	r0, r3
 80004de:	4310      	orrs	r0, r2
 80004e0:	e745      	b.n	800036e <__aeabi_fadd+0xda>
 80004e2:	2d00      	cmp	r5, #0
 80004e4:	d14a      	bne.n	800057c <__aeabi_fadd+0x2e8>
 80004e6:	4643      	mov	r3, r8
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d063      	beq.n	80005b4 <__aeabi_fadd+0x320>
 80004ec:	2200      	movs	r2, #0
 80004ee:	2e00      	cmp	r6, #0
 80004f0:	d100      	bne.n	80004f4 <__aeabi_fadd+0x260>
 80004f2:	e714      	b.n	800031e <__aeabi_fadd+0x8a>
 80004f4:	0030      	movs	r0, r6
 80004f6:	4440      	add	r0, r8
 80004f8:	0143      	lsls	r3, r0, #5
 80004fa:	d400      	bmi.n	80004fe <__aeabi_fadd+0x26a>
 80004fc:	e77e      	b.n	80003fc <__aeabi_fadd+0x168>
 80004fe:	4b32      	ldr	r3, [pc, #200]	; (80005c8 <__aeabi_fadd+0x334>)
 8000500:	3501      	adds	r5, #1
 8000502:	4018      	ands	r0, r3
 8000504:	e77a      	b.n	80003fc <__aeabi_fadd+0x168>
 8000506:	2fff      	cmp	r7, #255	; 0xff
 8000508:	d08c      	beq.n	8000424 <__aeabi_fadd+0x190>
 800050a:	2380      	movs	r3, #128	; 0x80
 800050c:	4641      	mov	r1, r8
 800050e:	04db      	lsls	r3, r3, #19
 8000510:	4319      	orrs	r1, r3
 8000512:	4688      	mov	r8, r1
 8000514:	e79f      	b.n	8000456 <__aeabi_fadd+0x1c2>
 8000516:	4643      	mov	r3, r8
 8000518:	000c      	movs	r4, r1
 800051a:	1af7      	subs	r7, r6, r3
 800051c:	e6e3      	b.n	80002e6 <__aeabi_fadd+0x52>
 800051e:	4642      	mov	r2, r8
 8000520:	2a00      	cmp	r2, #0
 8000522:	d000      	beq.n	8000526 <__aeabi_fadd+0x292>
 8000524:	e775      	b.n	8000412 <__aeabi_fadd+0x17e>
 8000526:	2e00      	cmp	r6, #0
 8000528:	d000      	beq.n	800052c <__aeabi_fadd+0x298>
 800052a:	e77a      	b.n	8000422 <__aeabi_fadd+0x18e>
 800052c:	2380      	movs	r3, #128	; 0x80
 800052e:	03db      	lsls	r3, r3, #15
 8000530:	2400      	movs	r4, #0
 8000532:	469c      	mov	ip, r3
 8000534:	22ff      	movs	r2, #255	; 0xff
 8000536:	e6f2      	b.n	800031e <__aeabi_fadd+0x8a>
 8000538:	0030      	movs	r0, r6
 800053a:	4440      	add	r0, r8
 800053c:	2501      	movs	r5, #1
 800053e:	0143      	lsls	r3, r0, #5
 8000540:	d400      	bmi.n	8000544 <__aeabi_fadd+0x2b0>
 8000542:	e75b      	b.n	80003fc <__aeabi_fadd+0x168>
 8000544:	2502      	movs	r5, #2
 8000546:	e718      	b.n	800037a <__aeabi_fadd+0xe6>
 8000548:	4643      	mov	r3, r8
 800054a:	2501      	movs	r5, #1
 800054c:	1b98      	subs	r0, r3, r6
 800054e:	e6c5      	b.n	80002dc <__aeabi_fadd+0x48>
 8000550:	2320      	movs	r3, #32
 8000552:	4644      	mov	r4, r8
 8000554:	4640      	mov	r0, r8
 8000556:	40d4      	lsrs	r4, r2
 8000558:	1a9a      	subs	r2, r3, r2
 800055a:	4090      	lsls	r0, r2
 800055c:	1e43      	subs	r3, r0, #1
 800055e:	4198      	sbcs	r0, r3
 8000560:	4320      	orrs	r0, r4
 8000562:	e7a4      	b.n	80004ae <__aeabi_fadd+0x21a>
 8000564:	000d      	movs	r5, r1
 8000566:	e74d      	b.n	8000404 <__aeabi_fadd+0x170>
 8000568:	2320      	movs	r3, #32
 800056a:	4641      	mov	r1, r8
 800056c:	4640      	mov	r0, r8
 800056e:	40d1      	lsrs	r1, r2
 8000570:	1a9a      	subs	r2, r3, r2
 8000572:	4090      	lsls	r0, r2
 8000574:	1e43      	subs	r3, r0, #1
 8000576:	4198      	sbcs	r0, r3
 8000578:	4308      	orrs	r0, r1
 800057a:	e770      	b.n	800045e <__aeabi_fadd+0x1ca>
 800057c:	4642      	mov	r2, r8
 800057e:	2a00      	cmp	r2, #0
 8000580:	d100      	bne.n	8000584 <__aeabi_fadd+0x2f0>
 8000582:	e74f      	b.n	8000424 <__aeabi_fadd+0x190>
 8000584:	2e00      	cmp	r6, #0
 8000586:	d100      	bne.n	800058a <__aeabi_fadd+0x2f6>
 8000588:	e74d      	b.n	8000426 <__aeabi_fadd+0x192>
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	03d2      	lsls	r2, r2, #15
 800058e:	4213      	tst	r3, r2
 8000590:	d100      	bne.n	8000594 <__aeabi_fadd+0x300>
 8000592:	e748      	b.n	8000426 <__aeabi_fadd+0x192>
 8000594:	4210      	tst	r0, r2
 8000596:	d000      	beq.n	800059a <__aeabi_fadd+0x306>
 8000598:	e745      	b.n	8000426 <__aeabi_fadd+0x192>
 800059a:	0003      	movs	r3, r0
 800059c:	e743      	b.n	8000426 <__aeabi_fadd+0x192>
 800059e:	2e00      	cmp	r6, #0
 80005a0:	d090      	beq.n	80004c4 <__aeabi_fadd+0x230>
 80005a2:	000c      	movs	r4, r1
 80005a4:	4684      	mov	ip, r0
 80005a6:	2200      	movs	r2, #0
 80005a8:	e6b9      	b.n	800031e <__aeabi_fadd+0x8a>
 80005aa:	4643      	mov	r3, r8
 80005ac:	000c      	movs	r4, r1
 80005ae:	1af0      	subs	r0, r6, r3
 80005b0:	3501      	adds	r5, #1
 80005b2:	e693      	b.n	80002dc <__aeabi_fadd+0x48>
 80005b4:	4684      	mov	ip, r0
 80005b6:	2200      	movs	r2, #0
 80005b8:	e6b1      	b.n	800031e <__aeabi_fadd+0x8a>
 80005ba:	2800      	cmp	r0, #0
 80005bc:	d000      	beq.n	80005c0 <__aeabi_fadd+0x32c>
 80005be:	e71d      	b.n	80003fc <__aeabi_fadd+0x168>
 80005c0:	2300      	movs	r3, #0
 80005c2:	2400      	movs	r4, #0
 80005c4:	469c      	mov	ip, r3
 80005c6:	e6aa      	b.n	800031e <__aeabi_fadd+0x8a>
 80005c8:	fbffffff 	.word	0xfbffffff
 80005cc:	7dffffff 	.word	0x7dffffff

080005d0 <__eqsf2>:
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	0042      	lsls	r2, r0, #1
 80005d4:	0245      	lsls	r5, r0, #9
 80005d6:	024e      	lsls	r6, r1, #9
 80005d8:	004c      	lsls	r4, r1, #1
 80005da:	0fc3      	lsrs	r3, r0, #31
 80005dc:	0a6d      	lsrs	r5, r5, #9
 80005de:	2001      	movs	r0, #1
 80005e0:	0e12      	lsrs	r2, r2, #24
 80005e2:	0a76      	lsrs	r6, r6, #9
 80005e4:	0e24      	lsrs	r4, r4, #24
 80005e6:	0fc9      	lsrs	r1, r1, #31
 80005e8:	2aff      	cmp	r2, #255	; 0xff
 80005ea:	d006      	beq.n	80005fa <__eqsf2+0x2a>
 80005ec:	2cff      	cmp	r4, #255	; 0xff
 80005ee:	d003      	beq.n	80005f8 <__eqsf2+0x28>
 80005f0:	42a2      	cmp	r2, r4
 80005f2:	d101      	bne.n	80005f8 <__eqsf2+0x28>
 80005f4:	42b5      	cmp	r5, r6
 80005f6:	d006      	beq.n	8000606 <__eqsf2+0x36>
 80005f8:	bd70      	pop	{r4, r5, r6, pc}
 80005fa:	2d00      	cmp	r5, #0
 80005fc:	d1fc      	bne.n	80005f8 <__eqsf2+0x28>
 80005fe:	2cff      	cmp	r4, #255	; 0xff
 8000600:	d1fa      	bne.n	80005f8 <__eqsf2+0x28>
 8000602:	2e00      	cmp	r6, #0
 8000604:	d1f8      	bne.n	80005f8 <__eqsf2+0x28>
 8000606:	428b      	cmp	r3, r1
 8000608:	d006      	beq.n	8000618 <__eqsf2+0x48>
 800060a:	2001      	movs	r0, #1
 800060c:	2a00      	cmp	r2, #0
 800060e:	d1f3      	bne.n	80005f8 <__eqsf2+0x28>
 8000610:	0028      	movs	r0, r5
 8000612:	1e43      	subs	r3, r0, #1
 8000614:	4198      	sbcs	r0, r3
 8000616:	e7ef      	b.n	80005f8 <__eqsf2+0x28>
 8000618:	2000      	movs	r0, #0
 800061a:	e7ed      	b.n	80005f8 <__eqsf2+0x28>

0800061c <__gesf2>:
 800061c:	b570      	push	{r4, r5, r6, lr}
 800061e:	0042      	lsls	r2, r0, #1
 8000620:	0245      	lsls	r5, r0, #9
 8000622:	024e      	lsls	r6, r1, #9
 8000624:	004c      	lsls	r4, r1, #1
 8000626:	0fc3      	lsrs	r3, r0, #31
 8000628:	0a6d      	lsrs	r5, r5, #9
 800062a:	0e12      	lsrs	r2, r2, #24
 800062c:	0a76      	lsrs	r6, r6, #9
 800062e:	0e24      	lsrs	r4, r4, #24
 8000630:	0fc8      	lsrs	r0, r1, #31
 8000632:	2aff      	cmp	r2, #255	; 0xff
 8000634:	d01b      	beq.n	800066e <__gesf2+0x52>
 8000636:	2cff      	cmp	r4, #255	; 0xff
 8000638:	d00e      	beq.n	8000658 <__gesf2+0x3c>
 800063a:	2a00      	cmp	r2, #0
 800063c:	d11b      	bne.n	8000676 <__gesf2+0x5a>
 800063e:	2c00      	cmp	r4, #0
 8000640:	d101      	bne.n	8000646 <__gesf2+0x2a>
 8000642:	2e00      	cmp	r6, #0
 8000644:	d01c      	beq.n	8000680 <__gesf2+0x64>
 8000646:	2d00      	cmp	r5, #0
 8000648:	d00c      	beq.n	8000664 <__gesf2+0x48>
 800064a:	4283      	cmp	r3, r0
 800064c:	d01c      	beq.n	8000688 <__gesf2+0x6c>
 800064e:	2102      	movs	r1, #2
 8000650:	1e58      	subs	r0, r3, #1
 8000652:	4008      	ands	r0, r1
 8000654:	3801      	subs	r0, #1
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	2e00      	cmp	r6, #0
 800065a:	d122      	bne.n	80006a2 <__gesf2+0x86>
 800065c:	2a00      	cmp	r2, #0
 800065e:	d1f4      	bne.n	800064a <__gesf2+0x2e>
 8000660:	2d00      	cmp	r5, #0
 8000662:	d1f2      	bne.n	800064a <__gesf2+0x2e>
 8000664:	2800      	cmp	r0, #0
 8000666:	d1f6      	bne.n	8000656 <__gesf2+0x3a>
 8000668:	2001      	movs	r0, #1
 800066a:	4240      	negs	r0, r0
 800066c:	e7f3      	b.n	8000656 <__gesf2+0x3a>
 800066e:	2d00      	cmp	r5, #0
 8000670:	d117      	bne.n	80006a2 <__gesf2+0x86>
 8000672:	2cff      	cmp	r4, #255	; 0xff
 8000674:	d0f0      	beq.n	8000658 <__gesf2+0x3c>
 8000676:	2c00      	cmp	r4, #0
 8000678:	d1e7      	bne.n	800064a <__gesf2+0x2e>
 800067a:	2e00      	cmp	r6, #0
 800067c:	d1e5      	bne.n	800064a <__gesf2+0x2e>
 800067e:	e7e6      	b.n	800064e <__gesf2+0x32>
 8000680:	2000      	movs	r0, #0
 8000682:	2d00      	cmp	r5, #0
 8000684:	d0e7      	beq.n	8000656 <__gesf2+0x3a>
 8000686:	e7e2      	b.n	800064e <__gesf2+0x32>
 8000688:	42a2      	cmp	r2, r4
 800068a:	dc05      	bgt.n	8000698 <__gesf2+0x7c>
 800068c:	dbea      	blt.n	8000664 <__gesf2+0x48>
 800068e:	42b5      	cmp	r5, r6
 8000690:	d802      	bhi.n	8000698 <__gesf2+0x7c>
 8000692:	d3e7      	bcc.n	8000664 <__gesf2+0x48>
 8000694:	2000      	movs	r0, #0
 8000696:	e7de      	b.n	8000656 <__gesf2+0x3a>
 8000698:	4243      	negs	r3, r0
 800069a:	4158      	adcs	r0, r3
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	3801      	subs	r0, #1
 80006a0:	e7d9      	b.n	8000656 <__gesf2+0x3a>
 80006a2:	2002      	movs	r0, #2
 80006a4:	4240      	negs	r0, r0
 80006a6:	e7d6      	b.n	8000656 <__gesf2+0x3a>

080006a8 <__lesf2>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	0042      	lsls	r2, r0, #1
 80006ac:	0245      	lsls	r5, r0, #9
 80006ae:	024e      	lsls	r6, r1, #9
 80006b0:	004c      	lsls	r4, r1, #1
 80006b2:	0fc3      	lsrs	r3, r0, #31
 80006b4:	0a6d      	lsrs	r5, r5, #9
 80006b6:	0e12      	lsrs	r2, r2, #24
 80006b8:	0a76      	lsrs	r6, r6, #9
 80006ba:	0e24      	lsrs	r4, r4, #24
 80006bc:	0fc8      	lsrs	r0, r1, #31
 80006be:	2aff      	cmp	r2, #255	; 0xff
 80006c0:	d00b      	beq.n	80006da <__lesf2+0x32>
 80006c2:	2cff      	cmp	r4, #255	; 0xff
 80006c4:	d00d      	beq.n	80006e2 <__lesf2+0x3a>
 80006c6:	2a00      	cmp	r2, #0
 80006c8:	d11f      	bne.n	800070a <__lesf2+0x62>
 80006ca:	2c00      	cmp	r4, #0
 80006cc:	d116      	bne.n	80006fc <__lesf2+0x54>
 80006ce:	2e00      	cmp	r6, #0
 80006d0:	d114      	bne.n	80006fc <__lesf2+0x54>
 80006d2:	2000      	movs	r0, #0
 80006d4:	2d00      	cmp	r5, #0
 80006d6:	d010      	beq.n	80006fa <__lesf2+0x52>
 80006d8:	e009      	b.n	80006ee <__lesf2+0x46>
 80006da:	2d00      	cmp	r5, #0
 80006dc:	d10c      	bne.n	80006f8 <__lesf2+0x50>
 80006de:	2cff      	cmp	r4, #255	; 0xff
 80006e0:	d113      	bne.n	800070a <__lesf2+0x62>
 80006e2:	2e00      	cmp	r6, #0
 80006e4:	d108      	bne.n	80006f8 <__lesf2+0x50>
 80006e6:	2a00      	cmp	r2, #0
 80006e8:	d008      	beq.n	80006fc <__lesf2+0x54>
 80006ea:	4283      	cmp	r3, r0
 80006ec:	d012      	beq.n	8000714 <__lesf2+0x6c>
 80006ee:	2102      	movs	r1, #2
 80006f0:	1e58      	subs	r0, r3, #1
 80006f2:	4008      	ands	r0, r1
 80006f4:	3801      	subs	r0, #1
 80006f6:	e000      	b.n	80006fa <__lesf2+0x52>
 80006f8:	2002      	movs	r0, #2
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	2d00      	cmp	r5, #0
 80006fe:	d1f4      	bne.n	80006ea <__lesf2+0x42>
 8000700:	2800      	cmp	r0, #0
 8000702:	d1fa      	bne.n	80006fa <__lesf2+0x52>
 8000704:	2001      	movs	r0, #1
 8000706:	4240      	negs	r0, r0
 8000708:	e7f7      	b.n	80006fa <__lesf2+0x52>
 800070a:	2c00      	cmp	r4, #0
 800070c:	d1ed      	bne.n	80006ea <__lesf2+0x42>
 800070e:	2e00      	cmp	r6, #0
 8000710:	d1eb      	bne.n	80006ea <__lesf2+0x42>
 8000712:	e7ec      	b.n	80006ee <__lesf2+0x46>
 8000714:	42a2      	cmp	r2, r4
 8000716:	dc05      	bgt.n	8000724 <__lesf2+0x7c>
 8000718:	dbf2      	blt.n	8000700 <__lesf2+0x58>
 800071a:	42b5      	cmp	r5, r6
 800071c:	d802      	bhi.n	8000724 <__lesf2+0x7c>
 800071e:	d3ef      	bcc.n	8000700 <__lesf2+0x58>
 8000720:	2000      	movs	r0, #0
 8000722:	e7ea      	b.n	80006fa <__lesf2+0x52>
 8000724:	4243      	negs	r3, r0
 8000726:	4158      	adcs	r0, r3
 8000728:	0040      	lsls	r0, r0, #1
 800072a:	3801      	subs	r0, #1
 800072c:	e7e5      	b.n	80006fa <__lesf2+0x52>
 800072e:	46c0      	nop			; (mov r8, r8)

08000730 <__aeabi_ui2f>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	1e05      	subs	r5, r0, #0
 8000734:	d00e      	beq.n	8000754 <__aeabi_ui2f+0x24>
 8000736:	f000 fb79 	bl	8000e2c <__clzsi2>
 800073a:	239e      	movs	r3, #158	; 0x9e
 800073c:	0004      	movs	r4, r0
 800073e:	1a1b      	subs	r3, r3, r0
 8000740:	2b96      	cmp	r3, #150	; 0x96
 8000742:	dc0c      	bgt.n	800075e <__aeabi_ui2f+0x2e>
 8000744:	2808      	cmp	r0, #8
 8000746:	dd01      	ble.n	800074c <__aeabi_ui2f+0x1c>
 8000748:	3c08      	subs	r4, #8
 800074a:	40a5      	lsls	r5, r4
 800074c:	026d      	lsls	r5, r5, #9
 800074e:	0a6d      	lsrs	r5, r5, #9
 8000750:	b2d8      	uxtb	r0, r3
 8000752:	e001      	b.n	8000758 <__aeabi_ui2f+0x28>
 8000754:	2000      	movs	r0, #0
 8000756:	2500      	movs	r5, #0
 8000758:	05c0      	lsls	r0, r0, #23
 800075a:	4328      	orrs	r0, r5
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	2b99      	cmp	r3, #153	; 0x99
 8000760:	dd09      	ble.n	8000776 <__aeabi_ui2f+0x46>
 8000762:	0002      	movs	r2, r0
 8000764:	0029      	movs	r1, r5
 8000766:	321b      	adds	r2, #27
 8000768:	4091      	lsls	r1, r2
 800076a:	1e4a      	subs	r2, r1, #1
 800076c:	4191      	sbcs	r1, r2
 800076e:	2205      	movs	r2, #5
 8000770:	1a12      	subs	r2, r2, r0
 8000772:	40d5      	lsrs	r5, r2
 8000774:	430d      	orrs	r5, r1
 8000776:	2c05      	cmp	r4, #5
 8000778:	dc12      	bgt.n	80007a0 <__aeabi_ui2f+0x70>
 800077a:	0029      	movs	r1, r5
 800077c:	4e0c      	ldr	r6, [pc, #48]	; (80007b0 <__aeabi_ui2f+0x80>)
 800077e:	4031      	ands	r1, r6
 8000780:	076a      	lsls	r2, r5, #29
 8000782:	d009      	beq.n	8000798 <__aeabi_ui2f+0x68>
 8000784:	200f      	movs	r0, #15
 8000786:	4028      	ands	r0, r5
 8000788:	2804      	cmp	r0, #4
 800078a:	d005      	beq.n	8000798 <__aeabi_ui2f+0x68>
 800078c:	3104      	adds	r1, #4
 800078e:	014a      	lsls	r2, r1, #5
 8000790:	d502      	bpl.n	8000798 <__aeabi_ui2f+0x68>
 8000792:	239f      	movs	r3, #159	; 0x9f
 8000794:	4031      	ands	r1, r6
 8000796:	1b1b      	subs	r3, r3, r4
 8000798:	0189      	lsls	r1, r1, #6
 800079a:	0a4d      	lsrs	r5, r1, #9
 800079c:	b2d8      	uxtb	r0, r3
 800079e:	e7db      	b.n	8000758 <__aeabi_ui2f+0x28>
 80007a0:	1f62      	subs	r2, r4, #5
 80007a2:	4095      	lsls	r5, r2
 80007a4:	0029      	movs	r1, r5
 80007a6:	4e02      	ldr	r6, [pc, #8]	; (80007b0 <__aeabi_ui2f+0x80>)
 80007a8:	4031      	ands	r1, r6
 80007aa:	076a      	lsls	r2, r5, #29
 80007ac:	d0f4      	beq.n	8000798 <__aeabi_ui2f+0x68>
 80007ae:	e7e9      	b.n	8000784 <__aeabi_ui2f+0x54>
 80007b0:	fbffffff 	.word	0xfbffffff

080007b4 <__aeabi_dmul>:
 80007b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007b6:	4657      	mov	r7, sl
 80007b8:	464e      	mov	r6, r9
 80007ba:	4645      	mov	r5, r8
 80007bc:	46de      	mov	lr, fp
 80007be:	b5e0      	push	{r5, r6, r7, lr}
 80007c0:	4698      	mov	r8, r3
 80007c2:	030c      	lsls	r4, r1, #12
 80007c4:	004b      	lsls	r3, r1, #1
 80007c6:	0006      	movs	r6, r0
 80007c8:	4692      	mov	sl, r2
 80007ca:	b087      	sub	sp, #28
 80007cc:	0b24      	lsrs	r4, r4, #12
 80007ce:	0d5b      	lsrs	r3, r3, #21
 80007d0:	0fcf      	lsrs	r7, r1, #31
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d100      	bne.n	80007d8 <__aeabi_dmul+0x24>
 80007d6:	e15c      	b.n	8000a92 <__aeabi_dmul+0x2de>
 80007d8:	4ad9      	ldr	r2, [pc, #868]	; (8000b40 <__aeabi_dmul+0x38c>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d100      	bne.n	80007e0 <__aeabi_dmul+0x2c>
 80007de:	e175      	b.n	8000acc <__aeabi_dmul+0x318>
 80007e0:	0f42      	lsrs	r2, r0, #29
 80007e2:	00e4      	lsls	r4, r4, #3
 80007e4:	4314      	orrs	r4, r2
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	0412      	lsls	r2, r2, #16
 80007ea:	4314      	orrs	r4, r2
 80007ec:	4ad5      	ldr	r2, [pc, #852]	; (8000b44 <__aeabi_dmul+0x390>)
 80007ee:	00c5      	lsls	r5, r0, #3
 80007f0:	4694      	mov	ip, r2
 80007f2:	4463      	add	r3, ip
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	2300      	movs	r3, #0
 80007f8:	4699      	mov	r9, r3
 80007fa:	469b      	mov	fp, r3
 80007fc:	4643      	mov	r3, r8
 80007fe:	4642      	mov	r2, r8
 8000800:	031e      	lsls	r6, r3, #12
 8000802:	0fd2      	lsrs	r2, r2, #31
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	4650      	mov	r0, sl
 8000808:	4690      	mov	r8, r2
 800080a:	0b36      	lsrs	r6, r6, #12
 800080c:	0d5b      	lsrs	r3, r3, #21
 800080e:	d100      	bne.n	8000812 <__aeabi_dmul+0x5e>
 8000810:	e120      	b.n	8000a54 <__aeabi_dmul+0x2a0>
 8000812:	4acb      	ldr	r2, [pc, #812]	; (8000b40 <__aeabi_dmul+0x38c>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d100      	bne.n	800081a <__aeabi_dmul+0x66>
 8000818:	e162      	b.n	8000ae0 <__aeabi_dmul+0x32c>
 800081a:	49ca      	ldr	r1, [pc, #808]	; (8000b44 <__aeabi_dmul+0x390>)
 800081c:	0f42      	lsrs	r2, r0, #29
 800081e:	468c      	mov	ip, r1
 8000820:	9900      	ldr	r1, [sp, #0]
 8000822:	4463      	add	r3, ip
 8000824:	00f6      	lsls	r6, r6, #3
 8000826:	468c      	mov	ip, r1
 8000828:	4316      	orrs	r6, r2
 800082a:	2280      	movs	r2, #128	; 0x80
 800082c:	449c      	add	ip, r3
 800082e:	0412      	lsls	r2, r2, #16
 8000830:	4663      	mov	r3, ip
 8000832:	4316      	orrs	r6, r2
 8000834:	00c2      	lsls	r2, r0, #3
 8000836:	2000      	movs	r0, #0
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	9900      	ldr	r1, [sp, #0]
 800083c:	4643      	mov	r3, r8
 800083e:	3101      	adds	r1, #1
 8000840:	468c      	mov	ip, r1
 8000842:	4649      	mov	r1, r9
 8000844:	407b      	eors	r3, r7
 8000846:	9301      	str	r3, [sp, #4]
 8000848:	290f      	cmp	r1, #15
 800084a:	d826      	bhi.n	800089a <__aeabi_dmul+0xe6>
 800084c:	4bbe      	ldr	r3, [pc, #760]	; (8000b48 <__aeabi_dmul+0x394>)
 800084e:	0089      	lsls	r1, r1, #2
 8000850:	5859      	ldr	r1, [r3, r1]
 8000852:	468f      	mov	pc, r1
 8000854:	4643      	mov	r3, r8
 8000856:	9301      	str	r3, [sp, #4]
 8000858:	0034      	movs	r4, r6
 800085a:	0015      	movs	r5, r2
 800085c:	4683      	mov	fp, r0
 800085e:	465b      	mov	r3, fp
 8000860:	2b02      	cmp	r3, #2
 8000862:	d016      	beq.n	8000892 <__aeabi_dmul+0xde>
 8000864:	2b03      	cmp	r3, #3
 8000866:	d100      	bne.n	800086a <__aeabi_dmul+0xb6>
 8000868:	e203      	b.n	8000c72 <__aeabi_dmul+0x4be>
 800086a:	2b01      	cmp	r3, #1
 800086c:	d000      	beq.n	8000870 <__aeabi_dmul+0xbc>
 800086e:	e0cd      	b.n	8000a0c <__aeabi_dmul+0x258>
 8000870:	2200      	movs	r2, #0
 8000872:	2400      	movs	r4, #0
 8000874:	2500      	movs	r5, #0
 8000876:	9b01      	ldr	r3, [sp, #4]
 8000878:	0512      	lsls	r2, r2, #20
 800087a:	4322      	orrs	r2, r4
 800087c:	07db      	lsls	r3, r3, #31
 800087e:	431a      	orrs	r2, r3
 8000880:	0028      	movs	r0, r5
 8000882:	0011      	movs	r1, r2
 8000884:	b007      	add	sp, #28
 8000886:	bcf0      	pop	{r4, r5, r6, r7}
 8000888:	46bb      	mov	fp, r7
 800088a:	46b2      	mov	sl, r6
 800088c:	46a9      	mov	r9, r5
 800088e:	46a0      	mov	r8, r4
 8000890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000892:	2400      	movs	r4, #0
 8000894:	2500      	movs	r5, #0
 8000896:	4aaa      	ldr	r2, [pc, #680]	; (8000b40 <__aeabi_dmul+0x38c>)
 8000898:	e7ed      	b.n	8000876 <__aeabi_dmul+0xc2>
 800089a:	0c28      	lsrs	r0, r5, #16
 800089c:	042d      	lsls	r5, r5, #16
 800089e:	0c2d      	lsrs	r5, r5, #16
 80008a0:	002b      	movs	r3, r5
 80008a2:	0c11      	lsrs	r1, r2, #16
 80008a4:	0412      	lsls	r2, r2, #16
 80008a6:	0c12      	lsrs	r2, r2, #16
 80008a8:	4353      	muls	r3, r2
 80008aa:	4698      	mov	r8, r3
 80008ac:	0013      	movs	r3, r2
 80008ae:	002f      	movs	r7, r5
 80008b0:	4343      	muls	r3, r0
 80008b2:	4699      	mov	r9, r3
 80008b4:	434f      	muls	r7, r1
 80008b6:	444f      	add	r7, r9
 80008b8:	46bb      	mov	fp, r7
 80008ba:	4647      	mov	r7, r8
 80008bc:	000b      	movs	r3, r1
 80008be:	0c3f      	lsrs	r7, r7, #16
 80008c0:	46ba      	mov	sl, r7
 80008c2:	4343      	muls	r3, r0
 80008c4:	44da      	add	sl, fp
 80008c6:	9302      	str	r3, [sp, #8]
 80008c8:	45d1      	cmp	r9, sl
 80008ca:	d904      	bls.n	80008d6 <__aeabi_dmul+0x122>
 80008cc:	2780      	movs	r7, #128	; 0x80
 80008ce:	027f      	lsls	r7, r7, #9
 80008d0:	46b9      	mov	r9, r7
 80008d2:	444b      	add	r3, r9
 80008d4:	9302      	str	r3, [sp, #8]
 80008d6:	4653      	mov	r3, sl
 80008d8:	0c1b      	lsrs	r3, r3, #16
 80008da:	469b      	mov	fp, r3
 80008dc:	4653      	mov	r3, sl
 80008de:	041f      	lsls	r7, r3, #16
 80008e0:	4643      	mov	r3, r8
 80008e2:	041b      	lsls	r3, r3, #16
 80008e4:	0c1b      	lsrs	r3, r3, #16
 80008e6:	4698      	mov	r8, r3
 80008e8:	003b      	movs	r3, r7
 80008ea:	4443      	add	r3, r8
 80008ec:	9304      	str	r3, [sp, #16]
 80008ee:	0c33      	lsrs	r3, r6, #16
 80008f0:	0436      	lsls	r6, r6, #16
 80008f2:	0c36      	lsrs	r6, r6, #16
 80008f4:	4698      	mov	r8, r3
 80008f6:	0033      	movs	r3, r6
 80008f8:	4343      	muls	r3, r0
 80008fa:	4699      	mov	r9, r3
 80008fc:	4643      	mov	r3, r8
 80008fe:	4343      	muls	r3, r0
 8000900:	002f      	movs	r7, r5
 8000902:	469a      	mov	sl, r3
 8000904:	4643      	mov	r3, r8
 8000906:	4377      	muls	r7, r6
 8000908:	435d      	muls	r5, r3
 800090a:	0c38      	lsrs	r0, r7, #16
 800090c:	444d      	add	r5, r9
 800090e:	1945      	adds	r5, r0, r5
 8000910:	45a9      	cmp	r9, r5
 8000912:	d903      	bls.n	800091c <__aeabi_dmul+0x168>
 8000914:	2380      	movs	r3, #128	; 0x80
 8000916:	025b      	lsls	r3, r3, #9
 8000918:	4699      	mov	r9, r3
 800091a:	44ca      	add	sl, r9
 800091c:	043f      	lsls	r7, r7, #16
 800091e:	0c28      	lsrs	r0, r5, #16
 8000920:	0c3f      	lsrs	r7, r7, #16
 8000922:	042d      	lsls	r5, r5, #16
 8000924:	19ed      	adds	r5, r5, r7
 8000926:	0c27      	lsrs	r7, r4, #16
 8000928:	0424      	lsls	r4, r4, #16
 800092a:	0c24      	lsrs	r4, r4, #16
 800092c:	0003      	movs	r3, r0
 800092e:	0020      	movs	r0, r4
 8000930:	4350      	muls	r0, r2
 8000932:	437a      	muls	r2, r7
 8000934:	4691      	mov	r9, r2
 8000936:	003a      	movs	r2, r7
 8000938:	4453      	add	r3, sl
 800093a:	9305      	str	r3, [sp, #20]
 800093c:	0c03      	lsrs	r3, r0, #16
 800093e:	469a      	mov	sl, r3
 8000940:	434a      	muls	r2, r1
 8000942:	4361      	muls	r1, r4
 8000944:	4449      	add	r1, r9
 8000946:	4451      	add	r1, sl
 8000948:	44ab      	add	fp, r5
 800094a:	4589      	cmp	r9, r1
 800094c:	d903      	bls.n	8000956 <__aeabi_dmul+0x1a2>
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	025b      	lsls	r3, r3, #9
 8000952:	4699      	mov	r9, r3
 8000954:	444a      	add	r2, r9
 8000956:	0400      	lsls	r0, r0, #16
 8000958:	0c0b      	lsrs	r3, r1, #16
 800095a:	0c00      	lsrs	r0, r0, #16
 800095c:	0409      	lsls	r1, r1, #16
 800095e:	1809      	adds	r1, r1, r0
 8000960:	0020      	movs	r0, r4
 8000962:	4699      	mov	r9, r3
 8000964:	4643      	mov	r3, r8
 8000966:	4370      	muls	r0, r6
 8000968:	435c      	muls	r4, r3
 800096a:	437e      	muls	r6, r7
 800096c:	435f      	muls	r7, r3
 800096e:	0c03      	lsrs	r3, r0, #16
 8000970:	4698      	mov	r8, r3
 8000972:	19a4      	adds	r4, r4, r6
 8000974:	4444      	add	r4, r8
 8000976:	444a      	add	r2, r9
 8000978:	9703      	str	r7, [sp, #12]
 800097a:	42a6      	cmp	r6, r4
 800097c:	d904      	bls.n	8000988 <__aeabi_dmul+0x1d4>
 800097e:	2380      	movs	r3, #128	; 0x80
 8000980:	025b      	lsls	r3, r3, #9
 8000982:	4698      	mov	r8, r3
 8000984:	4447      	add	r7, r8
 8000986:	9703      	str	r7, [sp, #12]
 8000988:	0423      	lsls	r3, r4, #16
 800098a:	9e02      	ldr	r6, [sp, #8]
 800098c:	469a      	mov	sl, r3
 800098e:	9b05      	ldr	r3, [sp, #20]
 8000990:	445e      	add	r6, fp
 8000992:	4698      	mov	r8, r3
 8000994:	42ae      	cmp	r6, r5
 8000996:	41ad      	sbcs	r5, r5
 8000998:	1876      	adds	r6, r6, r1
 800099a:	428e      	cmp	r6, r1
 800099c:	4189      	sbcs	r1, r1
 800099e:	0400      	lsls	r0, r0, #16
 80009a0:	0c00      	lsrs	r0, r0, #16
 80009a2:	4450      	add	r0, sl
 80009a4:	4440      	add	r0, r8
 80009a6:	426d      	negs	r5, r5
 80009a8:	1947      	adds	r7, r0, r5
 80009aa:	46b8      	mov	r8, r7
 80009ac:	4693      	mov	fp, r2
 80009ae:	4249      	negs	r1, r1
 80009b0:	4689      	mov	r9, r1
 80009b2:	44c3      	add	fp, r8
 80009b4:	44d9      	add	r9, fp
 80009b6:	4298      	cmp	r0, r3
 80009b8:	4180      	sbcs	r0, r0
 80009ba:	45a8      	cmp	r8, r5
 80009bc:	41ad      	sbcs	r5, r5
 80009be:	4593      	cmp	fp, r2
 80009c0:	4192      	sbcs	r2, r2
 80009c2:	4589      	cmp	r9, r1
 80009c4:	4189      	sbcs	r1, r1
 80009c6:	426d      	negs	r5, r5
 80009c8:	4240      	negs	r0, r0
 80009ca:	4328      	orrs	r0, r5
 80009cc:	0c24      	lsrs	r4, r4, #16
 80009ce:	4252      	negs	r2, r2
 80009d0:	4249      	negs	r1, r1
 80009d2:	430a      	orrs	r2, r1
 80009d4:	9b03      	ldr	r3, [sp, #12]
 80009d6:	1900      	adds	r0, r0, r4
 80009d8:	1880      	adds	r0, r0, r2
 80009da:	18c7      	adds	r7, r0, r3
 80009dc:	464b      	mov	r3, r9
 80009de:	0ddc      	lsrs	r4, r3, #23
 80009e0:	9b04      	ldr	r3, [sp, #16]
 80009e2:	0275      	lsls	r5, r6, #9
 80009e4:	431d      	orrs	r5, r3
 80009e6:	1e6a      	subs	r2, r5, #1
 80009e8:	4195      	sbcs	r5, r2
 80009ea:	464b      	mov	r3, r9
 80009ec:	0df6      	lsrs	r6, r6, #23
 80009ee:	027f      	lsls	r7, r7, #9
 80009f0:	4335      	orrs	r5, r6
 80009f2:	025a      	lsls	r2, r3, #9
 80009f4:	433c      	orrs	r4, r7
 80009f6:	4315      	orrs	r5, r2
 80009f8:	01fb      	lsls	r3, r7, #7
 80009fa:	d400      	bmi.n	80009fe <__aeabi_dmul+0x24a>
 80009fc:	e11c      	b.n	8000c38 <__aeabi_dmul+0x484>
 80009fe:	2101      	movs	r1, #1
 8000a00:	086a      	lsrs	r2, r5, #1
 8000a02:	400d      	ands	r5, r1
 8000a04:	4315      	orrs	r5, r2
 8000a06:	07e2      	lsls	r2, r4, #31
 8000a08:	4315      	orrs	r5, r2
 8000a0a:	0864      	lsrs	r4, r4, #1
 8000a0c:	494f      	ldr	r1, [pc, #316]	; (8000b4c <__aeabi_dmul+0x398>)
 8000a0e:	4461      	add	r1, ip
 8000a10:	2900      	cmp	r1, #0
 8000a12:	dc00      	bgt.n	8000a16 <__aeabi_dmul+0x262>
 8000a14:	e0b0      	b.n	8000b78 <__aeabi_dmul+0x3c4>
 8000a16:	076b      	lsls	r3, r5, #29
 8000a18:	d009      	beq.n	8000a2e <__aeabi_dmul+0x27a>
 8000a1a:	220f      	movs	r2, #15
 8000a1c:	402a      	ands	r2, r5
 8000a1e:	2a04      	cmp	r2, #4
 8000a20:	d005      	beq.n	8000a2e <__aeabi_dmul+0x27a>
 8000a22:	1d2a      	adds	r2, r5, #4
 8000a24:	42aa      	cmp	r2, r5
 8000a26:	41ad      	sbcs	r5, r5
 8000a28:	426d      	negs	r5, r5
 8000a2a:	1964      	adds	r4, r4, r5
 8000a2c:	0015      	movs	r5, r2
 8000a2e:	01e3      	lsls	r3, r4, #7
 8000a30:	d504      	bpl.n	8000a3c <__aeabi_dmul+0x288>
 8000a32:	2180      	movs	r1, #128	; 0x80
 8000a34:	4a46      	ldr	r2, [pc, #280]	; (8000b50 <__aeabi_dmul+0x39c>)
 8000a36:	00c9      	lsls	r1, r1, #3
 8000a38:	4014      	ands	r4, r2
 8000a3a:	4461      	add	r1, ip
 8000a3c:	4a45      	ldr	r2, [pc, #276]	; (8000b54 <__aeabi_dmul+0x3a0>)
 8000a3e:	4291      	cmp	r1, r2
 8000a40:	dd00      	ble.n	8000a44 <__aeabi_dmul+0x290>
 8000a42:	e726      	b.n	8000892 <__aeabi_dmul+0xde>
 8000a44:	0762      	lsls	r2, r4, #29
 8000a46:	08ed      	lsrs	r5, r5, #3
 8000a48:	0264      	lsls	r4, r4, #9
 8000a4a:	0549      	lsls	r1, r1, #21
 8000a4c:	4315      	orrs	r5, r2
 8000a4e:	0b24      	lsrs	r4, r4, #12
 8000a50:	0d4a      	lsrs	r2, r1, #21
 8000a52:	e710      	b.n	8000876 <__aeabi_dmul+0xc2>
 8000a54:	4652      	mov	r2, sl
 8000a56:	4332      	orrs	r2, r6
 8000a58:	d100      	bne.n	8000a5c <__aeabi_dmul+0x2a8>
 8000a5a:	e07f      	b.n	8000b5c <__aeabi_dmul+0x3a8>
 8000a5c:	2e00      	cmp	r6, #0
 8000a5e:	d100      	bne.n	8000a62 <__aeabi_dmul+0x2ae>
 8000a60:	e0dc      	b.n	8000c1c <__aeabi_dmul+0x468>
 8000a62:	0030      	movs	r0, r6
 8000a64:	f000 f9e2 	bl	8000e2c <__clzsi2>
 8000a68:	0002      	movs	r2, r0
 8000a6a:	3a0b      	subs	r2, #11
 8000a6c:	231d      	movs	r3, #29
 8000a6e:	0001      	movs	r1, r0
 8000a70:	1a9b      	subs	r3, r3, r2
 8000a72:	4652      	mov	r2, sl
 8000a74:	3908      	subs	r1, #8
 8000a76:	40da      	lsrs	r2, r3
 8000a78:	408e      	lsls	r6, r1
 8000a7a:	4316      	orrs	r6, r2
 8000a7c:	4652      	mov	r2, sl
 8000a7e:	408a      	lsls	r2, r1
 8000a80:	9b00      	ldr	r3, [sp, #0]
 8000a82:	4935      	ldr	r1, [pc, #212]	; (8000b58 <__aeabi_dmul+0x3a4>)
 8000a84:	1a18      	subs	r0, r3, r0
 8000a86:	0003      	movs	r3, r0
 8000a88:	468c      	mov	ip, r1
 8000a8a:	4463      	add	r3, ip
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	e6d3      	b.n	800083a <__aeabi_dmul+0x86>
 8000a92:	0025      	movs	r5, r4
 8000a94:	4305      	orrs	r5, r0
 8000a96:	d04a      	beq.n	8000b2e <__aeabi_dmul+0x37a>
 8000a98:	2c00      	cmp	r4, #0
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_dmul+0x2ea>
 8000a9c:	e0b0      	b.n	8000c00 <__aeabi_dmul+0x44c>
 8000a9e:	0020      	movs	r0, r4
 8000aa0:	f000 f9c4 	bl	8000e2c <__clzsi2>
 8000aa4:	0001      	movs	r1, r0
 8000aa6:	0002      	movs	r2, r0
 8000aa8:	390b      	subs	r1, #11
 8000aaa:	231d      	movs	r3, #29
 8000aac:	0010      	movs	r0, r2
 8000aae:	1a5b      	subs	r3, r3, r1
 8000ab0:	0031      	movs	r1, r6
 8000ab2:	0035      	movs	r5, r6
 8000ab4:	3808      	subs	r0, #8
 8000ab6:	4084      	lsls	r4, r0
 8000ab8:	40d9      	lsrs	r1, r3
 8000aba:	4085      	lsls	r5, r0
 8000abc:	430c      	orrs	r4, r1
 8000abe:	4826      	ldr	r0, [pc, #152]	; (8000b58 <__aeabi_dmul+0x3a4>)
 8000ac0:	1a83      	subs	r3, r0, r2
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	4699      	mov	r9, r3
 8000ac8:	469b      	mov	fp, r3
 8000aca:	e697      	b.n	80007fc <__aeabi_dmul+0x48>
 8000acc:	0005      	movs	r5, r0
 8000ace:	4325      	orrs	r5, r4
 8000ad0:	d126      	bne.n	8000b20 <__aeabi_dmul+0x36c>
 8000ad2:	2208      	movs	r2, #8
 8000ad4:	9300      	str	r3, [sp, #0]
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	2400      	movs	r4, #0
 8000ada:	4691      	mov	r9, r2
 8000adc:	469b      	mov	fp, r3
 8000ade:	e68d      	b.n	80007fc <__aeabi_dmul+0x48>
 8000ae0:	4652      	mov	r2, sl
 8000ae2:	9b00      	ldr	r3, [sp, #0]
 8000ae4:	4332      	orrs	r2, r6
 8000ae6:	d110      	bne.n	8000b0a <__aeabi_dmul+0x356>
 8000ae8:	4915      	ldr	r1, [pc, #84]	; (8000b40 <__aeabi_dmul+0x38c>)
 8000aea:	2600      	movs	r6, #0
 8000aec:	468c      	mov	ip, r1
 8000aee:	4463      	add	r3, ip
 8000af0:	4649      	mov	r1, r9
 8000af2:	9300      	str	r3, [sp, #0]
 8000af4:	2302      	movs	r3, #2
 8000af6:	4319      	orrs	r1, r3
 8000af8:	4689      	mov	r9, r1
 8000afa:	2002      	movs	r0, #2
 8000afc:	e69d      	b.n	800083a <__aeabi_dmul+0x86>
 8000afe:	465b      	mov	r3, fp
 8000b00:	9701      	str	r7, [sp, #4]
 8000b02:	2b02      	cmp	r3, #2
 8000b04:	d000      	beq.n	8000b08 <__aeabi_dmul+0x354>
 8000b06:	e6ad      	b.n	8000864 <__aeabi_dmul+0xb0>
 8000b08:	e6c3      	b.n	8000892 <__aeabi_dmul+0xde>
 8000b0a:	4a0d      	ldr	r2, [pc, #52]	; (8000b40 <__aeabi_dmul+0x38c>)
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	4694      	mov	ip, r2
 8000b10:	4463      	add	r3, ip
 8000b12:	464a      	mov	r2, r9
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	2303      	movs	r3, #3
 8000b18:	431a      	orrs	r2, r3
 8000b1a:	4691      	mov	r9, r2
 8000b1c:	4652      	mov	r2, sl
 8000b1e:	e68c      	b.n	800083a <__aeabi_dmul+0x86>
 8000b20:	220c      	movs	r2, #12
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	2303      	movs	r3, #3
 8000b26:	0005      	movs	r5, r0
 8000b28:	4691      	mov	r9, r2
 8000b2a:	469b      	mov	fp, r3
 8000b2c:	e666      	b.n	80007fc <__aeabi_dmul+0x48>
 8000b2e:	2304      	movs	r3, #4
 8000b30:	4699      	mov	r9, r3
 8000b32:	2300      	movs	r3, #0
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	3301      	adds	r3, #1
 8000b38:	2400      	movs	r4, #0
 8000b3a:	469b      	mov	fp, r3
 8000b3c:	e65e      	b.n	80007fc <__aeabi_dmul+0x48>
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	000007ff 	.word	0x000007ff
 8000b44:	fffffc01 	.word	0xfffffc01
 8000b48:	08002978 	.word	0x08002978
 8000b4c:	000003ff 	.word	0x000003ff
 8000b50:	feffffff 	.word	0xfeffffff
 8000b54:	000007fe 	.word	0x000007fe
 8000b58:	fffffc0d 	.word	0xfffffc0d
 8000b5c:	4649      	mov	r1, r9
 8000b5e:	2301      	movs	r3, #1
 8000b60:	4319      	orrs	r1, r3
 8000b62:	4689      	mov	r9, r1
 8000b64:	2600      	movs	r6, #0
 8000b66:	2001      	movs	r0, #1
 8000b68:	e667      	b.n	800083a <__aeabi_dmul+0x86>
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	2480      	movs	r4, #128	; 0x80
 8000b6e:	2500      	movs	r5, #0
 8000b70:	4a43      	ldr	r2, [pc, #268]	; (8000c80 <__aeabi_dmul+0x4cc>)
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	0324      	lsls	r4, r4, #12
 8000b76:	e67e      	b.n	8000876 <__aeabi_dmul+0xc2>
 8000b78:	2001      	movs	r0, #1
 8000b7a:	1a40      	subs	r0, r0, r1
 8000b7c:	2838      	cmp	r0, #56	; 0x38
 8000b7e:	dd00      	ble.n	8000b82 <__aeabi_dmul+0x3ce>
 8000b80:	e676      	b.n	8000870 <__aeabi_dmul+0xbc>
 8000b82:	281f      	cmp	r0, #31
 8000b84:	dd5b      	ble.n	8000c3e <__aeabi_dmul+0x48a>
 8000b86:	221f      	movs	r2, #31
 8000b88:	0023      	movs	r3, r4
 8000b8a:	4252      	negs	r2, r2
 8000b8c:	1a51      	subs	r1, r2, r1
 8000b8e:	40cb      	lsrs	r3, r1
 8000b90:	0019      	movs	r1, r3
 8000b92:	2820      	cmp	r0, #32
 8000b94:	d003      	beq.n	8000b9e <__aeabi_dmul+0x3ea>
 8000b96:	4a3b      	ldr	r2, [pc, #236]	; (8000c84 <__aeabi_dmul+0x4d0>)
 8000b98:	4462      	add	r2, ip
 8000b9a:	4094      	lsls	r4, r2
 8000b9c:	4325      	orrs	r5, r4
 8000b9e:	1e6a      	subs	r2, r5, #1
 8000ba0:	4195      	sbcs	r5, r2
 8000ba2:	002a      	movs	r2, r5
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	2107      	movs	r1, #7
 8000ba8:	000d      	movs	r5, r1
 8000baa:	2400      	movs	r4, #0
 8000bac:	4015      	ands	r5, r2
 8000bae:	4211      	tst	r1, r2
 8000bb0:	d05b      	beq.n	8000c6a <__aeabi_dmul+0x4b6>
 8000bb2:	210f      	movs	r1, #15
 8000bb4:	2400      	movs	r4, #0
 8000bb6:	4011      	ands	r1, r2
 8000bb8:	2904      	cmp	r1, #4
 8000bba:	d053      	beq.n	8000c64 <__aeabi_dmul+0x4b0>
 8000bbc:	1d11      	adds	r1, r2, #4
 8000bbe:	4291      	cmp	r1, r2
 8000bc0:	4192      	sbcs	r2, r2
 8000bc2:	4252      	negs	r2, r2
 8000bc4:	18a4      	adds	r4, r4, r2
 8000bc6:	000a      	movs	r2, r1
 8000bc8:	0223      	lsls	r3, r4, #8
 8000bca:	d54b      	bpl.n	8000c64 <__aeabi_dmul+0x4b0>
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2400      	movs	r4, #0
 8000bd0:	2500      	movs	r5, #0
 8000bd2:	e650      	b.n	8000876 <__aeabi_dmul+0xc2>
 8000bd4:	2380      	movs	r3, #128	; 0x80
 8000bd6:	031b      	lsls	r3, r3, #12
 8000bd8:	421c      	tst	r4, r3
 8000bda:	d009      	beq.n	8000bf0 <__aeabi_dmul+0x43c>
 8000bdc:	421e      	tst	r6, r3
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_dmul+0x43c>
 8000be0:	4333      	orrs	r3, r6
 8000be2:	031c      	lsls	r4, r3, #12
 8000be4:	4643      	mov	r3, r8
 8000be6:	0015      	movs	r5, r2
 8000be8:	0b24      	lsrs	r4, r4, #12
 8000bea:	4a25      	ldr	r2, [pc, #148]	; (8000c80 <__aeabi_dmul+0x4cc>)
 8000bec:	9301      	str	r3, [sp, #4]
 8000bee:	e642      	b.n	8000876 <__aeabi_dmul+0xc2>
 8000bf0:	2280      	movs	r2, #128	; 0x80
 8000bf2:	0312      	lsls	r2, r2, #12
 8000bf4:	4314      	orrs	r4, r2
 8000bf6:	0324      	lsls	r4, r4, #12
 8000bf8:	4a21      	ldr	r2, [pc, #132]	; (8000c80 <__aeabi_dmul+0x4cc>)
 8000bfa:	0b24      	lsrs	r4, r4, #12
 8000bfc:	9701      	str	r7, [sp, #4]
 8000bfe:	e63a      	b.n	8000876 <__aeabi_dmul+0xc2>
 8000c00:	f000 f914 	bl	8000e2c <__clzsi2>
 8000c04:	0001      	movs	r1, r0
 8000c06:	0002      	movs	r2, r0
 8000c08:	3115      	adds	r1, #21
 8000c0a:	3220      	adds	r2, #32
 8000c0c:	291c      	cmp	r1, #28
 8000c0e:	dc00      	bgt.n	8000c12 <__aeabi_dmul+0x45e>
 8000c10:	e74b      	b.n	8000aaa <__aeabi_dmul+0x2f6>
 8000c12:	0034      	movs	r4, r6
 8000c14:	3808      	subs	r0, #8
 8000c16:	2500      	movs	r5, #0
 8000c18:	4084      	lsls	r4, r0
 8000c1a:	e750      	b.n	8000abe <__aeabi_dmul+0x30a>
 8000c1c:	f000 f906 	bl	8000e2c <__clzsi2>
 8000c20:	0003      	movs	r3, r0
 8000c22:	001a      	movs	r2, r3
 8000c24:	3215      	adds	r2, #21
 8000c26:	3020      	adds	r0, #32
 8000c28:	2a1c      	cmp	r2, #28
 8000c2a:	dc00      	bgt.n	8000c2e <__aeabi_dmul+0x47a>
 8000c2c:	e71e      	b.n	8000a6c <__aeabi_dmul+0x2b8>
 8000c2e:	4656      	mov	r6, sl
 8000c30:	3b08      	subs	r3, #8
 8000c32:	2200      	movs	r2, #0
 8000c34:	409e      	lsls	r6, r3
 8000c36:	e723      	b.n	8000a80 <__aeabi_dmul+0x2cc>
 8000c38:	9b00      	ldr	r3, [sp, #0]
 8000c3a:	469c      	mov	ip, r3
 8000c3c:	e6e6      	b.n	8000a0c <__aeabi_dmul+0x258>
 8000c3e:	4912      	ldr	r1, [pc, #72]	; (8000c88 <__aeabi_dmul+0x4d4>)
 8000c40:	0022      	movs	r2, r4
 8000c42:	4461      	add	r1, ip
 8000c44:	002e      	movs	r6, r5
 8000c46:	408d      	lsls	r5, r1
 8000c48:	408a      	lsls	r2, r1
 8000c4a:	40c6      	lsrs	r6, r0
 8000c4c:	1e69      	subs	r1, r5, #1
 8000c4e:	418d      	sbcs	r5, r1
 8000c50:	4332      	orrs	r2, r6
 8000c52:	432a      	orrs	r2, r5
 8000c54:	40c4      	lsrs	r4, r0
 8000c56:	0753      	lsls	r3, r2, #29
 8000c58:	d0b6      	beq.n	8000bc8 <__aeabi_dmul+0x414>
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	4011      	ands	r1, r2
 8000c5e:	2904      	cmp	r1, #4
 8000c60:	d1ac      	bne.n	8000bbc <__aeabi_dmul+0x408>
 8000c62:	e7b1      	b.n	8000bc8 <__aeabi_dmul+0x414>
 8000c64:	0765      	lsls	r5, r4, #29
 8000c66:	0264      	lsls	r4, r4, #9
 8000c68:	0b24      	lsrs	r4, r4, #12
 8000c6a:	08d2      	lsrs	r2, r2, #3
 8000c6c:	4315      	orrs	r5, r2
 8000c6e:	2200      	movs	r2, #0
 8000c70:	e601      	b.n	8000876 <__aeabi_dmul+0xc2>
 8000c72:	2280      	movs	r2, #128	; 0x80
 8000c74:	0312      	lsls	r2, r2, #12
 8000c76:	4314      	orrs	r4, r2
 8000c78:	0324      	lsls	r4, r4, #12
 8000c7a:	4a01      	ldr	r2, [pc, #4]	; (8000c80 <__aeabi_dmul+0x4cc>)
 8000c7c:	0b24      	lsrs	r4, r4, #12
 8000c7e:	e5fa      	b.n	8000876 <__aeabi_dmul+0xc2>
 8000c80:	000007ff 	.word	0x000007ff
 8000c84:	0000043e 	.word	0x0000043e
 8000c88:	0000041e 	.word	0x0000041e

08000c8c <__aeabi_f2d>:
 8000c8c:	b570      	push	{r4, r5, r6, lr}
 8000c8e:	0043      	lsls	r3, r0, #1
 8000c90:	0246      	lsls	r6, r0, #9
 8000c92:	0fc4      	lsrs	r4, r0, #31
 8000c94:	20fe      	movs	r0, #254	; 0xfe
 8000c96:	0e1b      	lsrs	r3, r3, #24
 8000c98:	1c59      	adds	r1, r3, #1
 8000c9a:	0a75      	lsrs	r5, r6, #9
 8000c9c:	4208      	tst	r0, r1
 8000c9e:	d00c      	beq.n	8000cba <__aeabi_f2d+0x2e>
 8000ca0:	22e0      	movs	r2, #224	; 0xe0
 8000ca2:	0092      	lsls	r2, r2, #2
 8000ca4:	4694      	mov	ip, r2
 8000ca6:	076d      	lsls	r5, r5, #29
 8000ca8:	0b36      	lsrs	r6, r6, #12
 8000caa:	4463      	add	r3, ip
 8000cac:	051b      	lsls	r3, r3, #20
 8000cae:	4333      	orrs	r3, r6
 8000cb0:	07e4      	lsls	r4, r4, #31
 8000cb2:	4323      	orrs	r3, r4
 8000cb4:	0028      	movs	r0, r5
 8000cb6:	0019      	movs	r1, r3
 8000cb8:	bd70      	pop	{r4, r5, r6, pc}
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d114      	bne.n	8000ce8 <__aeabi_f2d+0x5c>
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	d01b      	beq.n	8000cfa <__aeabi_f2d+0x6e>
 8000cc2:	0028      	movs	r0, r5
 8000cc4:	f000 f8b2 	bl	8000e2c <__clzsi2>
 8000cc8:	280a      	cmp	r0, #10
 8000cca:	dc1c      	bgt.n	8000d06 <__aeabi_f2d+0x7a>
 8000ccc:	230b      	movs	r3, #11
 8000cce:	002e      	movs	r6, r5
 8000cd0:	1a1b      	subs	r3, r3, r0
 8000cd2:	40de      	lsrs	r6, r3
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	3315      	adds	r3, #21
 8000cd8:	409d      	lsls	r5, r3
 8000cda:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <__aeabi_f2d+0x88>)
 8000cdc:	0336      	lsls	r6, r6, #12
 8000cde:	1a12      	subs	r2, r2, r0
 8000ce0:	0552      	lsls	r2, r2, #21
 8000ce2:	0b36      	lsrs	r6, r6, #12
 8000ce4:	0d53      	lsrs	r3, r2, #21
 8000ce6:	e7e1      	b.n	8000cac <__aeabi_f2d+0x20>
 8000ce8:	2d00      	cmp	r5, #0
 8000cea:	d009      	beq.n	8000d00 <__aeabi_f2d+0x74>
 8000cec:	2280      	movs	r2, #128	; 0x80
 8000cee:	0b36      	lsrs	r6, r6, #12
 8000cf0:	0312      	lsls	r2, r2, #12
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <__aeabi_f2d+0x8c>)
 8000cf4:	076d      	lsls	r5, r5, #29
 8000cf6:	4316      	orrs	r6, r2
 8000cf8:	e7d8      	b.n	8000cac <__aeabi_f2d+0x20>
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e7d5      	b.n	8000cac <__aeabi_f2d+0x20>
 8000d00:	2600      	movs	r6, #0
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <__aeabi_f2d+0x8c>)
 8000d04:	e7d2      	b.n	8000cac <__aeabi_f2d+0x20>
 8000d06:	0003      	movs	r3, r0
 8000d08:	3b0b      	subs	r3, #11
 8000d0a:	409d      	lsls	r5, r3
 8000d0c:	002e      	movs	r6, r5
 8000d0e:	2500      	movs	r5, #0
 8000d10:	e7e3      	b.n	8000cda <__aeabi_f2d+0x4e>
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	00000389 	.word	0x00000389
 8000d18:	000007ff 	.word	0x000007ff

08000d1c <__aeabi_d2f>:
 8000d1c:	0002      	movs	r2, r0
 8000d1e:	004b      	lsls	r3, r1, #1
 8000d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d22:	0d5b      	lsrs	r3, r3, #21
 8000d24:	030c      	lsls	r4, r1, #12
 8000d26:	4e3d      	ldr	r6, [pc, #244]	; (8000e1c <__aeabi_d2f+0x100>)
 8000d28:	0a64      	lsrs	r4, r4, #9
 8000d2a:	0f40      	lsrs	r0, r0, #29
 8000d2c:	1c5f      	adds	r7, r3, #1
 8000d2e:	0fc9      	lsrs	r1, r1, #31
 8000d30:	4304      	orrs	r4, r0
 8000d32:	00d5      	lsls	r5, r2, #3
 8000d34:	4237      	tst	r7, r6
 8000d36:	d00a      	beq.n	8000d4e <__aeabi_d2f+0x32>
 8000d38:	4839      	ldr	r0, [pc, #228]	; (8000e20 <__aeabi_d2f+0x104>)
 8000d3a:	181e      	adds	r6, r3, r0
 8000d3c:	2efe      	cmp	r6, #254	; 0xfe
 8000d3e:	dd16      	ble.n	8000d6e <__aeabi_d2f+0x52>
 8000d40:	20ff      	movs	r0, #255	; 0xff
 8000d42:	2400      	movs	r4, #0
 8000d44:	05c0      	lsls	r0, r0, #23
 8000d46:	4320      	orrs	r0, r4
 8000d48:	07c9      	lsls	r1, r1, #31
 8000d4a:	4308      	orrs	r0, r1
 8000d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d106      	bne.n	8000d60 <__aeabi_d2f+0x44>
 8000d52:	432c      	orrs	r4, r5
 8000d54:	d026      	beq.n	8000da4 <__aeabi_d2f+0x88>
 8000d56:	2205      	movs	r2, #5
 8000d58:	0192      	lsls	r2, r2, #6
 8000d5a:	0a54      	lsrs	r4, r2, #9
 8000d5c:	b2d8      	uxtb	r0, r3
 8000d5e:	e7f1      	b.n	8000d44 <__aeabi_d2f+0x28>
 8000d60:	4325      	orrs	r5, r4
 8000d62:	d0ed      	beq.n	8000d40 <__aeabi_d2f+0x24>
 8000d64:	2080      	movs	r0, #128	; 0x80
 8000d66:	03c0      	lsls	r0, r0, #15
 8000d68:	4304      	orrs	r4, r0
 8000d6a:	20ff      	movs	r0, #255	; 0xff
 8000d6c:	e7ea      	b.n	8000d44 <__aeabi_d2f+0x28>
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	dd1b      	ble.n	8000daa <__aeabi_d2f+0x8e>
 8000d72:	0192      	lsls	r2, r2, #6
 8000d74:	1e53      	subs	r3, r2, #1
 8000d76:	419a      	sbcs	r2, r3
 8000d78:	00e4      	lsls	r4, r4, #3
 8000d7a:	0f6d      	lsrs	r5, r5, #29
 8000d7c:	4322      	orrs	r2, r4
 8000d7e:	432a      	orrs	r2, r5
 8000d80:	0753      	lsls	r3, r2, #29
 8000d82:	d048      	beq.n	8000e16 <__aeabi_d2f+0xfa>
 8000d84:	230f      	movs	r3, #15
 8000d86:	4013      	ands	r3, r2
 8000d88:	2b04      	cmp	r3, #4
 8000d8a:	d000      	beq.n	8000d8e <__aeabi_d2f+0x72>
 8000d8c:	3204      	adds	r2, #4
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	04db      	lsls	r3, r3, #19
 8000d92:	4013      	ands	r3, r2
 8000d94:	d03f      	beq.n	8000e16 <__aeabi_d2f+0xfa>
 8000d96:	1c70      	adds	r0, r6, #1
 8000d98:	2efe      	cmp	r6, #254	; 0xfe
 8000d9a:	d0d1      	beq.n	8000d40 <__aeabi_d2f+0x24>
 8000d9c:	0192      	lsls	r2, r2, #6
 8000d9e:	0a54      	lsrs	r4, r2, #9
 8000da0:	b2c0      	uxtb	r0, r0
 8000da2:	e7cf      	b.n	8000d44 <__aeabi_d2f+0x28>
 8000da4:	2000      	movs	r0, #0
 8000da6:	2400      	movs	r4, #0
 8000da8:	e7cc      	b.n	8000d44 <__aeabi_d2f+0x28>
 8000daa:	0032      	movs	r2, r6
 8000dac:	3217      	adds	r2, #23
 8000dae:	db22      	blt.n	8000df6 <__aeabi_d2f+0xda>
 8000db0:	2080      	movs	r0, #128	; 0x80
 8000db2:	0400      	lsls	r0, r0, #16
 8000db4:	4320      	orrs	r0, r4
 8000db6:	241e      	movs	r4, #30
 8000db8:	1ba4      	subs	r4, r4, r6
 8000dba:	2c1f      	cmp	r4, #31
 8000dbc:	dd1d      	ble.n	8000dfa <__aeabi_d2f+0xde>
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	4252      	negs	r2, r2
 8000dc2:	1b96      	subs	r6, r2, r6
 8000dc4:	0002      	movs	r2, r0
 8000dc6:	40f2      	lsrs	r2, r6
 8000dc8:	0016      	movs	r6, r2
 8000dca:	2c20      	cmp	r4, #32
 8000dcc:	d004      	beq.n	8000dd8 <__aeabi_d2f+0xbc>
 8000dce:	4a15      	ldr	r2, [pc, #84]	; (8000e24 <__aeabi_d2f+0x108>)
 8000dd0:	4694      	mov	ip, r2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	4098      	lsls	r0, r3
 8000dd6:	4305      	orrs	r5, r0
 8000dd8:	002a      	movs	r2, r5
 8000dda:	1e53      	subs	r3, r2, #1
 8000ddc:	419a      	sbcs	r2, r3
 8000dde:	4332      	orrs	r2, r6
 8000de0:	2600      	movs	r6, #0
 8000de2:	0753      	lsls	r3, r2, #29
 8000de4:	d1ce      	bne.n	8000d84 <__aeabi_d2f+0x68>
 8000de6:	2480      	movs	r4, #128	; 0x80
 8000de8:	0013      	movs	r3, r2
 8000dea:	04e4      	lsls	r4, r4, #19
 8000dec:	2001      	movs	r0, #1
 8000dee:	4023      	ands	r3, r4
 8000df0:	4222      	tst	r2, r4
 8000df2:	d1d3      	bne.n	8000d9c <__aeabi_d2f+0x80>
 8000df4:	e7b0      	b.n	8000d58 <__aeabi_d2f+0x3c>
 8000df6:	2300      	movs	r3, #0
 8000df8:	e7ad      	b.n	8000d56 <__aeabi_d2f+0x3a>
 8000dfa:	4a0b      	ldr	r2, [pc, #44]	; (8000e28 <__aeabi_d2f+0x10c>)
 8000dfc:	4694      	mov	ip, r2
 8000dfe:	002a      	movs	r2, r5
 8000e00:	40e2      	lsrs	r2, r4
 8000e02:	0014      	movs	r4, r2
 8000e04:	002a      	movs	r2, r5
 8000e06:	4463      	add	r3, ip
 8000e08:	409a      	lsls	r2, r3
 8000e0a:	4098      	lsls	r0, r3
 8000e0c:	1e55      	subs	r5, r2, #1
 8000e0e:	41aa      	sbcs	r2, r5
 8000e10:	4302      	orrs	r2, r0
 8000e12:	4322      	orrs	r2, r4
 8000e14:	e7e4      	b.n	8000de0 <__aeabi_d2f+0xc4>
 8000e16:	0033      	movs	r3, r6
 8000e18:	e79e      	b.n	8000d58 <__aeabi_d2f+0x3c>
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	000007fe 	.word	0x000007fe
 8000e20:	fffffc80 	.word	0xfffffc80
 8000e24:	fffffca2 	.word	0xfffffca2
 8000e28:	fffffc82 	.word	0xfffffc82

08000e2c <__clzsi2>:
 8000e2c:	211c      	movs	r1, #28
 8000e2e:	2301      	movs	r3, #1
 8000e30:	041b      	lsls	r3, r3, #16
 8000e32:	4298      	cmp	r0, r3
 8000e34:	d301      	bcc.n	8000e3a <__clzsi2+0xe>
 8000e36:	0c00      	lsrs	r0, r0, #16
 8000e38:	3910      	subs	r1, #16
 8000e3a:	0a1b      	lsrs	r3, r3, #8
 8000e3c:	4298      	cmp	r0, r3
 8000e3e:	d301      	bcc.n	8000e44 <__clzsi2+0x18>
 8000e40:	0a00      	lsrs	r0, r0, #8
 8000e42:	3908      	subs	r1, #8
 8000e44:	091b      	lsrs	r3, r3, #4
 8000e46:	4298      	cmp	r0, r3
 8000e48:	d301      	bcc.n	8000e4e <__clzsi2+0x22>
 8000e4a:	0900      	lsrs	r0, r0, #4
 8000e4c:	3904      	subs	r1, #4
 8000e4e:	a202      	add	r2, pc, #8	; (adr r2, 8000e58 <__clzsi2+0x2c>)
 8000e50:	5c10      	ldrb	r0, [r2, r0]
 8000e52:	1840      	adds	r0, r0, r1
 8000e54:	4770      	bx	lr
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	02020304 	.word	0x02020304
 8000e5c:	01010101 	.word	0x01010101
	...

08000e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e68:	b5b0      	push	{r4, r5, r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e6e:	f000 fb0b 	bl	8001488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e72:	f000 f911 	bl	8001098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e76:	f000 f9ad 	bl	80011d4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000e7a:	f000 f957 	bl	800112c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3); // прерывание запущенно
 8000e7e:	4b7a      	ldr	r3, [pc, #488]	; (8001068 <main+0x200>)
 8000e80:	0018      	movs	r0, r3
 8000e82:	f001 fab9 	bl	80023f8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3); // запускаем таймер
 8000e86:	4b78      	ldr	r3, [pc, #480]	; (8001068 <main+0x200>)
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f001 fa71 	bl	8002370 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET); // начальное положение: выключенно
 8000e8e:	2390      	movs	r3, #144	; 0x90
 8000e90:	05db      	lsls	r3, r3, #23
 8000e92:	2200      	movs	r2, #0
 8000e94:	2102      	movs	r1, #2
 8000e96:	0018      	movs	r0, r3
 8000e98:	f000 fdbf 	bl	8001a1a <HAL_GPIO_WritePin>
		usDelay(3); // задержка 3 микросекунды
 8000e9c:	2003      	movs	r0, #3
 8000e9e:	f000 fa35 	bl	800130c <usDelay>

	    HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET); // даем импульс в 10 микросекунд
 8000ea2:	2390      	movs	r3, #144	; 0x90
 8000ea4:	05db      	lsls	r3, r3, #23
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f000 fdb5 	bl	8001a1a <HAL_GPIO_WritePin>
	    usDelay(10);
 8000eb0:	200a      	movs	r0, #10
 8000eb2:	f000 fa2b 	bl	800130c <usDelay>
	    HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET); // выключаем
 8000eb6:	2390      	movs	r3, #144	; 0x90
 8000eb8:	05db      	lsls	r3, r3, #23
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f000 fdab 	bl	8001a1a <HAL_GPIO_WritePin>


	    while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_RESET); // ждем смены состояния ECHO
 8000ec4:	46c0      	nop			; (mov r8, r8)
 8000ec6:	2390      	movs	r3, #144	; 0x90
 8000ec8:	05db      	lsls	r3, r3, #23
 8000eca:	2101      	movs	r1, #1
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f000 fd87 	bl	80019e0 <HAL_GPIO_ReadPin>
 8000ed2:	1e03      	subs	r3, r0, #0
 8000ed4:	d0f7      	beq.n	8000ec6 <main+0x5e>


	    numTicks = 0; // тики равны 0
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
	    while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET) // Если состояния сменилось, то считаем тики каждые 2 микросекунды
 8000eda:	e005      	b.n	8000ee8 <main+0x80>
	    {
	    	numTicks++;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	607b      	str	r3, [r7, #4]
	    	usDelay(2);
 8000ee2:	2002      	movs	r0, #2
 8000ee4:	f000 fa12 	bl	800130c <usDelay>
	    while(HAL_GPIO_ReadPin(ECHO_GPIO_Port, ECHO_Pin) == GPIO_PIN_SET) // Если состояния сменилось, то считаем тики каждые 2 микросекунды
 8000ee8:	2390      	movs	r3, #144	; 0x90
 8000eea:	05db      	lsls	r3, r3, #23
 8000eec:	2101      	movs	r1, #1
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f000 fd76 	bl	80019e0 <HAL_GPIO_ReadPin>
 8000ef4:	0003      	movs	r3, r0
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d0f0      	beq.n	8000edc <main+0x74>
	    }

	    distance = (numTicks + 0.0f) * 4.8 * Sos; // Вычисляем расстояние
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff fc18 	bl	8000730 <__aeabi_ui2f>
 8000f00:	1c03      	adds	r3, r0, #0
 8000f02:	2100      	movs	r1, #0
 8000f04:	1c18      	adds	r0, r3, #0
 8000f06:	f7ff f9c5 	bl	8000294 <__aeabi_fadd>
 8000f0a:	1c03      	adds	r3, r0, #0
 8000f0c:	1c18      	adds	r0, r3, #0
 8000f0e:	f7ff febd 	bl	8000c8c <__aeabi_f2d>
 8000f12:	4a56      	ldr	r2, [pc, #344]	; (800106c <main+0x204>)
 8000f14:	4b56      	ldr	r3, [pc, #344]	; (8001070 <main+0x208>)
 8000f16:	f7ff fc4d 	bl	80007b4 <__aeabi_dmul>
 8000f1a:	0002      	movs	r2, r0
 8000f1c:	000b      	movs	r3, r1
 8000f1e:	0014      	movs	r4, r2
 8000f20:	001d      	movs	r5, r3
 8000f22:	4b54      	ldr	r3, [pc, #336]	; (8001074 <main+0x20c>)
 8000f24:	1c18      	adds	r0, r3, #0
 8000f26:	f7ff feb1 	bl	8000c8c <__aeabi_f2d>
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	000b      	movs	r3, r1
 8000f2e:	0020      	movs	r0, r4
 8000f30:	0029      	movs	r1, r5
 8000f32:	f7ff fc3f 	bl	80007b4 <__aeabi_dmul>
 8000f36:	0002      	movs	r2, r0
 8000f38:	000b      	movs	r3, r1
 8000f3a:	0010      	movs	r0, r2
 8000f3c:	0019      	movs	r1, r3
 8000f3e:	f7ff feed 	bl	8000d1c <__aeabi_d2f>
 8000f42:	1c02      	adds	r2, r0, #0
 8000f44:	4b4c      	ldr	r3, [pc, #304]	; (8001078 <main+0x210>)
 8000f46:	601a      	str	r2, [r3, #0]


	    if(distance > 10){
 8000f48:	4b4b      	ldr	r3, [pc, #300]	; (8001078 <main+0x210>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	494b      	ldr	r1, [pc, #300]	; (800107c <main+0x214>)
 8000f4e:	1c18      	adds	r0, r3, #0
 8000f50:	f7ff f98c 	bl	800026c <__aeabi_fcmpgt>
 8000f54:	1e03      	subs	r3, r0, #0
 8000f56:	d00b      	beq.n	8000f70 <main+0x108>
	    	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000f58:	2380      	movs	r3, #128	; 0x80
 8000f5a:	0099      	lsls	r1, r3, #2
 8000f5c:	2390      	movs	r3, #144	; 0x90
 8000f5e:	05db      	lsls	r3, r3, #23
 8000f60:	2201      	movs	r2, #1
 8000f62:	0018      	movs	r0, r3
 8000f64:	f000 fd59 	bl	8001a1a <HAL_GPIO_WritePin>
	    	HAL_Delay(100);
 8000f68:	2064      	movs	r0, #100	; 0x64
 8000f6a:	f000 faf1 	bl	8001550 <HAL_Delay>
 8000f6e:	e00a      	b.n	8000f86 <main+0x11e>
	    }
	    else{
	    	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	0099      	lsls	r1, r3, #2
 8000f74:	2390      	movs	r3, #144	; 0x90
 8000f76:	05db      	lsls	r3, r3, #23
 8000f78:	2200      	movs	r2, #0
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f000 fd4d 	bl	8001a1a <HAL_GPIO_WritePin>
	    	HAL_Delay(100);
 8000f80:	2064      	movs	r0, #100	; 0x64
 8000f82:	f000 fae5 	bl	8001550 <HAL_Delay>
	    }

	    if(distance > 20){
 8000f86:	4b3c      	ldr	r3, [pc, #240]	; (8001078 <main+0x210>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	493d      	ldr	r1, [pc, #244]	; (8001080 <main+0x218>)
 8000f8c:	1c18      	adds	r0, r3, #0
 8000f8e:	f7ff f96d 	bl	800026c <__aeabi_fcmpgt>
 8000f92:	1e03      	subs	r3, r0, #0
 8000f94:	d009      	beq.n	8000faa <main+0x142>
	    	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000f96:	4b3b      	ldr	r3, [pc, #236]	; (8001084 <main+0x21c>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2180      	movs	r1, #128	; 0x80
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f000 fd3c 	bl	8001a1a <HAL_GPIO_WritePin>
	    	HAL_Delay(100);
 8000fa2:	2064      	movs	r0, #100	; 0x64
 8000fa4:	f000 fad4 	bl	8001550 <HAL_Delay>
 8000fa8:	e008      	b.n	8000fbc <main+0x154>
	    }
	    else{
	    	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000faa:	4b36      	ldr	r3, [pc, #216]	; (8001084 <main+0x21c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	2180      	movs	r1, #128	; 0x80
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f000 fd32 	bl	8001a1a <HAL_GPIO_WritePin>
	    	HAL_Delay(100);
 8000fb6:	2064      	movs	r0, #100	; 0x64
 8000fb8:	f000 faca 	bl	8001550 <HAL_Delay>
	    }

	    if(distance > 30){
 8000fbc:	4b2e      	ldr	r3, [pc, #184]	; (8001078 <main+0x210>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4931      	ldr	r1, [pc, #196]	; (8001088 <main+0x220>)
 8000fc2:	1c18      	adds	r0, r3, #0
 8000fc4:	f7ff f952 	bl	800026c <__aeabi_fcmpgt>
 8000fc8:	1e03      	subs	r3, r0, #0
 8000fca:	d009      	beq.n	8000fe0 <main+0x178>
	    	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000fcc:	4b2f      	ldr	r3, [pc, #188]	; (800108c <main+0x224>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2140      	movs	r1, #64	; 0x40
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f000 fd21 	bl	8001a1a <HAL_GPIO_WritePin>
	    	HAL_Delay(100);
 8000fd8:	2064      	movs	r0, #100	; 0x64
 8000fda:	f000 fab9 	bl	8001550 <HAL_Delay>
 8000fde:	e008      	b.n	8000ff2 <main+0x18a>
	    }
	    else{
	    	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8000fe0:	4b2a      	ldr	r3, [pc, #168]	; (800108c <main+0x224>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2140      	movs	r1, #64	; 0x40
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f000 fd17 	bl	8001a1a <HAL_GPIO_WritePin>
	    	HAL_Delay(100);
 8000fec:	2064      	movs	r0, #100	; 0x64
 8000fee:	f000 faaf 	bl	8001550 <HAL_Delay>
	    }

	    if(distance > 40){
 8000ff2:	4b21      	ldr	r3, [pc, #132]	; (8001078 <main+0x210>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4926      	ldr	r1, [pc, #152]	; (8001090 <main+0x228>)
 8000ff8:	1c18      	adds	r0, r3, #0
 8000ffa:	f7ff f937 	bl	800026c <__aeabi_fcmpgt>
 8000ffe:	1e03      	subs	r3, r0, #0
 8001000:	d00a      	beq.n	8001018 <main+0x1b0>
	    	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 8001002:	2390      	movs	r3, #144	; 0x90
 8001004:	05db      	lsls	r3, r3, #23
 8001006:	2201      	movs	r2, #1
 8001008:	2180      	movs	r1, #128	; 0x80
 800100a:	0018      	movs	r0, r3
 800100c:	f000 fd05 	bl	8001a1a <HAL_GPIO_WritePin>
	    	HAL_Delay(100);
 8001010:	2064      	movs	r0, #100	; 0x64
 8001012:	f000 fa9d 	bl	8001550 <HAL_Delay>
 8001016:	e009      	b.n	800102c <main+0x1c4>
	    }
	    else{
	    	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 8001018:	2390      	movs	r3, #144	; 0x90
 800101a:	05db      	lsls	r3, r3, #23
 800101c:	2200      	movs	r2, #0
 800101e:	2180      	movs	r1, #128	; 0x80
 8001020:	0018      	movs	r0, r3
 8001022:	f000 fcfa 	bl	8001a1a <HAL_GPIO_WritePin>
	    	HAL_Delay(100);
 8001026:	2064      	movs	r0, #100	; 0x64
 8001028:	f000 fa92 	bl	8001550 <HAL_Delay>
	    }

	    if(distance > 50){
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <main+0x210>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4918      	ldr	r1, [pc, #96]	; (8001094 <main+0x22c>)
 8001032:	1c18      	adds	r0, r3, #0
 8001034:	f7ff f91a 	bl	800026c <__aeabi_fcmpgt>
 8001038:	1e03      	subs	r3, r0, #0
 800103a:	d00a      	beq.n	8001052 <main+0x1ea>
	    	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 800103c:	2390      	movs	r3, #144	; 0x90
 800103e:	05db      	lsls	r3, r3, #23
 8001040:	2201      	movs	r2, #1
 8001042:	2140      	movs	r1, #64	; 0x40
 8001044:	0018      	movs	r0, r3
 8001046:	f000 fce8 	bl	8001a1a <HAL_GPIO_WritePin>
	    	HAL_Delay(100);
 800104a:	2064      	movs	r0, #100	; 0x64
 800104c:	f000 fa80 	bl	8001550 <HAL_Delay>
 8001050:	e71d      	b.n	8000e8e <main+0x26>
	    }
	    else{
	    	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8001052:	2390      	movs	r3, #144	; 0x90
 8001054:	05db      	lsls	r3, r3, #23
 8001056:	2200      	movs	r2, #0
 8001058:	2140      	movs	r1, #64	; 0x40
 800105a:	0018      	movs	r0, r3
 800105c:	f000 fcdd 	bl	8001a1a <HAL_GPIO_WritePin>
	    	HAL_Delay(100);
 8001060:	2064      	movs	r0, #100	; 0x64
 8001062:	f000 fa75 	bl	8001550 <HAL_Delay>
		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET); // начальное положение: выключенно
 8001066:	e712      	b.n	8000e8e <main+0x26>
 8001068:	20000028 	.word	0x20000028
 800106c:	33333333 	.word	0x33333333
 8001070:	40133333 	.word	0x40133333
 8001074:	3c8b4396 	.word	0x3c8b4396
 8001078:	20000070 	.word	0x20000070
 800107c:	41200000 	.word	0x41200000
 8001080:	41a00000 	.word	0x41a00000
 8001084:	48000800 	.word	0x48000800
 8001088:	41f00000 	.word	0x41f00000
 800108c:	48000400 	.word	0x48000400
 8001090:	42200000 	.word	0x42200000
 8001094:	42480000 	.word	0x42480000

08001098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b091      	sub	sp, #68	; 0x44
 800109c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109e:	2410      	movs	r4, #16
 80010a0:	193b      	adds	r3, r7, r4
 80010a2:	0018      	movs	r0, r3
 80010a4:	2330      	movs	r3, #48	; 0x30
 80010a6:	001a      	movs	r2, r3
 80010a8:	2100      	movs	r1, #0
 80010aa:	f001 fc51 	bl	8002950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ae:	003b      	movs	r3, r7
 80010b0:	0018      	movs	r0, r3
 80010b2:	2310      	movs	r3, #16
 80010b4:	001a      	movs	r2, r3
 80010b6:	2100      	movs	r1, #0
 80010b8:	f001 fc4a 	bl	8002950 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010bc:	0021      	movs	r1, r4
 80010be:	187b      	adds	r3, r7, r1
 80010c0:	2202      	movs	r2, #2
 80010c2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	2201      	movs	r2, #1
 80010c8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ca:	187b      	adds	r3, r7, r1
 80010cc:	2210      	movs	r2, #16
 80010ce:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d0:	187b      	adds	r3, r7, r1
 80010d2:	2202      	movs	r2, #2
 80010d4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010d6:	187b      	adds	r3, r7, r1
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	22a0      	movs	r2, #160	; 0xa0
 80010e0:	0392      	lsls	r2, r2, #14
 80010e2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	2200      	movs	r2, #0
 80010e8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	0018      	movs	r0, r3
 80010ee:	f000 fcb1 	bl	8001a54 <HAL_RCC_OscConfig>
 80010f2:	1e03      	subs	r3, r0, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0x62>
  {
    Error_Handler();
 80010f6:	f000 f939 	bl	800136c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fa:	003b      	movs	r3, r7
 80010fc:	2207      	movs	r2, #7
 80010fe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001100:	003b      	movs	r3, r7
 8001102:	2202      	movs	r2, #2
 8001104:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001106:	003b      	movs	r3, r7
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800110c:	003b      	movs	r3, r7
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001112:	003b      	movs	r3, r7
 8001114:	2101      	movs	r1, #1
 8001116:	0018      	movs	r0, r3
 8001118:	f000 ffb6 	bl	8002088 <HAL_RCC_ClockConfig>
 800111c:	1e03      	subs	r3, r0, #0
 800111e:	d001      	beq.n	8001124 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001120:	f000 f924 	bl	800136c <Error_Handler>
  }
}
 8001124:	46c0      	nop			; (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	b011      	add	sp, #68	; 0x44
 800112a:	bd90      	pop	{r4, r7, pc}

0800112c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001132:	2308      	movs	r3, #8
 8001134:	18fb      	adds	r3, r7, r3
 8001136:	0018      	movs	r0, r3
 8001138:	2310      	movs	r3, #16
 800113a:	001a      	movs	r2, r3
 800113c:	2100      	movs	r1, #0
 800113e:	f001 fc07 	bl	8002950 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001142:	003b      	movs	r3, r7
 8001144:	0018      	movs	r0, r3
 8001146:	2308      	movs	r3, #8
 8001148:	001a      	movs	r2, r3
 800114a:	2100      	movs	r1, #0
 800114c:	f001 fc00 	bl	8002950 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001150:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <MX_TIM3_Init+0xa0>)
 8001152:	4a1f      	ldr	r2, [pc, #124]	; (80011d0 <MX_TIM3_Init+0xa4>)
 8001154:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 8001156:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <MX_TIM3_Init+0xa0>)
 8001158:	222f      	movs	r2, #47	; 0x2f
 800115a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <MX_TIM3_Init+0xa0>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001162:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <MX_TIM3_Init+0xa0>)
 8001164:	2200      	movs	r2, #0
 8001166:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <MX_TIM3_Init+0xa0>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <MX_TIM3_Init+0xa0>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <MX_TIM3_Init+0xa0>)
 8001176:	0018      	movs	r0, r3
 8001178:	f001 f8aa 	bl	80022d0 <HAL_TIM_Base_Init>
 800117c:	1e03      	subs	r3, r0, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001180:	f000 f8f4 	bl	800136c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001184:	2108      	movs	r1, #8
 8001186:	187b      	adds	r3, r7, r1
 8001188:	2280      	movs	r2, #128	; 0x80
 800118a:	0152      	lsls	r2, r2, #5
 800118c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800118e:	187a      	adds	r2, r7, r1
 8001190:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_TIM3_Init+0xa0>)
 8001192:	0011      	movs	r1, r2
 8001194:	0018      	movs	r0, r3
 8001196:	f001 f97b 	bl	8002490 <HAL_TIM_ConfigClockSource>
 800119a:	1e03      	subs	r3, r0, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800119e:	f000 f8e5 	bl	800136c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a2:	003b      	movs	r3, r7
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a8:	003b      	movs	r3, r7
 80011aa:	2200      	movs	r2, #0
 80011ac:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011ae:	003a      	movs	r2, r7
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_TIM3_Init+0xa0>)
 80011b2:	0011      	movs	r1, r2
 80011b4:	0018      	movs	r0, r3
 80011b6:	f001 fb4f 	bl	8002858 <HAL_TIMEx_MasterConfigSynchronization>
 80011ba:	1e03      	subs	r3, r0, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80011be:	f000 f8d5 	bl	800136c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b006      	add	sp, #24
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	20000028 	.word	0x20000028
 80011d0:	40000400 	.word	0x40000400

080011d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011d4:	b590      	push	{r4, r7, lr}
 80011d6:	b089      	sub	sp, #36	; 0x24
 80011d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011da:	240c      	movs	r4, #12
 80011dc:	193b      	adds	r3, r7, r4
 80011de:	0018      	movs	r0, r3
 80011e0:	2314      	movs	r3, #20
 80011e2:	001a      	movs	r2, r3
 80011e4:	2100      	movs	r1, #0
 80011e6:	f001 fbb3 	bl	8002950 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	4b44      	ldr	r3, [pc, #272]	; (80012fc <MX_GPIO_Init+0x128>)
 80011ec:	695a      	ldr	r2, [r3, #20]
 80011ee:	4b43      	ldr	r3, [pc, #268]	; (80012fc <MX_GPIO_Init+0x128>)
 80011f0:	2180      	movs	r1, #128	; 0x80
 80011f2:	0289      	lsls	r1, r1, #10
 80011f4:	430a      	orrs	r2, r1
 80011f6:	615a      	str	r2, [r3, #20]
 80011f8:	4b40      	ldr	r3, [pc, #256]	; (80012fc <MX_GPIO_Init+0x128>)
 80011fa:	695a      	ldr	r2, [r3, #20]
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	029b      	lsls	r3, r3, #10
 8001200:	4013      	ands	r3, r2
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	4b3d      	ldr	r3, [pc, #244]	; (80012fc <MX_GPIO_Init+0x128>)
 8001208:	695a      	ldr	r2, [r3, #20]
 800120a:	4b3c      	ldr	r3, [pc, #240]	; (80012fc <MX_GPIO_Init+0x128>)
 800120c:	2180      	movs	r1, #128	; 0x80
 800120e:	0309      	lsls	r1, r1, #12
 8001210:	430a      	orrs	r2, r1
 8001212:	615a      	str	r2, [r3, #20]
 8001214:	4b39      	ldr	r3, [pc, #228]	; (80012fc <MX_GPIO_Init+0x128>)
 8001216:	695a      	ldr	r2, [r3, #20]
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	031b      	lsls	r3, r3, #12
 800121c:	4013      	ands	r3, r2
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	4b36      	ldr	r3, [pc, #216]	; (80012fc <MX_GPIO_Init+0x128>)
 8001224:	695a      	ldr	r2, [r3, #20]
 8001226:	4b35      	ldr	r3, [pc, #212]	; (80012fc <MX_GPIO_Init+0x128>)
 8001228:	2180      	movs	r1, #128	; 0x80
 800122a:	02c9      	lsls	r1, r1, #11
 800122c:	430a      	orrs	r2, r1
 800122e:	615a      	str	r2, [r3, #20]
 8001230:	4b32      	ldr	r3, [pc, #200]	; (80012fc <MX_GPIO_Init+0x128>)
 8001232:	695a      	ldr	r2, [r3, #20]
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	02db      	lsls	r3, r3, #11
 8001238:	4013      	ands	r3, r2
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG_Pin|LED5_Pin|LED4_Pin|LED1_Pin, GPIO_PIN_RESET);
 800123e:	4930      	ldr	r1, [pc, #192]	; (8001300 <MX_GPIO_Init+0x12c>)
 8001240:	2390      	movs	r3, #144	; 0x90
 8001242:	05db      	lsls	r3, r3, #23
 8001244:	2200      	movs	r2, #0
 8001246:	0018      	movs	r0, r3
 8001248:	f000 fbe7 	bl	8001a1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800124c:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <MX_GPIO_Init+0x130>)
 800124e:	2200      	movs	r2, #0
 8001250:	2180      	movs	r1, #128	; 0x80
 8001252:	0018      	movs	r0, r3
 8001254:	f000 fbe1 	bl	8001a1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001258:	4b2b      	ldr	r3, [pc, #172]	; (8001308 <MX_GPIO_Init+0x134>)
 800125a:	2200      	movs	r2, #0
 800125c:	2140      	movs	r1, #64	; 0x40
 800125e:	0018      	movs	r0, r3
 8001260:	f000 fbdb 	bl	8001a1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 8001264:	193b      	adds	r3, r7, r4
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800126a:	193b      	adds	r3, r7, r4
 800126c:	2200      	movs	r2, #0
 800126e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001270:	193b      	adds	r3, r7, r4
 8001272:	2202      	movs	r2, #2
 8001274:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8001276:	193a      	adds	r2, r7, r4
 8001278:	2390      	movs	r3, #144	; 0x90
 800127a:	05db      	lsls	r3, r3, #23
 800127c:	0011      	movs	r1, r2
 800127e:	0018      	movs	r0, r3
 8001280:	f000 fa3e 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin LED5_Pin LED4_Pin LED1_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|LED5_Pin|LED4_Pin|LED1_Pin;
 8001284:	193b      	adds	r3, r7, r4
 8001286:	4a1e      	ldr	r2, [pc, #120]	; (8001300 <MX_GPIO_Init+0x12c>)
 8001288:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128a:	193b      	adds	r3, r7, r4
 800128c:	2201      	movs	r2, #1
 800128e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	193b      	adds	r3, r7, r4
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	193b      	adds	r3, r7, r4
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	193a      	adds	r2, r7, r4
 800129e:	2390      	movs	r3, #144	; 0x90
 80012a0:	05db      	lsls	r3, r3, #23
 80012a2:	0011      	movs	r1, r2
 80012a4:	0018      	movs	r0, r3
 80012a6:	f000 fa2b 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80012aa:	193b      	adds	r3, r7, r4
 80012ac:	2280      	movs	r2, #128	; 0x80
 80012ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	193b      	adds	r3, r7, r4
 80012b2:	2201      	movs	r2, #1
 80012b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	193b      	adds	r3, r7, r4
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	193b      	adds	r3, r7, r4
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80012c2:	193b      	adds	r3, r7, r4
 80012c4:	4a0f      	ldr	r2, [pc, #60]	; (8001304 <MX_GPIO_Init+0x130>)
 80012c6:	0019      	movs	r1, r3
 80012c8:	0010      	movs	r0, r2
 80012ca:	f000 fa19 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_Pin */
  GPIO_InitStruct.Pin = LED3_Pin;
 80012ce:	0021      	movs	r1, r4
 80012d0:	187b      	adds	r3, r7, r1
 80012d2:	2240      	movs	r2, #64	; 0x40
 80012d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d6:	187b      	adds	r3, r7, r1
 80012d8:	2201      	movs	r2, #1
 80012da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	187b      	adds	r3, r7, r1
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e2:	187b      	adds	r3, r7, r1
 80012e4:	2200      	movs	r2, #0
 80012e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 80012e8:	187b      	adds	r3, r7, r1
 80012ea:	4a07      	ldr	r2, [pc, #28]	; (8001308 <MX_GPIO_Init+0x134>)
 80012ec:	0019      	movs	r1, r3
 80012ee:	0010      	movs	r0, r2
 80012f0:	f000 fa06 	bl	8001700 <HAL_GPIO_Init>

}
 80012f4:	46c0      	nop			; (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b009      	add	sp, #36	; 0x24
 80012fa:	bd90      	pop	{r4, r7, pc}
 80012fc:	40021000 	.word	0x40021000
 8001300:	000002c2 	.word	0x000002c2
 8001304:	48000800 	.word	0x48000800
 8001308:	48000400 	.word	0x48000400

0800130c <usDelay>:

/* USER CODE BEGIN 4 */
void usDelay(uint32_t uSec)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d801      	bhi.n	800131e <usDelay+0x12>
 800131a:	2302      	movs	r3, #2
 800131c:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 800131e:	4b12      	ldr	r3, [pc, #72]	; (8001368 <usDelay+0x5c>)
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	3a01      	subs	r2, #1
 8001324:	62da      	str	r2, [r3, #44]	; 0x2c
	usTIM->EGR = 1; 			/*Re-initialises the timer*/
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <usDelay+0x5c>)
 8001328:	2201      	movs	r2, #1
 800132a:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1; 		//Resets the flag
 800132c:	4b0e      	ldr	r3, [pc, #56]	; (8001368 <usDelay+0x5c>)
 800132e:	691a      	ldr	r2, [r3, #16]
 8001330:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <usDelay+0x5c>)
 8001332:	2101      	movs	r1, #1
 8001334:	438a      	bics	r2, r1
 8001336:	611a      	str	r2, [r3, #16]
	usTIM->CR1 |= 1; 		//Enables the counter
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <usDelay+0x5c>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <usDelay+0x5c>)
 800133e:	2101      	movs	r1, #1
 8001340:	430a      	orrs	r2, r1
 8001342:	601a      	str	r2, [r3, #0]
	while((usTIM->SR&0x0001) != 1);
 8001344:	46c0      	nop			; (mov r8, r8)
 8001346:	4b08      	ldr	r3, [pc, #32]	; (8001368 <usDelay+0x5c>)
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	2201      	movs	r2, #1
 800134c:	4013      	ands	r3, r2
 800134e:	2b01      	cmp	r3, #1
 8001350:	d1f9      	bne.n	8001346 <usDelay+0x3a>
	usTIM->SR &= ~(0x0001);
 8001352:	4b05      	ldr	r3, [pc, #20]	; (8001368 <usDelay+0x5c>)
 8001354:	691a      	ldr	r2, [r3, #16]
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <usDelay+0x5c>)
 8001358:	2101      	movs	r1, #1
 800135a:	438a      	bics	r2, r1
 800135c:	611a      	str	r2, [r3, #16]
}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	46bd      	mov	sp, r7
 8001362:	b002      	add	sp, #8
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	40000400 	.word	0x40000400

0800136c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001370:	b672      	cpsid	i
}
 8001372:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001374:	e7fe      	b.n	8001374 <Error_Handler+0x8>
	...

08001378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_MspInit+0x44>)
 8001380:	699a      	ldr	r2, [r3, #24]
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <HAL_MspInit+0x44>)
 8001384:	2101      	movs	r1, #1
 8001386:	430a      	orrs	r2, r1
 8001388:	619a      	str	r2, [r3, #24]
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <HAL_MspInit+0x44>)
 800138c:	699b      	ldr	r3, [r3, #24]
 800138e:	2201      	movs	r2, #1
 8001390:	4013      	ands	r3, r2
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_MspInit+0x44>)
 8001398:	69da      	ldr	r2, [r3, #28]
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <HAL_MspInit+0x44>)
 800139c:	2180      	movs	r1, #128	; 0x80
 800139e:	0549      	lsls	r1, r1, #21
 80013a0:	430a      	orrs	r2, r1
 80013a2:	61da      	str	r2, [r3, #28]
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <HAL_MspInit+0x44>)
 80013a6:	69da      	ldr	r2, [r3, #28]
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	055b      	lsls	r3, r3, #21
 80013ac:	4013      	ands	r3, r2
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b002      	add	sp, #8
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	40021000 	.word	0x40021000

080013c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a09      	ldr	r2, [pc, #36]	; (80013f4 <HAL_TIM_Base_MspInit+0x34>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d10b      	bne.n	80013ea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_TIM_Base_MspInit+0x38>)
 80013d4:	69da      	ldr	r2, [r3, #28]
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_TIM_Base_MspInit+0x38>)
 80013d8:	2102      	movs	r1, #2
 80013da:	430a      	orrs	r2, r1
 80013dc:	61da      	str	r2, [r3, #28]
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_TIM_Base_MspInit+0x38>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	2202      	movs	r2, #2
 80013e4:	4013      	ands	r3, r2
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b004      	add	sp, #16
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	40000400 	.word	0x40000400
 80013f8:	40021000 	.word	0x40021000

080013fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <NMI_Handler+0x4>

08001402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <HardFault_Handler+0x4>

08001408 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800140c:	46c0      	nop			; (mov r8, r8)
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001420:	f000 f87a 	bl	8001518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001424:	46c0      	nop			; (mov r8, r8)
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001434:	480d      	ldr	r0, [pc, #52]	; (800146c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001436:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001438:	f7ff fff7 	bl	800142a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800143c:	480c      	ldr	r0, [pc, #48]	; (8001470 <LoopForever+0x6>)
  ldr r1, =_edata
 800143e:	490d      	ldr	r1, [pc, #52]	; (8001474 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001440:	4a0d      	ldr	r2, [pc, #52]	; (8001478 <LoopForever+0xe>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001444:	e002      	b.n	800144c <LoopCopyDataInit>

08001446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144a:	3304      	adds	r3, #4

0800144c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800144c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001450:	d3f9      	bcc.n	8001446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001452:	4a0a      	ldr	r2, [pc, #40]	; (800147c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001454:	4c0a      	ldr	r4, [pc, #40]	; (8001480 <LoopForever+0x16>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001458:	e001      	b.n	800145e <LoopFillZerobss>

0800145a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800145c:	3204      	adds	r2, #4

0800145e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001460:	d3fb      	bcc.n	800145a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001462:	f001 fa51 	bl	8002908 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001466:	f7ff fcff 	bl	8000e68 <main>

0800146a <LoopForever>:

LoopForever:
    b LoopForever
 800146a:	e7fe      	b.n	800146a <LoopForever>
  ldr   r0, =_estack
 800146c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001474:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001478:	080029f0 	.word	0x080029f0
  ldr r2, =_sbss
 800147c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001480:	20000078 	.word	0x20000078

08001484 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001484:	e7fe      	b.n	8001484 <ADC1_IRQHandler>
	...

08001488 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <HAL_Init+0x24>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_Init+0x24>)
 8001492:	2110      	movs	r1, #16
 8001494:	430a      	orrs	r2, r1
 8001496:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001498:	2003      	movs	r0, #3
 800149a:	f000 f809 	bl	80014b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800149e:	f7ff ff6b 	bl	8001378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	0018      	movs	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	40022000 	.word	0x40022000

080014b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b8:	4b14      	ldr	r3, [pc, #80]	; (800150c <HAL_InitTick+0x5c>)
 80014ba:	681c      	ldr	r4, [r3, #0]
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <HAL_InitTick+0x60>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	0019      	movs	r1, r3
 80014c2:	23fa      	movs	r3, #250	; 0xfa
 80014c4:	0098      	lsls	r0, r3, #2
 80014c6:	f7fe fe1f 	bl	8000108 <__udivsi3>
 80014ca:	0003      	movs	r3, r0
 80014cc:	0019      	movs	r1, r3
 80014ce:	0020      	movs	r0, r4
 80014d0:	f7fe fe1a 	bl	8000108 <__udivsi3>
 80014d4:	0003      	movs	r3, r0
 80014d6:	0018      	movs	r0, r3
 80014d8:	f000 f905 	bl	80016e6 <HAL_SYSTICK_Config>
 80014dc:	1e03      	subs	r3, r0, #0
 80014de:	d001      	beq.n	80014e4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e00f      	b.n	8001504 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d80b      	bhi.n	8001502 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	2301      	movs	r3, #1
 80014ee:	425b      	negs	r3, r3
 80014f0:	2200      	movs	r2, #0
 80014f2:	0018      	movs	r0, r3
 80014f4:	f000 f8e2 	bl	80016bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_InitTick+0x64>)
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80014fe:	2300      	movs	r3, #0
 8001500:	e000      	b.n	8001504 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
}
 8001504:	0018      	movs	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	b003      	add	sp, #12
 800150a:	bd90      	pop	{r4, r7, pc}
 800150c:	20000000 	.word	0x20000000
 8001510:	20000008 	.word	0x20000008
 8001514:	20000004 	.word	0x20000004

08001518 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <HAL_IncTick+0x1c>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	001a      	movs	r2, r3
 8001522:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_IncTick+0x20>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	18d2      	adds	r2, r2, r3
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <HAL_IncTick+0x20>)
 800152a:	601a      	str	r2, [r3, #0]
}
 800152c:	46c0      	nop			; (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	20000008 	.word	0x20000008
 8001538:	20000074 	.word	0x20000074

0800153c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  return uwTick;
 8001540:	4b02      	ldr	r3, [pc, #8]	; (800154c <HAL_GetTick+0x10>)
 8001542:	681b      	ldr	r3, [r3, #0]
}
 8001544:	0018      	movs	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	20000074 	.word	0x20000074

08001550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001558:	f7ff fff0 	bl	800153c <HAL_GetTick>
 800155c:	0003      	movs	r3, r0
 800155e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	3301      	adds	r3, #1
 8001568:	d005      	beq.n	8001576 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_Delay+0x44>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	001a      	movs	r2, r3
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	189b      	adds	r3, r3, r2
 8001574:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	f7ff ffe0 	bl	800153c <HAL_GetTick>
 800157c:	0002      	movs	r2, r0
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	429a      	cmp	r2, r3
 8001586:	d8f7      	bhi.n	8001578 <HAL_Delay+0x28>
  {
  }
}
 8001588:	46c0      	nop			; (mov r8, r8)
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	46bd      	mov	sp, r7
 800158e:	b004      	add	sp, #16
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	20000008 	.word	0x20000008

08001598 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	0002      	movs	r2, r0
 80015a0:	6039      	str	r1, [r7, #0]
 80015a2:	1dfb      	adds	r3, r7, #7
 80015a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015a6:	1dfb      	adds	r3, r7, #7
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b7f      	cmp	r3, #127	; 0x7f
 80015ac:	d828      	bhi.n	8001600 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015ae:	4a2f      	ldr	r2, [pc, #188]	; (800166c <__NVIC_SetPriority+0xd4>)
 80015b0:	1dfb      	adds	r3, r7, #7
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	b25b      	sxtb	r3, r3
 80015b6:	089b      	lsrs	r3, r3, #2
 80015b8:	33c0      	adds	r3, #192	; 0xc0
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	589b      	ldr	r3, [r3, r2]
 80015be:	1dfa      	adds	r2, r7, #7
 80015c0:	7812      	ldrb	r2, [r2, #0]
 80015c2:	0011      	movs	r1, r2
 80015c4:	2203      	movs	r2, #3
 80015c6:	400a      	ands	r2, r1
 80015c8:	00d2      	lsls	r2, r2, #3
 80015ca:	21ff      	movs	r1, #255	; 0xff
 80015cc:	4091      	lsls	r1, r2
 80015ce:	000a      	movs	r2, r1
 80015d0:	43d2      	mvns	r2, r2
 80015d2:	401a      	ands	r2, r3
 80015d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	019b      	lsls	r3, r3, #6
 80015da:	22ff      	movs	r2, #255	; 0xff
 80015dc:	401a      	ands	r2, r3
 80015de:	1dfb      	adds	r3, r7, #7
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	0018      	movs	r0, r3
 80015e4:	2303      	movs	r3, #3
 80015e6:	4003      	ands	r3, r0
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015ec:	481f      	ldr	r0, [pc, #124]	; (800166c <__NVIC_SetPriority+0xd4>)
 80015ee:	1dfb      	adds	r3, r7, #7
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	b25b      	sxtb	r3, r3
 80015f4:	089b      	lsrs	r3, r3, #2
 80015f6:	430a      	orrs	r2, r1
 80015f8:	33c0      	adds	r3, #192	; 0xc0
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015fe:	e031      	b.n	8001664 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001600:	4a1b      	ldr	r2, [pc, #108]	; (8001670 <__NVIC_SetPriority+0xd8>)
 8001602:	1dfb      	adds	r3, r7, #7
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	0019      	movs	r1, r3
 8001608:	230f      	movs	r3, #15
 800160a:	400b      	ands	r3, r1
 800160c:	3b08      	subs	r3, #8
 800160e:	089b      	lsrs	r3, r3, #2
 8001610:	3306      	adds	r3, #6
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	18d3      	adds	r3, r2, r3
 8001616:	3304      	adds	r3, #4
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	1dfa      	adds	r2, r7, #7
 800161c:	7812      	ldrb	r2, [r2, #0]
 800161e:	0011      	movs	r1, r2
 8001620:	2203      	movs	r2, #3
 8001622:	400a      	ands	r2, r1
 8001624:	00d2      	lsls	r2, r2, #3
 8001626:	21ff      	movs	r1, #255	; 0xff
 8001628:	4091      	lsls	r1, r2
 800162a:	000a      	movs	r2, r1
 800162c:	43d2      	mvns	r2, r2
 800162e:	401a      	ands	r2, r3
 8001630:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	019b      	lsls	r3, r3, #6
 8001636:	22ff      	movs	r2, #255	; 0xff
 8001638:	401a      	ands	r2, r3
 800163a:	1dfb      	adds	r3, r7, #7
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	0018      	movs	r0, r3
 8001640:	2303      	movs	r3, #3
 8001642:	4003      	ands	r3, r0
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001648:	4809      	ldr	r0, [pc, #36]	; (8001670 <__NVIC_SetPriority+0xd8>)
 800164a:	1dfb      	adds	r3, r7, #7
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	001c      	movs	r4, r3
 8001650:	230f      	movs	r3, #15
 8001652:	4023      	ands	r3, r4
 8001654:	3b08      	subs	r3, #8
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	430a      	orrs	r2, r1
 800165a:	3306      	adds	r3, #6
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	18c3      	adds	r3, r0, r3
 8001660:	3304      	adds	r3, #4
 8001662:	601a      	str	r2, [r3, #0]
}
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b003      	add	sp, #12
 800166a:	bd90      	pop	{r4, r7, pc}
 800166c:	e000e100 	.word	0xe000e100
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	1e5a      	subs	r2, r3, #1
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	045b      	lsls	r3, r3, #17
 8001684:	429a      	cmp	r2, r3
 8001686:	d301      	bcc.n	800168c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001688:	2301      	movs	r3, #1
 800168a:	e010      	b.n	80016ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <SysTick_Config+0x44>)
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	3a01      	subs	r2, #1
 8001692:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001694:	2301      	movs	r3, #1
 8001696:	425b      	negs	r3, r3
 8001698:	2103      	movs	r1, #3
 800169a:	0018      	movs	r0, r3
 800169c:	f7ff ff7c 	bl	8001598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <SysTick_Config+0x44>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <SysTick_Config+0x44>)
 80016a8:	2207      	movs	r2, #7
 80016aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	0018      	movs	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	b002      	add	sp, #8
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	e000e010 	.word	0xe000e010

080016bc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	607a      	str	r2, [r7, #4]
 80016c6:	210f      	movs	r1, #15
 80016c8:	187b      	adds	r3, r7, r1
 80016ca:	1c02      	adds	r2, r0, #0
 80016cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	187b      	adds	r3, r7, r1
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b25b      	sxtb	r3, r3
 80016d6:	0011      	movs	r1, r2
 80016d8:	0018      	movs	r0, r3
 80016da:	f7ff ff5d 	bl	8001598 <__NVIC_SetPriority>
}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b004      	add	sp, #16
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	0018      	movs	r0, r3
 80016f2:	f7ff ffbf 	bl	8001674 <SysTick_Config>
 80016f6:	0003      	movs	r3, r0
}
 80016f8:	0018      	movs	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b002      	add	sp, #8
 80016fe:	bd80      	pop	{r7, pc}

08001700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170e:	e14f      	b.n	80019b0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2101      	movs	r1, #1
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	4091      	lsls	r1, r2
 800171a:	000a      	movs	r2, r1
 800171c:	4013      	ands	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d100      	bne.n	8001728 <HAL_GPIO_Init+0x28>
 8001726:	e140      	b.n	80019aa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2203      	movs	r2, #3
 800172e:	4013      	ands	r3, r2
 8001730:	2b01      	cmp	r3, #1
 8001732:	d005      	beq.n	8001740 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2203      	movs	r2, #3
 800173a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800173c:	2b02      	cmp	r3, #2
 800173e:	d130      	bne.n	80017a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	2203      	movs	r2, #3
 800174c:	409a      	lsls	r2, r3
 800174e:	0013      	movs	r3, r2
 8001750:	43da      	mvns	r2, r3
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	409a      	lsls	r2, r3
 8001762:	0013      	movs	r3, r2
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001776:	2201      	movs	r2, #1
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	409a      	lsls	r2, r3
 800177c:	0013      	movs	r3, r2
 800177e:	43da      	mvns	r2, r3
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	4013      	ands	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	091b      	lsrs	r3, r3, #4
 800178c:	2201      	movs	r2, #1
 800178e:	401a      	ands	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	409a      	lsls	r2, r3
 8001794:	0013      	movs	r3, r2
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2203      	movs	r2, #3
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d017      	beq.n	80017de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	2203      	movs	r2, #3
 80017ba:	409a      	lsls	r2, r3
 80017bc:	0013      	movs	r3, r2
 80017be:	43da      	mvns	r2, r3
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4013      	ands	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	409a      	lsls	r2, r3
 80017d0:	0013      	movs	r3, r2
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2203      	movs	r2, #3
 80017e4:	4013      	ands	r3, r2
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d123      	bne.n	8001832 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	08da      	lsrs	r2, r3, #3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	3208      	adds	r2, #8
 80017f2:	0092      	lsls	r2, r2, #2
 80017f4:	58d3      	ldr	r3, [r2, r3]
 80017f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2207      	movs	r2, #7
 80017fc:	4013      	ands	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	220f      	movs	r2, #15
 8001802:	409a      	lsls	r2, r3
 8001804:	0013      	movs	r3, r2
 8001806:	43da      	mvns	r2, r3
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	691a      	ldr	r2, [r3, #16]
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	2107      	movs	r1, #7
 8001816:	400b      	ands	r3, r1
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	409a      	lsls	r2, r3
 800181c:	0013      	movs	r3, r2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	08da      	lsrs	r2, r3, #3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3208      	adds	r2, #8
 800182c:	0092      	lsls	r2, r2, #2
 800182e:	6939      	ldr	r1, [r7, #16]
 8001830:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	2203      	movs	r2, #3
 800183e:	409a      	lsls	r2, r3
 8001840:	0013      	movs	r3, r2
 8001842:	43da      	mvns	r2, r3
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2203      	movs	r2, #3
 8001850:	401a      	ands	r2, r3
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	409a      	lsls	r2, r3
 8001858:	0013      	movs	r3, r2
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	23c0      	movs	r3, #192	; 0xc0
 800186c:	029b      	lsls	r3, r3, #10
 800186e:	4013      	ands	r3, r2
 8001870:	d100      	bne.n	8001874 <HAL_GPIO_Init+0x174>
 8001872:	e09a      	b.n	80019aa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001874:	4b54      	ldr	r3, [pc, #336]	; (80019c8 <HAL_GPIO_Init+0x2c8>)
 8001876:	699a      	ldr	r2, [r3, #24]
 8001878:	4b53      	ldr	r3, [pc, #332]	; (80019c8 <HAL_GPIO_Init+0x2c8>)
 800187a:	2101      	movs	r1, #1
 800187c:	430a      	orrs	r2, r1
 800187e:	619a      	str	r2, [r3, #24]
 8001880:	4b51      	ldr	r3, [pc, #324]	; (80019c8 <HAL_GPIO_Init+0x2c8>)
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	2201      	movs	r2, #1
 8001886:	4013      	ands	r3, r2
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800188c:	4a4f      	ldr	r2, [pc, #316]	; (80019cc <HAL_GPIO_Init+0x2cc>)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	089b      	lsrs	r3, r3, #2
 8001892:	3302      	adds	r3, #2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	589b      	ldr	r3, [r3, r2]
 8001898:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	2203      	movs	r2, #3
 800189e:	4013      	ands	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	220f      	movs	r2, #15
 80018a4:	409a      	lsls	r2, r3
 80018a6:	0013      	movs	r3, r2
 80018a8:	43da      	mvns	r2, r3
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	2390      	movs	r3, #144	; 0x90
 80018b4:	05db      	lsls	r3, r3, #23
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d013      	beq.n	80018e2 <HAL_GPIO_Init+0x1e2>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a44      	ldr	r2, [pc, #272]	; (80019d0 <HAL_GPIO_Init+0x2d0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d00d      	beq.n	80018de <HAL_GPIO_Init+0x1de>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a43      	ldr	r2, [pc, #268]	; (80019d4 <HAL_GPIO_Init+0x2d4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d007      	beq.n	80018da <HAL_GPIO_Init+0x1da>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a42      	ldr	r2, [pc, #264]	; (80019d8 <HAL_GPIO_Init+0x2d8>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d101      	bne.n	80018d6 <HAL_GPIO_Init+0x1d6>
 80018d2:	2303      	movs	r3, #3
 80018d4:	e006      	b.n	80018e4 <HAL_GPIO_Init+0x1e4>
 80018d6:	2305      	movs	r3, #5
 80018d8:	e004      	b.n	80018e4 <HAL_GPIO_Init+0x1e4>
 80018da:	2302      	movs	r3, #2
 80018dc:	e002      	b.n	80018e4 <HAL_GPIO_Init+0x1e4>
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <HAL_GPIO_Init+0x1e4>
 80018e2:	2300      	movs	r3, #0
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	2103      	movs	r1, #3
 80018e8:	400a      	ands	r2, r1
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	4093      	lsls	r3, r2
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018f4:	4935      	ldr	r1, [pc, #212]	; (80019cc <HAL_GPIO_Init+0x2cc>)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	089b      	lsrs	r3, r3, #2
 80018fa:	3302      	adds	r3, #2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001902:	4b36      	ldr	r3, [pc, #216]	; (80019dc <HAL_GPIO_Init+0x2dc>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	43da      	mvns	r2, r3
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	2380      	movs	r3, #128	; 0x80
 8001918:	035b      	lsls	r3, r3, #13
 800191a:	4013      	ands	r3, r2
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	4313      	orrs	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001926:	4b2d      	ldr	r3, [pc, #180]	; (80019dc <HAL_GPIO_Init+0x2dc>)
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800192c:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <HAL_GPIO_Init+0x2dc>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	43da      	mvns	r2, r3
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	039b      	lsls	r3, r3, #14
 8001944:	4013      	ands	r3, r2
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001950:	4b22      	ldr	r3, [pc, #136]	; (80019dc <HAL_GPIO_Init+0x2dc>)
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001956:	4b21      	ldr	r3, [pc, #132]	; (80019dc <HAL_GPIO_Init+0x2dc>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	43da      	mvns	r2, r3
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	4013      	ands	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	029b      	lsls	r3, r3, #10
 800196e:	4013      	ands	r3, r2
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4313      	orrs	r3, r2
 8001978:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <HAL_GPIO_Init+0x2dc>)
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001980:	4b16      	ldr	r3, [pc, #88]	; (80019dc <HAL_GPIO_Init+0x2dc>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	43da      	mvns	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4013      	ands	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	025b      	lsls	r3, r3, #9
 8001998:	4013      	ands	r3, r2
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019a4:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <HAL_GPIO_Init+0x2dc>)
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	3301      	adds	r3, #1
 80019ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	40da      	lsrs	r2, r3
 80019b8:	1e13      	subs	r3, r2, #0
 80019ba:	d000      	beq.n	80019be <HAL_GPIO_Init+0x2be>
 80019bc:	e6a8      	b.n	8001710 <HAL_GPIO_Init+0x10>
  } 
}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	46c0      	nop			; (mov r8, r8)
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b006      	add	sp, #24
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40010000 	.word	0x40010000
 80019d0:	48000400 	.word	0x48000400
 80019d4:	48000800 	.word	0x48000800
 80019d8:	48000c00 	.word	0x48000c00
 80019dc:	40010400 	.word	0x40010400

080019e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	000a      	movs	r2, r1
 80019ea:	1cbb      	adds	r3, r7, #2
 80019ec:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	1cba      	adds	r2, r7, #2
 80019f4:	8812      	ldrh	r2, [r2, #0]
 80019f6:	4013      	ands	r3, r2
 80019f8:	d004      	beq.n	8001a04 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80019fa:	230f      	movs	r3, #15
 80019fc:	18fb      	adds	r3, r7, r3
 80019fe:	2201      	movs	r2, #1
 8001a00:	701a      	strb	r2, [r3, #0]
 8001a02:	e003      	b.n	8001a0c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a04:	230f      	movs	r3, #15
 8001a06:	18fb      	adds	r3, r7, r3
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001a0c:	230f      	movs	r3, #15
 8001a0e:	18fb      	adds	r3, r7, r3
 8001a10:	781b      	ldrb	r3, [r3, #0]
  }
 8001a12:	0018      	movs	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b004      	add	sp, #16
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
 8001a22:	0008      	movs	r0, r1
 8001a24:	0011      	movs	r1, r2
 8001a26:	1cbb      	adds	r3, r7, #2
 8001a28:	1c02      	adds	r2, r0, #0
 8001a2a:	801a      	strh	r2, [r3, #0]
 8001a2c:	1c7b      	adds	r3, r7, #1
 8001a2e:	1c0a      	adds	r2, r1, #0
 8001a30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a32:	1c7b      	adds	r3, r7, #1
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d004      	beq.n	8001a44 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a3a:	1cbb      	adds	r3, r7, #2
 8001a3c:	881a      	ldrh	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a42:	e003      	b.n	8001a4c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a44:	1cbb      	adds	r3, r7, #2
 8001a46:	881a      	ldrh	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a4c:	46c0      	nop			; (mov r8, r8)
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	b002      	add	sp, #8
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e301      	b.n	800206a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d100      	bne.n	8001a72 <HAL_RCC_OscConfig+0x1e>
 8001a70:	e08d      	b.n	8001b8e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a72:	4bc3      	ldr	r3, [pc, #780]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	220c      	movs	r2, #12
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d00e      	beq.n	8001a9c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a7e:	4bc0      	ldr	r3, [pc, #768]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	220c      	movs	r2, #12
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d116      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x64>
 8001a8a:	4bbd      	ldr	r3, [pc, #756]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	025b      	lsls	r3, r3, #9
 8001a92:	401a      	ands	r2, r3
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	025b      	lsls	r3, r3, #9
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d10d      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9c:	4bb8      	ldr	r3, [pc, #736]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	029b      	lsls	r3, r3, #10
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d100      	bne.n	8001aaa <HAL_RCC_OscConfig+0x56>
 8001aa8:	e070      	b.n	8001b8c <HAL_RCC_OscConfig+0x138>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d000      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x60>
 8001ab2:	e06b      	b.n	8001b8c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e2d8      	b.n	800206a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d107      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x7c>
 8001ac0:	4baf      	ldr	r3, [pc, #700]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	4bae      	ldr	r3, [pc, #696]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001ac6:	2180      	movs	r1, #128	; 0x80
 8001ac8:	0249      	lsls	r1, r1, #9
 8001aca:	430a      	orrs	r2, r1
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	e02f      	b.n	8001b30 <HAL_RCC_OscConfig+0xdc>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d10c      	bne.n	8001af2 <HAL_RCC_OscConfig+0x9e>
 8001ad8:	4ba9      	ldr	r3, [pc, #676]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4ba8      	ldr	r3, [pc, #672]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001ade:	49a9      	ldr	r1, [pc, #676]	; (8001d84 <HAL_RCC_OscConfig+0x330>)
 8001ae0:	400a      	ands	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	4ba6      	ldr	r3, [pc, #664]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4ba5      	ldr	r3, [pc, #660]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001aea:	49a7      	ldr	r1, [pc, #668]	; (8001d88 <HAL_RCC_OscConfig+0x334>)
 8001aec:	400a      	ands	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	e01e      	b.n	8001b30 <HAL_RCC_OscConfig+0xdc>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b05      	cmp	r3, #5
 8001af8:	d10e      	bne.n	8001b18 <HAL_RCC_OscConfig+0xc4>
 8001afa:	4ba1      	ldr	r3, [pc, #644]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4ba0      	ldr	r3, [pc, #640]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001b00:	2180      	movs	r1, #128	; 0x80
 8001b02:	02c9      	lsls	r1, r1, #11
 8001b04:	430a      	orrs	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	4b9d      	ldr	r3, [pc, #628]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b9c      	ldr	r3, [pc, #624]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001b0e:	2180      	movs	r1, #128	; 0x80
 8001b10:	0249      	lsls	r1, r1, #9
 8001b12:	430a      	orrs	r2, r1
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	e00b      	b.n	8001b30 <HAL_RCC_OscConfig+0xdc>
 8001b18:	4b99      	ldr	r3, [pc, #612]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b98      	ldr	r3, [pc, #608]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001b1e:	4999      	ldr	r1, [pc, #612]	; (8001d84 <HAL_RCC_OscConfig+0x330>)
 8001b20:	400a      	ands	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	4b96      	ldr	r3, [pc, #600]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	4b95      	ldr	r3, [pc, #596]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001b2a:	4997      	ldr	r1, [pc, #604]	; (8001d88 <HAL_RCC_OscConfig+0x334>)
 8001b2c:	400a      	ands	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d014      	beq.n	8001b62 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7ff fd00 	bl	800153c <HAL_GetTick>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b42:	f7ff fcfb 	bl	800153c <HAL_GetTick>
 8001b46:	0002      	movs	r2, r0
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b64      	cmp	r3, #100	; 0x64
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e28a      	b.n	800206a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b54:	4b8a      	ldr	r3, [pc, #552]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	029b      	lsls	r3, r3, #10
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0xee>
 8001b60:	e015      	b.n	8001b8e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b62:	f7ff fceb 	bl	800153c <HAL_GetTick>
 8001b66:	0003      	movs	r3, r0
 8001b68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff fce6 	bl	800153c <HAL_GetTick>
 8001b70:	0002      	movs	r2, r0
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	; 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e275      	b.n	800206a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7e:	4b80      	ldr	r3, [pc, #512]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	029b      	lsls	r3, r3, #10
 8001b86:	4013      	ands	r3, r2
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x118>
 8001b8a:	e000      	b.n	8001b8e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2202      	movs	r2, #2
 8001b94:	4013      	ands	r3, r2
 8001b96:	d100      	bne.n	8001b9a <HAL_RCC_OscConfig+0x146>
 8001b98:	e069      	b.n	8001c6e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b9a:	4b79      	ldr	r3, [pc, #484]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d00b      	beq.n	8001bbc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ba4:	4b76      	ldr	r3, [pc, #472]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	220c      	movs	r2, #12
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d11c      	bne.n	8001bea <HAL_RCC_OscConfig+0x196>
 8001bb0:	4b73      	ldr	r3, [pc, #460]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	025b      	lsls	r3, r3, #9
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d116      	bne.n	8001bea <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bbc:	4b70      	ldr	r3, [pc, #448]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d005      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x17e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d001      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e24b      	b.n	800206a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd2:	4b6b      	ldr	r3, [pc, #428]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	22f8      	movs	r2, #248	; 0xf8
 8001bd8:	4393      	bics	r3, r2
 8001bda:	0019      	movs	r1, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	00da      	lsls	r2, r3, #3
 8001be2:	4b67      	ldr	r3, [pc, #412]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001be4:	430a      	orrs	r2, r1
 8001be6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be8:	e041      	b.n	8001c6e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d024      	beq.n	8001c3c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf2:	4b63      	ldr	r3, [pc, #396]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	4b62      	ldr	r3, [pc, #392]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7ff fc9d 	bl	800153c <HAL_GetTick>
 8001c02:	0003      	movs	r3, r0
 8001c04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c08:	f7ff fc98 	bl	800153c <HAL_GetTick>
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e227      	b.n	800206a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1a:	4b59      	ldr	r3, [pc, #356]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	4013      	ands	r3, r2
 8001c22:	d0f1      	beq.n	8001c08 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c24:	4b56      	ldr	r3, [pc, #344]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	22f8      	movs	r2, #248	; 0xf8
 8001c2a:	4393      	bics	r3, r2
 8001c2c:	0019      	movs	r1, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	00da      	lsls	r2, r3, #3
 8001c34:	4b52      	ldr	r3, [pc, #328]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001c36:	430a      	orrs	r2, r1
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	e018      	b.n	8001c6e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3c:	4b50      	ldr	r3, [pc, #320]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	4b4f      	ldr	r3, [pc, #316]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001c42:	2101      	movs	r1, #1
 8001c44:	438a      	bics	r2, r1
 8001c46:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7ff fc78 	bl	800153c <HAL_GetTick>
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c52:	f7ff fc73 	bl	800153c <HAL_GetTick>
 8001c56:	0002      	movs	r2, r0
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e202      	b.n	800206a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c64:	4b46      	ldr	r3, [pc, #280]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2202      	movs	r2, #2
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d1f1      	bne.n	8001c52 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2208      	movs	r2, #8
 8001c74:	4013      	ands	r3, r2
 8001c76:	d036      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d019      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c80:	4b3f      	ldr	r3, [pc, #252]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001c82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c84:	4b3e      	ldr	r3, [pc, #248]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001c86:	2101      	movs	r1, #1
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c8c:	f7ff fc56 	bl	800153c <HAL_GetTick>
 8001c90:	0003      	movs	r3, r0
 8001c92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c96:	f7ff fc51 	bl	800153c <HAL_GetTick>
 8001c9a:	0002      	movs	r2, r0
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e1e0      	b.n	800206a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca8:	4b35      	ldr	r3, [pc, #212]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	2202      	movs	r2, #2
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d0f1      	beq.n	8001c96 <HAL_RCC_OscConfig+0x242>
 8001cb2:	e018      	b.n	8001ce6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cb4:	4b32      	ldr	r3, [pc, #200]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001cb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cb8:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001cba:	2101      	movs	r1, #1
 8001cbc:	438a      	bics	r2, r1
 8001cbe:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc0:	f7ff fc3c 	bl	800153c <HAL_GetTick>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cca:	f7ff fc37 	bl	800153c <HAL_GetTick>
 8001cce:	0002      	movs	r2, r0
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e1c6      	b.n	800206a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cdc:	4b28      	ldr	r3, [pc, #160]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d1f1      	bne.n	8001cca <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2204      	movs	r2, #4
 8001cec:	4013      	ands	r3, r2
 8001cee:	d100      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x29e>
 8001cf0:	e0b4      	b.n	8001e5c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf2:	201f      	movs	r0, #31
 8001cf4:	183b      	adds	r3, r7, r0
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfa:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001cfc:	69da      	ldr	r2, [r3, #28]
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	055b      	lsls	r3, r3, #21
 8001d02:	4013      	ands	r3, r2
 8001d04:	d110      	bne.n	8001d28 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001d08:	69da      	ldr	r2, [r3, #28]
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001d0c:	2180      	movs	r1, #128	; 0x80
 8001d0e:	0549      	lsls	r1, r1, #21
 8001d10:	430a      	orrs	r2, r1
 8001d12:	61da      	str	r2, [r3, #28]
 8001d14:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001d16:	69da      	ldr	r2, [r3, #28]
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	055b      	lsls	r3, r3, #21
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d22:	183b      	adds	r3, r7, r0
 8001d24:	2201      	movs	r2, #1
 8001d26:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <HAL_RCC_OscConfig+0x338>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	4013      	ands	r3, r2
 8001d32:	d11a      	bne.n	8001d6a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d34:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HAL_RCC_OscConfig+0x338>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <HAL_RCC_OscConfig+0x338>)
 8001d3a:	2180      	movs	r1, #128	; 0x80
 8001d3c:	0049      	lsls	r1, r1, #1
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d42:	f7ff fbfb 	bl	800153c <HAL_GetTick>
 8001d46:	0003      	movs	r3, r0
 8001d48:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4c:	f7ff fbf6 	bl	800153c <HAL_GetTick>
 8001d50:	0002      	movs	r2, r0
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	; 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e185      	b.n	800206a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_RCC_OscConfig+0x338>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	4013      	ands	r3, r2
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d10e      	bne.n	8001d90 <HAL_RCC_OscConfig+0x33c>
 8001d72:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001d74:	6a1a      	ldr	r2, [r3, #32]
 8001d76:	4b02      	ldr	r3, [pc, #8]	; (8001d80 <HAL_RCC_OscConfig+0x32c>)
 8001d78:	2101      	movs	r1, #1
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	621a      	str	r2, [r3, #32]
 8001d7e:	e035      	b.n	8001dec <HAL_RCC_OscConfig+0x398>
 8001d80:	40021000 	.word	0x40021000
 8001d84:	fffeffff 	.word	0xfffeffff
 8001d88:	fffbffff 	.word	0xfffbffff
 8001d8c:	40007000 	.word	0x40007000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d10c      	bne.n	8001db2 <HAL_RCC_OscConfig+0x35e>
 8001d98:	4bb6      	ldr	r3, [pc, #728]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001d9a:	6a1a      	ldr	r2, [r3, #32]
 8001d9c:	4bb5      	ldr	r3, [pc, #724]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001d9e:	2101      	movs	r1, #1
 8001da0:	438a      	bics	r2, r1
 8001da2:	621a      	str	r2, [r3, #32]
 8001da4:	4bb3      	ldr	r3, [pc, #716]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001da6:	6a1a      	ldr	r2, [r3, #32]
 8001da8:	4bb2      	ldr	r3, [pc, #712]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001daa:	2104      	movs	r1, #4
 8001dac:	438a      	bics	r2, r1
 8001dae:	621a      	str	r2, [r3, #32]
 8001db0:	e01c      	b.n	8001dec <HAL_RCC_OscConfig+0x398>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b05      	cmp	r3, #5
 8001db8:	d10c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x380>
 8001dba:	4bae      	ldr	r3, [pc, #696]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001dbc:	6a1a      	ldr	r2, [r3, #32]
 8001dbe:	4bad      	ldr	r3, [pc, #692]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001dc0:	2104      	movs	r1, #4
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	621a      	str	r2, [r3, #32]
 8001dc6:	4bab      	ldr	r3, [pc, #684]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001dc8:	6a1a      	ldr	r2, [r3, #32]
 8001dca:	4baa      	ldr	r3, [pc, #680]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001dcc:	2101      	movs	r1, #1
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	621a      	str	r2, [r3, #32]
 8001dd2:	e00b      	b.n	8001dec <HAL_RCC_OscConfig+0x398>
 8001dd4:	4ba7      	ldr	r3, [pc, #668]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001dd6:	6a1a      	ldr	r2, [r3, #32]
 8001dd8:	4ba6      	ldr	r3, [pc, #664]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001dda:	2101      	movs	r1, #1
 8001ddc:	438a      	bics	r2, r1
 8001dde:	621a      	str	r2, [r3, #32]
 8001de0:	4ba4      	ldr	r3, [pc, #656]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001de2:	6a1a      	ldr	r2, [r3, #32]
 8001de4:	4ba3      	ldr	r3, [pc, #652]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001de6:	2104      	movs	r1, #4
 8001de8:	438a      	bics	r2, r1
 8001dea:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d014      	beq.n	8001e1e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df4:	f7ff fba2 	bl	800153c <HAL_GetTick>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfc:	e009      	b.n	8001e12 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dfe:	f7ff fb9d 	bl	800153c <HAL_GetTick>
 8001e02:	0002      	movs	r2, r0
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	4a9b      	ldr	r2, [pc, #620]	; (8002078 <HAL_RCC_OscConfig+0x624>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e12b      	b.n	800206a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e12:	4b98      	ldr	r3, [pc, #608]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	2202      	movs	r2, #2
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d0f0      	beq.n	8001dfe <HAL_RCC_OscConfig+0x3aa>
 8001e1c:	e013      	b.n	8001e46 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1e:	f7ff fb8d 	bl	800153c <HAL_GetTick>
 8001e22:	0003      	movs	r3, r0
 8001e24:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e26:	e009      	b.n	8001e3c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e28:	f7ff fb88 	bl	800153c <HAL_GetTick>
 8001e2c:	0002      	movs	r2, r0
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	4a91      	ldr	r2, [pc, #580]	; (8002078 <HAL_RCC_OscConfig+0x624>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e116      	b.n	800206a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3c:	4b8d      	ldr	r3, [pc, #564]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	2202      	movs	r2, #2
 8001e42:	4013      	ands	r3, r2
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e46:	231f      	movs	r3, #31
 8001e48:	18fb      	adds	r3, r7, r3
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d105      	bne.n	8001e5c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e50:	4b88      	ldr	r3, [pc, #544]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001e52:	69da      	ldr	r2, [r3, #28]
 8001e54:	4b87      	ldr	r3, [pc, #540]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001e56:	4989      	ldr	r1, [pc, #548]	; (800207c <HAL_RCC_OscConfig+0x628>)
 8001e58:	400a      	ands	r2, r1
 8001e5a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2210      	movs	r2, #16
 8001e62:	4013      	ands	r3, r2
 8001e64:	d063      	beq.n	8001f2e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d12a      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e6e:	4b81      	ldr	r3, [pc, #516]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001e70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e72:	4b80      	ldr	r3, [pc, #512]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001e74:	2104      	movs	r1, #4
 8001e76:	430a      	orrs	r2, r1
 8001e78:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001e7a:	4b7e      	ldr	r3, [pc, #504]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001e7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e7e:	4b7d      	ldr	r3, [pc, #500]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001e80:	2101      	movs	r1, #1
 8001e82:	430a      	orrs	r2, r1
 8001e84:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e86:	f7ff fb59 	bl	800153c <HAL_GetTick>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e90:	f7ff fb54 	bl	800153c <HAL_GetTick>
 8001e94:	0002      	movs	r2, r0
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e0e3      	b.n	800206a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001ea2:	4b74      	ldr	r3, [pc, #464]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d0f1      	beq.n	8001e90 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001eac:	4b71      	ldr	r3, [pc, #452]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb0:	22f8      	movs	r2, #248	; 0xf8
 8001eb2:	4393      	bics	r3, r2
 8001eb4:	0019      	movs	r1, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	00da      	lsls	r2, r3, #3
 8001ebc:	4b6d      	ldr	r3, [pc, #436]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ec2:	e034      	b.n	8001f2e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	3305      	adds	r3, #5
 8001eca:	d111      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ecc:	4b69      	ldr	r3, [pc, #420]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ed0:	4b68      	ldr	r3, [pc, #416]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001ed2:	2104      	movs	r1, #4
 8001ed4:	438a      	bics	r2, r1
 8001ed6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ed8:	4b66      	ldr	r3, [pc, #408]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001edc:	22f8      	movs	r2, #248	; 0xf8
 8001ede:	4393      	bics	r3, r2
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	00da      	lsls	r2, r3, #3
 8001ee8:	4b62      	ldr	r3, [pc, #392]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001eea:	430a      	orrs	r2, r1
 8001eec:	635a      	str	r2, [r3, #52]	; 0x34
 8001eee:	e01e      	b.n	8001f2e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ef0:	4b60      	ldr	r3, [pc, #384]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001ef2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ef4:	4b5f      	ldr	r3, [pc, #380]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001ef6:	2104      	movs	r1, #4
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001efc:	4b5d      	ldr	r3, [pc, #372]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001efe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f00:	4b5c      	ldr	r3, [pc, #368]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001f02:	2101      	movs	r1, #1
 8001f04:	438a      	bics	r2, r1
 8001f06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f08:	f7ff fb18 	bl	800153c <HAL_GetTick>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f12:	f7ff fb13 	bl	800153c <HAL_GetTick>
 8001f16:	0002      	movs	r2, r0
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e0a2      	b.n	800206a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f24:	4b53      	ldr	r3, [pc, #332]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f28:	2202      	movs	r2, #2
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d1f1      	bne.n	8001f12 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d100      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4e4>
 8001f36:	e097      	b.n	8002068 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f38:	4b4e      	ldr	r3, [pc, #312]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	220c      	movs	r2, #12
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d100      	bne.n	8001f46 <HAL_RCC_OscConfig+0x4f2>
 8001f44:	e06b      	b.n	800201e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d14c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4e:	4b49      	ldr	r3, [pc, #292]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	4b48      	ldr	r3, [pc, #288]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001f54:	494a      	ldr	r1, [pc, #296]	; (8002080 <HAL_RCC_OscConfig+0x62c>)
 8001f56:	400a      	ands	r2, r1
 8001f58:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5a:	f7ff faef 	bl	800153c <HAL_GetTick>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f64:	f7ff faea 	bl	800153c <HAL_GetTick>
 8001f68:	0002      	movs	r2, r0
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e079      	b.n	800206a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f76:	4b3f      	ldr	r3, [pc, #252]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	049b      	lsls	r3, r3, #18
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f82:	4b3c      	ldr	r3, [pc, #240]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f86:	220f      	movs	r2, #15
 8001f88:	4393      	bics	r3, r2
 8001f8a:	0019      	movs	r1, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f90:	4b38      	ldr	r3, [pc, #224]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001f92:	430a      	orrs	r2, r1
 8001f94:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f96:	4b37      	ldr	r3, [pc, #220]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	4a3a      	ldr	r2, [pc, #232]	; (8002084 <HAL_RCC_OscConfig+0x630>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	0019      	movs	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	4b32      	ldr	r3, [pc, #200]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001fac:	430a      	orrs	r2, r1
 8001fae:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fb0:	4b30      	ldr	r3, [pc, #192]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b2f      	ldr	r3, [pc, #188]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001fb6:	2180      	movs	r1, #128	; 0x80
 8001fb8:	0449      	lsls	r1, r1, #17
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7ff fabd 	bl	800153c <HAL_GetTick>
 8001fc2:	0003      	movs	r3, r0
 8001fc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fc8:	f7ff fab8 	bl	800153c <HAL_GetTick>
 8001fcc:	0002      	movs	r2, r0
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e047      	b.n	800206a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fda:	4b26      	ldr	r3, [pc, #152]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	049b      	lsls	r3, r3, #18
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x574>
 8001fe6:	e03f      	b.n	8002068 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe8:	4b22      	ldr	r3, [pc, #136]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b21      	ldr	r3, [pc, #132]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8001fee:	4924      	ldr	r1, [pc, #144]	; (8002080 <HAL_RCC_OscConfig+0x62c>)
 8001ff0:	400a      	ands	r2, r1
 8001ff2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7ff faa2 	bl	800153c <HAL_GetTick>
 8001ff8:	0003      	movs	r3, r0
 8001ffa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ffe:	f7ff fa9d 	bl	800153c <HAL_GetTick>
 8002002:	0002      	movs	r2, r0
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e02c      	b.n	800206a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002010:	4b18      	ldr	r3, [pc, #96]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	2380      	movs	r3, #128	; 0x80
 8002016:	049b      	lsls	r3, r3, #18
 8002018:	4013      	ands	r3, r2
 800201a:	d1f0      	bne.n	8001ffe <HAL_RCC_OscConfig+0x5aa>
 800201c:	e024      	b.n	8002068 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e01f      	b.n	800206a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002030:	4b10      	ldr	r3, [pc, #64]	; (8002074 <HAL_RCC_OscConfig+0x620>)
 8002032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002034:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	2380      	movs	r3, #128	; 0x80
 800203a:	025b      	lsls	r3, r3, #9
 800203c:	401a      	ands	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	429a      	cmp	r2, r3
 8002044:	d10e      	bne.n	8002064 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	220f      	movs	r2, #15
 800204a:	401a      	ands	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002050:	429a      	cmp	r2, r3
 8002052:	d107      	bne.n	8002064 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	23f0      	movs	r3, #240	; 0xf0
 8002058:	039b      	lsls	r3, r3, #14
 800205a:	401a      	ands	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	0018      	movs	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	b008      	add	sp, #32
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	40021000 	.word	0x40021000
 8002078:	00001388 	.word	0x00001388
 800207c:	efffffff 	.word	0xefffffff
 8002080:	feffffff 	.word	0xfeffffff
 8002084:	ffc2ffff 	.word	0xffc2ffff

08002088 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0b3      	b.n	8002204 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800209c:	4b5b      	ldr	r3, [pc, #364]	; (800220c <HAL_RCC_ClockConfig+0x184>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2201      	movs	r2, #1
 80020a2:	4013      	ands	r3, r2
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d911      	bls.n	80020ce <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020aa:	4b58      	ldr	r3, [pc, #352]	; (800220c <HAL_RCC_ClockConfig+0x184>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2201      	movs	r2, #1
 80020b0:	4393      	bics	r3, r2
 80020b2:	0019      	movs	r1, r3
 80020b4:	4b55      	ldr	r3, [pc, #340]	; (800220c <HAL_RCC_ClockConfig+0x184>)
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020bc:	4b53      	ldr	r3, [pc, #332]	; (800220c <HAL_RCC_ClockConfig+0x184>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2201      	movs	r2, #1
 80020c2:	4013      	ands	r3, r2
 80020c4:	683a      	ldr	r2, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d001      	beq.n	80020ce <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e09a      	b.n	8002204 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2202      	movs	r2, #2
 80020d4:	4013      	ands	r3, r2
 80020d6:	d015      	beq.n	8002104 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2204      	movs	r2, #4
 80020de:	4013      	ands	r3, r2
 80020e0:	d006      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020e2:	4b4b      	ldr	r3, [pc, #300]	; (8002210 <HAL_RCC_ClockConfig+0x188>)
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	4b4a      	ldr	r3, [pc, #296]	; (8002210 <HAL_RCC_ClockConfig+0x188>)
 80020e8:	21e0      	movs	r1, #224	; 0xe0
 80020ea:	00c9      	lsls	r1, r1, #3
 80020ec:	430a      	orrs	r2, r1
 80020ee:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f0:	4b47      	ldr	r3, [pc, #284]	; (8002210 <HAL_RCC_ClockConfig+0x188>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	22f0      	movs	r2, #240	; 0xf0
 80020f6:	4393      	bics	r3, r2
 80020f8:	0019      	movs	r1, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	4b44      	ldr	r3, [pc, #272]	; (8002210 <HAL_RCC_ClockConfig+0x188>)
 8002100:	430a      	orrs	r2, r1
 8002102:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2201      	movs	r2, #1
 800210a:	4013      	ands	r3, r2
 800210c:	d040      	beq.n	8002190 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d107      	bne.n	8002126 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002116:	4b3e      	ldr	r3, [pc, #248]	; (8002210 <HAL_RCC_ClockConfig+0x188>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	029b      	lsls	r3, r3, #10
 800211e:	4013      	ands	r3, r2
 8002120:	d114      	bne.n	800214c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e06e      	b.n	8002204 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d107      	bne.n	800213e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212e:	4b38      	ldr	r3, [pc, #224]	; (8002210 <HAL_RCC_ClockConfig+0x188>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	049b      	lsls	r3, r3, #18
 8002136:	4013      	ands	r3, r2
 8002138:	d108      	bne.n	800214c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e062      	b.n	8002204 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213e:	4b34      	ldr	r3, [pc, #208]	; (8002210 <HAL_RCC_ClockConfig+0x188>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2202      	movs	r2, #2
 8002144:	4013      	ands	r3, r2
 8002146:	d101      	bne.n	800214c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e05b      	b.n	8002204 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800214c:	4b30      	ldr	r3, [pc, #192]	; (8002210 <HAL_RCC_ClockConfig+0x188>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2203      	movs	r2, #3
 8002152:	4393      	bics	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	4b2d      	ldr	r3, [pc, #180]	; (8002210 <HAL_RCC_ClockConfig+0x188>)
 800215c:	430a      	orrs	r2, r1
 800215e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002160:	f7ff f9ec 	bl	800153c <HAL_GetTick>
 8002164:	0003      	movs	r3, r0
 8002166:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002168:	e009      	b.n	800217e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216a:	f7ff f9e7 	bl	800153c <HAL_GetTick>
 800216e:	0002      	movs	r2, r0
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	4a27      	ldr	r2, [pc, #156]	; (8002214 <HAL_RCC_ClockConfig+0x18c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d901      	bls.n	800217e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e042      	b.n	8002204 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800217e:	4b24      	ldr	r3, [pc, #144]	; (8002210 <HAL_RCC_ClockConfig+0x188>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	220c      	movs	r2, #12
 8002184:	401a      	ands	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	429a      	cmp	r2, r3
 800218e:	d1ec      	bne.n	800216a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002190:	4b1e      	ldr	r3, [pc, #120]	; (800220c <HAL_RCC_ClockConfig+0x184>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2201      	movs	r2, #1
 8002196:	4013      	ands	r3, r2
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	429a      	cmp	r2, r3
 800219c:	d211      	bcs.n	80021c2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219e:	4b1b      	ldr	r3, [pc, #108]	; (800220c <HAL_RCC_ClockConfig+0x184>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2201      	movs	r2, #1
 80021a4:	4393      	bics	r3, r2
 80021a6:	0019      	movs	r1, r3
 80021a8:	4b18      	ldr	r3, [pc, #96]	; (800220c <HAL_RCC_ClockConfig+0x184>)
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b0:	4b16      	ldr	r3, [pc, #88]	; (800220c <HAL_RCC_ClockConfig+0x184>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2201      	movs	r2, #1
 80021b6:	4013      	ands	r3, r2
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d001      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e020      	b.n	8002204 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2204      	movs	r2, #4
 80021c8:	4013      	ands	r3, r2
 80021ca:	d009      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021cc:	4b10      	ldr	r3, [pc, #64]	; (8002210 <HAL_RCC_ClockConfig+0x188>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4a11      	ldr	r2, [pc, #68]	; (8002218 <HAL_RCC_ClockConfig+0x190>)
 80021d2:	4013      	ands	r3, r2
 80021d4:	0019      	movs	r1, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <HAL_RCC_ClockConfig+0x188>)
 80021dc:	430a      	orrs	r2, r1
 80021de:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021e0:	f000 f820 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 80021e4:	0001      	movs	r1, r0
 80021e6:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <HAL_RCC_ClockConfig+0x188>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	091b      	lsrs	r3, r3, #4
 80021ec:	220f      	movs	r2, #15
 80021ee:	4013      	ands	r3, r2
 80021f0:	4a0a      	ldr	r2, [pc, #40]	; (800221c <HAL_RCC_ClockConfig+0x194>)
 80021f2:	5cd3      	ldrb	r3, [r2, r3]
 80021f4:	000a      	movs	r2, r1
 80021f6:	40da      	lsrs	r2, r3
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <HAL_RCC_ClockConfig+0x198>)
 80021fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80021fc:	2003      	movs	r0, #3
 80021fe:	f7ff f957 	bl	80014b0 <HAL_InitTick>
  
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	0018      	movs	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	b004      	add	sp, #16
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40022000 	.word	0x40022000
 8002210:	40021000 	.word	0x40021000
 8002214:	00001388 	.word	0x00001388
 8002218:	fffff8ff 	.word	0xfffff8ff
 800221c:	080029b8 	.word	0x080029b8
 8002220:	20000000 	.word	0x20000000

08002224 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	2300      	movs	r3, #0
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800223e:	4b20      	ldr	r3, [pc, #128]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	220c      	movs	r2, #12
 8002248:	4013      	ands	r3, r2
 800224a:	2b04      	cmp	r3, #4
 800224c:	d002      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x30>
 800224e:	2b08      	cmp	r3, #8
 8002250:	d003      	beq.n	800225a <HAL_RCC_GetSysClockFreq+0x36>
 8002252:	e02c      	b.n	80022ae <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002254:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002256:	613b      	str	r3, [r7, #16]
      break;
 8002258:	e02c      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	0c9b      	lsrs	r3, r3, #18
 800225e:	220f      	movs	r2, #15
 8002260:	4013      	ands	r3, r2
 8002262:	4a19      	ldr	r2, [pc, #100]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002264:	5cd3      	ldrb	r3, [r2, r3]
 8002266:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002268:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226c:	220f      	movs	r2, #15
 800226e:	4013      	ands	r3, r2
 8002270:	4a16      	ldr	r2, [pc, #88]	; (80022cc <HAL_RCC_GetSysClockFreq+0xa8>)
 8002272:	5cd3      	ldrb	r3, [r2, r3]
 8002274:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	025b      	lsls	r3, r3, #9
 800227c:	4013      	ands	r3, r2
 800227e:	d009      	beq.n	8002294 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002280:	68b9      	ldr	r1, [r7, #8]
 8002282:	4810      	ldr	r0, [pc, #64]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002284:	f7fd ff40 	bl	8000108 <__udivsi3>
 8002288:	0003      	movs	r3, r0
 800228a:	001a      	movs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4353      	muls	r3, r2
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	e009      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	000a      	movs	r2, r1
 8002298:	0152      	lsls	r2, r2, #5
 800229a:	1a52      	subs	r2, r2, r1
 800229c:	0193      	lsls	r3, r2, #6
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	185b      	adds	r3, r3, r1
 80022a4:	021b      	lsls	r3, r3, #8
 80022a6:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	613b      	str	r3, [r7, #16]
      break;
 80022ac:	e002      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022ae:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022b0:	613b      	str	r3, [r7, #16]
      break;
 80022b2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80022b4:	693b      	ldr	r3, [r7, #16]
}
 80022b6:	0018      	movs	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	b006      	add	sp, #24
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	40021000 	.word	0x40021000
 80022c4:	007a1200 	.word	0x007a1200
 80022c8:	080029c8 	.word	0x080029c8
 80022cc:	080029d8 	.word	0x080029d8

080022d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e042      	b.n	8002368 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	223d      	movs	r2, #61	; 0x3d
 80022e6:	5c9b      	ldrb	r3, [r3, r2]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d107      	bne.n	80022fe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	223c      	movs	r2, #60	; 0x3c
 80022f2:	2100      	movs	r1, #0
 80022f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	0018      	movs	r0, r3
 80022fa:	f7ff f861 	bl	80013c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	223d      	movs	r2, #61	; 0x3d
 8002302:	2102      	movs	r1, #2
 8002304:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3304      	adds	r3, #4
 800230e:	0019      	movs	r1, r3
 8002310:	0010      	movs	r0, r2
 8002312:	f000 f991 	bl	8002638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2246      	movs	r2, #70	; 0x46
 800231a:	2101      	movs	r1, #1
 800231c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	223e      	movs	r2, #62	; 0x3e
 8002322:	2101      	movs	r1, #1
 8002324:	5499      	strb	r1, [r3, r2]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	223f      	movs	r2, #63	; 0x3f
 800232a:	2101      	movs	r1, #1
 800232c:	5499      	strb	r1, [r3, r2]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2240      	movs	r2, #64	; 0x40
 8002332:	2101      	movs	r1, #1
 8002334:	5499      	strb	r1, [r3, r2]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2241      	movs	r2, #65	; 0x41
 800233a:	2101      	movs	r1, #1
 800233c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2242      	movs	r2, #66	; 0x42
 8002342:	2101      	movs	r1, #1
 8002344:	5499      	strb	r1, [r3, r2]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2243      	movs	r2, #67	; 0x43
 800234a:	2101      	movs	r1, #1
 800234c:	5499      	strb	r1, [r3, r2]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2244      	movs	r2, #68	; 0x44
 8002352:	2101      	movs	r1, #1
 8002354:	5499      	strb	r1, [r3, r2]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2245      	movs	r2, #69	; 0x45
 800235a:	2101      	movs	r1, #1
 800235c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	223d      	movs	r2, #61	; 0x3d
 8002362:	2101      	movs	r1, #1
 8002364:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	0018      	movs	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	b002      	add	sp, #8
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	223d      	movs	r2, #61	; 0x3d
 800237c:	5c9b      	ldrb	r3, [r3, r2]
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b01      	cmp	r3, #1
 8002382:	d001      	beq.n	8002388 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e02d      	b.n	80023e4 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	223d      	movs	r2, #61	; 0x3d
 800238c:	2102      	movs	r1, #2
 800238e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a15      	ldr	r2, [pc, #84]	; (80023ec <HAL_TIM_Base_Start+0x7c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d009      	beq.n	80023ae <HAL_TIM_Base_Start+0x3e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a14      	ldr	r2, [pc, #80]	; (80023f0 <HAL_TIM_Base_Start+0x80>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d004      	beq.n	80023ae <HAL_TIM_Base_Start+0x3e>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <HAL_TIM_Base_Start+0x84>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d111      	bne.n	80023d2 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2207      	movs	r2, #7
 80023b6:	4013      	ands	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2b06      	cmp	r3, #6
 80023be:	d010      	beq.n	80023e2 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2101      	movs	r1, #1
 80023cc:	430a      	orrs	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023d0:	e007      	b.n	80023e2 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2101      	movs	r1, #1
 80023de:	430a      	orrs	r2, r1
 80023e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	0018      	movs	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b004      	add	sp, #16
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40012c00 	.word	0x40012c00
 80023f0:	40000400 	.word	0x40000400
 80023f4:	40014000 	.word	0x40014000

080023f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	223d      	movs	r2, #61	; 0x3d
 8002404:	5c9b      	ldrb	r3, [r3, r2]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b01      	cmp	r3, #1
 800240a:	d001      	beq.n	8002410 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e035      	b.n	800247c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	223d      	movs	r2, #61	; 0x3d
 8002414:	2102      	movs	r1, #2
 8002416:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2101      	movs	r1, #1
 8002424:	430a      	orrs	r2, r1
 8002426:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a15      	ldr	r2, [pc, #84]	; (8002484 <HAL_TIM_Base_Start_IT+0x8c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d009      	beq.n	8002446 <HAL_TIM_Base_Start_IT+0x4e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a14      	ldr	r2, [pc, #80]	; (8002488 <HAL_TIM_Base_Start_IT+0x90>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d004      	beq.n	8002446 <HAL_TIM_Base_Start_IT+0x4e>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a12      	ldr	r2, [pc, #72]	; (800248c <HAL_TIM_Base_Start_IT+0x94>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d111      	bne.n	800246a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2207      	movs	r2, #7
 800244e:	4013      	ands	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b06      	cmp	r3, #6
 8002456:	d010      	beq.n	800247a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2101      	movs	r1, #1
 8002464:	430a      	orrs	r2, r1
 8002466:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002468:	e007      	b.n	800247a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2101      	movs	r1, #1
 8002476:	430a      	orrs	r2, r1
 8002478:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	0018      	movs	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	b004      	add	sp, #16
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40012c00 	.word	0x40012c00
 8002488:	40000400 	.word	0x40000400
 800248c:	40014000 	.word	0x40014000

08002490 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800249a:	230f      	movs	r3, #15
 800249c:	18fb      	adds	r3, r7, r3
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	223c      	movs	r2, #60	; 0x3c
 80024a6:	5c9b      	ldrb	r3, [r3, r2]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d101      	bne.n	80024b0 <HAL_TIM_ConfigClockSource+0x20>
 80024ac:	2302      	movs	r3, #2
 80024ae:	e0bc      	b.n	800262a <HAL_TIM_ConfigClockSource+0x19a>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	223c      	movs	r2, #60	; 0x3c
 80024b4:	2101      	movs	r1, #1
 80024b6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	223d      	movs	r2, #61	; 0x3d
 80024bc:	2102      	movs	r1, #2
 80024be:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2277      	movs	r2, #119	; 0x77
 80024cc:	4393      	bics	r3, r2
 80024ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	4a58      	ldr	r2, [pc, #352]	; (8002634 <HAL_TIM_ConfigClockSource+0x1a4>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2280      	movs	r2, #128	; 0x80
 80024e6:	0192      	lsls	r2, r2, #6
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d040      	beq.n	800256e <HAL_TIM_ConfigClockSource+0xde>
 80024ec:	2280      	movs	r2, #128	; 0x80
 80024ee:	0192      	lsls	r2, r2, #6
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d900      	bls.n	80024f6 <HAL_TIM_ConfigClockSource+0x66>
 80024f4:	e088      	b.n	8002608 <HAL_TIM_ConfigClockSource+0x178>
 80024f6:	2280      	movs	r2, #128	; 0x80
 80024f8:	0152      	lsls	r2, r2, #5
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d100      	bne.n	8002500 <HAL_TIM_ConfigClockSource+0x70>
 80024fe:	e088      	b.n	8002612 <HAL_TIM_ConfigClockSource+0x182>
 8002500:	2280      	movs	r2, #128	; 0x80
 8002502:	0152      	lsls	r2, r2, #5
 8002504:	4293      	cmp	r3, r2
 8002506:	d900      	bls.n	800250a <HAL_TIM_ConfigClockSource+0x7a>
 8002508:	e07e      	b.n	8002608 <HAL_TIM_ConfigClockSource+0x178>
 800250a:	2b70      	cmp	r3, #112	; 0x70
 800250c:	d018      	beq.n	8002540 <HAL_TIM_ConfigClockSource+0xb0>
 800250e:	d900      	bls.n	8002512 <HAL_TIM_ConfigClockSource+0x82>
 8002510:	e07a      	b.n	8002608 <HAL_TIM_ConfigClockSource+0x178>
 8002512:	2b60      	cmp	r3, #96	; 0x60
 8002514:	d04f      	beq.n	80025b6 <HAL_TIM_ConfigClockSource+0x126>
 8002516:	d900      	bls.n	800251a <HAL_TIM_ConfigClockSource+0x8a>
 8002518:	e076      	b.n	8002608 <HAL_TIM_ConfigClockSource+0x178>
 800251a:	2b50      	cmp	r3, #80	; 0x50
 800251c:	d03b      	beq.n	8002596 <HAL_TIM_ConfigClockSource+0x106>
 800251e:	d900      	bls.n	8002522 <HAL_TIM_ConfigClockSource+0x92>
 8002520:	e072      	b.n	8002608 <HAL_TIM_ConfigClockSource+0x178>
 8002522:	2b40      	cmp	r3, #64	; 0x40
 8002524:	d057      	beq.n	80025d6 <HAL_TIM_ConfigClockSource+0x146>
 8002526:	d900      	bls.n	800252a <HAL_TIM_ConfigClockSource+0x9a>
 8002528:	e06e      	b.n	8002608 <HAL_TIM_ConfigClockSource+0x178>
 800252a:	2b30      	cmp	r3, #48	; 0x30
 800252c:	d063      	beq.n	80025f6 <HAL_TIM_ConfigClockSource+0x166>
 800252e:	d86b      	bhi.n	8002608 <HAL_TIM_ConfigClockSource+0x178>
 8002530:	2b20      	cmp	r3, #32
 8002532:	d060      	beq.n	80025f6 <HAL_TIM_ConfigClockSource+0x166>
 8002534:	d868      	bhi.n	8002608 <HAL_TIM_ConfigClockSource+0x178>
 8002536:	2b00      	cmp	r3, #0
 8002538:	d05d      	beq.n	80025f6 <HAL_TIM_ConfigClockSource+0x166>
 800253a:	2b10      	cmp	r3, #16
 800253c:	d05b      	beq.n	80025f6 <HAL_TIM_ConfigClockSource+0x166>
 800253e:	e063      	b.n	8002608 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	6899      	ldr	r1, [r3, #8]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f000 f962 	bl	8002818 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2277      	movs	r2, #119	; 0x77
 8002560:	4313      	orrs	r3, r2
 8002562:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68ba      	ldr	r2, [r7, #8]
 800256a:	609a      	str	r2, [r3, #8]
      break;
 800256c:	e052      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	6899      	ldr	r1, [r3, #8]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f000 f94b 	bl	8002818 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2180      	movs	r1, #128	; 0x80
 800258e:	01c9      	lsls	r1, r1, #7
 8002590:	430a      	orrs	r2, r1
 8002592:	609a      	str	r2, [r3, #8]
      break;
 8002594:	e03e      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6818      	ldr	r0, [r3, #0]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	6859      	ldr	r1, [r3, #4]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	001a      	movs	r2, r3
 80025a4:	f000 f8be 	bl	8002724 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2150      	movs	r1, #80	; 0x50
 80025ae:	0018      	movs	r0, r3
 80025b0:	f000 f918 	bl	80027e4 <TIM_ITRx_SetConfig>
      break;
 80025b4:	e02e      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6818      	ldr	r0, [r3, #0]
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	6859      	ldr	r1, [r3, #4]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	001a      	movs	r2, r3
 80025c4:	f000 f8dc 	bl	8002780 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2160      	movs	r1, #96	; 0x60
 80025ce:	0018      	movs	r0, r3
 80025d0:	f000 f908 	bl	80027e4 <TIM_ITRx_SetConfig>
      break;
 80025d4:	e01e      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	6859      	ldr	r1, [r3, #4]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	001a      	movs	r2, r3
 80025e4:	f000 f89e 	bl	8002724 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2140      	movs	r1, #64	; 0x40
 80025ee:	0018      	movs	r0, r3
 80025f0:	f000 f8f8 	bl	80027e4 <TIM_ITRx_SetConfig>
      break;
 80025f4:	e00e      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	0019      	movs	r1, r3
 8002600:	0010      	movs	r0, r2
 8002602:	f000 f8ef 	bl	80027e4 <TIM_ITRx_SetConfig>
      break;
 8002606:	e005      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002608:	230f      	movs	r3, #15
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
      break;
 8002610:	e000      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002612:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	223d      	movs	r2, #61	; 0x3d
 8002618:	2101      	movs	r1, #1
 800261a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	223c      	movs	r2, #60	; 0x3c
 8002620:	2100      	movs	r1, #0
 8002622:	5499      	strb	r1, [r3, r2]

  return status;
 8002624:	230f      	movs	r3, #15
 8002626:	18fb      	adds	r3, r7, r3
 8002628:	781b      	ldrb	r3, [r3, #0]
}
 800262a:	0018      	movs	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	b004      	add	sp, #16
 8002630:	bd80      	pop	{r7, pc}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	ffff00ff 	.word	0xffff00ff

08002638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a2f      	ldr	r2, [pc, #188]	; (8002708 <TIM_Base_SetConfig+0xd0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d003      	beq.n	8002658 <TIM_Base_SetConfig+0x20>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a2e      	ldr	r2, [pc, #184]	; (800270c <TIM_Base_SetConfig+0xd4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d108      	bne.n	800266a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2270      	movs	r2, #112	; 0x70
 800265c:	4393      	bics	r3, r2
 800265e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a26      	ldr	r2, [pc, #152]	; (8002708 <TIM_Base_SetConfig+0xd0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d013      	beq.n	800269a <TIM_Base_SetConfig+0x62>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a25      	ldr	r2, [pc, #148]	; (800270c <TIM_Base_SetConfig+0xd4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00f      	beq.n	800269a <TIM_Base_SetConfig+0x62>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a24      	ldr	r2, [pc, #144]	; (8002710 <TIM_Base_SetConfig+0xd8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00b      	beq.n	800269a <TIM_Base_SetConfig+0x62>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a23      	ldr	r2, [pc, #140]	; (8002714 <TIM_Base_SetConfig+0xdc>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d007      	beq.n	800269a <TIM_Base_SetConfig+0x62>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a22      	ldr	r2, [pc, #136]	; (8002718 <TIM_Base_SetConfig+0xe0>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d003      	beq.n	800269a <TIM_Base_SetConfig+0x62>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a21      	ldr	r2, [pc, #132]	; (800271c <TIM_Base_SetConfig+0xe4>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d108      	bne.n	80026ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4a20      	ldr	r2, [pc, #128]	; (8002720 <TIM_Base_SetConfig+0xe8>)
 800269e:	4013      	ands	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2280      	movs	r2, #128	; 0x80
 80026b0:	4393      	bics	r3, r2
 80026b2:	001a      	movs	r2, r3
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a0c      	ldr	r2, [pc, #48]	; (8002708 <TIM_Base_SetConfig+0xd0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d00b      	beq.n	80026f2 <TIM_Base_SetConfig+0xba>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a0d      	ldr	r2, [pc, #52]	; (8002714 <TIM_Base_SetConfig+0xdc>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d007      	beq.n	80026f2 <TIM_Base_SetConfig+0xba>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a0c      	ldr	r2, [pc, #48]	; (8002718 <TIM_Base_SetConfig+0xe0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d003      	beq.n	80026f2 <TIM_Base_SetConfig+0xba>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a0b      	ldr	r2, [pc, #44]	; (800271c <TIM_Base_SetConfig+0xe4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d103      	bne.n	80026fa <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	615a      	str	r2, [r3, #20]
}
 8002700:	46c0      	nop			; (mov r8, r8)
 8002702:	46bd      	mov	sp, r7
 8002704:	b004      	add	sp, #16
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40012c00 	.word	0x40012c00
 800270c:	40000400 	.word	0x40000400
 8002710:	40002000 	.word	0x40002000
 8002714:	40014000 	.word	0x40014000
 8002718:	40014400 	.word	0x40014400
 800271c:	40014800 	.word	0x40014800
 8002720:	fffffcff 	.word	0xfffffcff

08002724 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	2201      	movs	r2, #1
 800273c:	4393      	bics	r3, r2
 800273e:	001a      	movs	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	22f0      	movs	r2, #240	; 0xf0
 800274e:	4393      	bics	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	220a      	movs	r2, #10
 8002760:	4393      	bics	r3, r2
 8002762:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	4313      	orrs	r3, r2
 800276a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	621a      	str	r2, [r3, #32]
}
 8002778:	46c0      	nop			; (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	b006      	add	sp, #24
 800277e:	bd80      	pop	{r7, pc}

08002780 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	2210      	movs	r2, #16
 8002792:	4393      	bics	r3, r2
 8002794:	001a      	movs	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	4a0d      	ldr	r2, [pc, #52]	; (80027e0 <TIM_TI2_ConfigInputStage+0x60>)
 80027aa:	4013      	ands	r3, r2
 80027ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	031b      	lsls	r3, r3, #12
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	22a0      	movs	r2, #160	; 0xa0
 80027bc:	4393      	bics	r3, r2
 80027be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	621a      	str	r2, [r3, #32]
}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	46bd      	mov	sp, r7
 80027da:	b006      	add	sp, #24
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	ffff0fff 	.word	0xffff0fff

080027e4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2270      	movs	r2, #112	; 0x70
 80027f8:	4393      	bics	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	4313      	orrs	r3, r2
 8002802:	2207      	movs	r2, #7
 8002804:	4313      	orrs	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	609a      	str	r2, [r3, #8]
}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	46bd      	mov	sp, r7
 8002812:	b004      	add	sp, #16
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	4a09      	ldr	r2, [pc, #36]	; (8002854 <TIM_ETR_SetConfig+0x3c>)
 8002830:	4013      	ands	r3, r2
 8002832:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	021a      	lsls	r2, r3, #8
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	431a      	orrs	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4313      	orrs	r3, r2
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	4313      	orrs	r3, r2
 8002844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	609a      	str	r2, [r3, #8]
}
 800284c:	46c0      	nop			; (mov r8, r8)
 800284e:	46bd      	mov	sp, r7
 8002850:	b006      	add	sp, #24
 8002852:	bd80      	pop	{r7, pc}
 8002854:	ffff00ff 	.word	0xffff00ff

08002858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	223c      	movs	r2, #60	; 0x3c
 8002866:	5c9b      	ldrb	r3, [r3, r2]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800286c:	2302      	movs	r3, #2
 800286e:	e041      	b.n	80028f4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	223c      	movs	r2, #60	; 0x3c
 8002874:	2101      	movs	r1, #1
 8002876:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	223d      	movs	r2, #61	; 0x3d
 800287c:	2102      	movs	r1, #2
 800287e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2270      	movs	r2, #112	; 0x70
 8002894:	4393      	bics	r3, r2
 8002896:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a13      	ldr	r2, [pc, #76]	; (80028fc <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d009      	beq.n	80028c8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a11      	ldr	r2, [pc, #68]	; (8002900 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d004      	beq.n	80028c8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a10      	ldr	r2, [pc, #64]	; (8002904 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d10c      	bne.n	80028e2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2280      	movs	r2, #128	; 0x80
 80028cc:	4393      	bics	r3, r2
 80028ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	68ba      	ldr	r2, [r7, #8]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	223d      	movs	r2, #61	; 0x3d
 80028e6:	2101      	movs	r1, #1
 80028e8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	223c      	movs	r2, #60	; 0x3c
 80028ee:	2100      	movs	r1, #0
 80028f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	0018      	movs	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	b004      	add	sp, #16
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40012c00 	.word	0x40012c00
 8002900:	40000400 	.word	0x40000400
 8002904:	40014000 	.word	0x40014000

08002908 <__libc_init_array>:
 8002908:	b570      	push	{r4, r5, r6, lr}
 800290a:	2600      	movs	r6, #0
 800290c:	4d0c      	ldr	r5, [pc, #48]	; (8002940 <__libc_init_array+0x38>)
 800290e:	4c0d      	ldr	r4, [pc, #52]	; (8002944 <__libc_init_array+0x3c>)
 8002910:	1b64      	subs	r4, r4, r5
 8002912:	10a4      	asrs	r4, r4, #2
 8002914:	42a6      	cmp	r6, r4
 8002916:	d109      	bne.n	800292c <__libc_init_array+0x24>
 8002918:	2600      	movs	r6, #0
 800291a:	f000 f821 	bl	8002960 <_init>
 800291e:	4d0a      	ldr	r5, [pc, #40]	; (8002948 <__libc_init_array+0x40>)
 8002920:	4c0a      	ldr	r4, [pc, #40]	; (800294c <__libc_init_array+0x44>)
 8002922:	1b64      	subs	r4, r4, r5
 8002924:	10a4      	asrs	r4, r4, #2
 8002926:	42a6      	cmp	r6, r4
 8002928:	d105      	bne.n	8002936 <__libc_init_array+0x2e>
 800292a:	bd70      	pop	{r4, r5, r6, pc}
 800292c:	00b3      	lsls	r3, r6, #2
 800292e:	58eb      	ldr	r3, [r5, r3]
 8002930:	4798      	blx	r3
 8002932:	3601      	adds	r6, #1
 8002934:	e7ee      	b.n	8002914 <__libc_init_array+0xc>
 8002936:	00b3      	lsls	r3, r6, #2
 8002938:	58eb      	ldr	r3, [r5, r3]
 800293a:	4798      	blx	r3
 800293c:	3601      	adds	r6, #1
 800293e:	e7f2      	b.n	8002926 <__libc_init_array+0x1e>
 8002940:	080029e8 	.word	0x080029e8
 8002944:	080029e8 	.word	0x080029e8
 8002948:	080029e8 	.word	0x080029e8
 800294c:	080029ec 	.word	0x080029ec

08002950 <memset>:
 8002950:	0003      	movs	r3, r0
 8002952:	1882      	adds	r2, r0, r2
 8002954:	4293      	cmp	r3, r2
 8002956:	d100      	bne.n	800295a <memset+0xa>
 8002958:	4770      	bx	lr
 800295a:	7019      	strb	r1, [r3, #0]
 800295c:	3301      	adds	r3, #1
 800295e:	e7f9      	b.n	8002954 <memset+0x4>

08002960 <_init>:
 8002960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002966:	bc08      	pop	{r3}
 8002968:	469e      	mov	lr, r3
 800296a:	4770      	bx	lr

0800296c <_fini>:
 800296c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002972:	bc08      	pop	{r3}
 8002974:	469e      	mov	lr, r3
 8002976:	4770      	bx	lr
