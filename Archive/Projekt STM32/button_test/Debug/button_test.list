
button_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d2c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001dec  08001dec  00011dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e1c  08001e1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e1c  08001e1c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e1c  08001e1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e1c  08001e1c  00011e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e20  08001e20  00011e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08001e30  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001e30  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c13  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014c5  00000000  00000000  00027c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  00029110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000808  00000000  00000000  000299c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ed7f  00000000  00000000  0002a1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096ee  00000000  00000000  00038f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ce46  00000000  00000000  00042635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009f47b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ef4  00000000  00000000  0009f4cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001dd4 	.word	0x08001dd4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001dd4 	.word	0x08001dd4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 f9dc 	bl	80005e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f832 	bl	8000290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8d0 	bl	80003d0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000230:	f000 f878 	bl	8000324 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3); // включаем прерывание
 8000234:	4b13      	ldr	r3, [pc, #76]	; (8000284 <main+0x64>)
 8000236:	0018      	movs	r0, r3
 8000238:	f001 f9d2 	bl	80015e0 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (!HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin)){
 800023c:	2380      	movs	r3, #128	; 0x80
 800023e:	019b      	lsls	r3, r3, #6
 8000240:	4a11      	ldr	r2, [pc, #68]	; (8000288 <main+0x68>)
 8000242:	0019      	movs	r1, r3
 8000244:	0010      	movs	r0, r2
 8000246:	f000 fc7d 	bl	8000b44 <HAL_GPIO_ReadPin>
 800024a:	1e03      	subs	r3, r0, #0
 800024c:	d10d      	bne.n	800026a <main+0x4a>
		  if(kol == 0)
 800024e:	4b0f      	ldr	r3, [pc, #60]	; (800028c <main+0x6c>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d104      	bne.n	8000260 <main+0x40>
		  {
			  HAL_TIM_Base_Start(&htim3);
 8000256:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <main+0x64>)
 8000258:	0018      	movs	r0, r3
 800025a:	f001 f957 	bl	800150c <HAL_TIM_Base_Start>
 800025e:	e7ed      	b.n	800023c <main+0x1c>
		  }
		  else
		  {
			  HAL_TIM_Base_Stop(&htim3);
 8000260:	4b08      	ldr	r3, [pc, #32]	; (8000284 <main+0x64>)
 8000262:	0018      	movs	r0, r3
 8000264:	f001 f996 	bl	8001594 <HAL_TIM_Base_Stop>
 8000268:	e7e8      	b.n	800023c <main+0x1c>
		  }
	  }
	  else
	  {
		  HAL_TIM_Base_Stop(&htim3);
 800026a:	4b06      	ldr	r3, [pc, #24]	; (8000284 <main+0x64>)
 800026c:	0018      	movs	r0, r3
 800026e:	f001 f991 	bl	8001594 <HAL_TIM_Base_Stop>
		  __HAL_TIM_SET_COUNTER(&htim3, 0x0000);
 8000272:	4b04      	ldr	r3, [pc, #16]	; (8000284 <main+0x64>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2200      	movs	r2, #0
 8000278:	625a      	str	r2, [r3, #36]	; 0x24
		  kol = 0;
 800027a:	4b04      	ldr	r3, [pc, #16]	; (800028c <main+0x6c>)
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
	  if (!HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin)){
 8000280:	e7dc      	b.n	800023c <main+0x1c>
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	20000028 	.word	0x20000028
 8000288:	48000800 	.word	0x48000800
 800028c:	20000070 	.word	0x20000070

08000290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b091      	sub	sp, #68	; 0x44
 8000294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000296:	2410      	movs	r4, #16
 8000298:	193b      	adds	r3, r7, r4
 800029a:	0018      	movs	r0, r3
 800029c:	2330      	movs	r3, #48	; 0x30
 800029e:	001a      	movs	r2, r3
 80002a0:	2100      	movs	r1, #0
 80002a2:	f001 fd8f 	bl	8001dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a6:	003b      	movs	r3, r7
 80002a8:	0018      	movs	r0, r3
 80002aa:	2310      	movs	r3, #16
 80002ac:	001a      	movs	r2, r3
 80002ae:	2100      	movs	r1, #0
 80002b0:	f001 fd88 	bl	8001dc4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b4:	0021      	movs	r1, r4
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2202      	movs	r2, #2
 80002ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2201      	movs	r2, #1
 80002c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2210      	movs	r2, #16
 80002c6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2202      	movs	r2, #2
 80002cc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2200      	movs	r2, #0
 80002d2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2280      	movs	r2, #128	; 0x80
 80002d8:	0312      	lsls	r2, r2, #12
 80002da:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2200      	movs	r2, #0
 80002e0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	0018      	movs	r0, r3
 80002e6:	f000 fc83 	bl	8000bf0 <HAL_RCC_OscConfig>
 80002ea:	1e03      	subs	r3, r0, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80002ee:	f000 f8d3 	bl	8000498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f2:	003b      	movs	r3, r7
 80002f4:	2207      	movs	r2, #7
 80002f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f8:	003b      	movs	r3, r7
 80002fa:	2202      	movs	r2, #2
 80002fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fe:	003b      	movs	r3, r7
 8000300:	2200      	movs	r2, #0
 8000302:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000304:	003b      	movs	r3, r7
 8000306:	2200      	movs	r2, #0
 8000308:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800030a:	003b      	movs	r3, r7
 800030c:	2100      	movs	r1, #0
 800030e:	0018      	movs	r0, r3
 8000310:	f000 ff88 	bl	8001224 <HAL_RCC_ClockConfig>
 8000314:	1e03      	subs	r3, r0, #0
 8000316:	d001      	beq.n	800031c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000318:	f000 f8be 	bl	8000498 <Error_Handler>
  }
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	b011      	add	sp, #68	; 0x44
 8000322:	bd90      	pop	{r4, r7, pc}

08000324 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b086      	sub	sp, #24
 8000328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800032a:	2308      	movs	r3, #8
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	0018      	movs	r0, r3
 8000330:	2310      	movs	r3, #16
 8000332:	001a      	movs	r2, r3
 8000334:	2100      	movs	r1, #0
 8000336:	f001 fd45 	bl	8001dc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800033a:	003b      	movs	r3, r7
 800033c:	0018      	movs	r0, r3
 800033e:	2308      	movs	r3, #8
 8000340:	001a      	movs	r2, r3
 8000342:	2100      	movs	r1, #0
 8000344:	f001 fd3e 	bl	8001dc4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000348:	4b1e      	ldr	r3, [pc, #120]	; (80003c4 <MX_TIM3_Init+0xa0>)
 800034a:	4a1f      	ldr	r2, [pc, #124]	; (80003c8 <MX_TIM3_Init+0xa4>)
 800034c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15999;
 800034e:	4b1d      	ldr	r3, [pc, #116]	; (80003c4 <MX_TIM3_Init+0xa0>)
 8000350:	4a1e      	ldr	r2, [pc, #120]	; (80003cc <MX_TIM3_Init+0xa8>)
 8000352:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000354:	4b1b      	ldr	r3, [pc, #108]	; (80003c4 <MX_TIM3_Init+0xa0>)
 8000356:	2200      	movs	r2, #0
 8000358:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000;
 800035a:	4b1a      	ldr	r3, [pc, #104]	; (80003c4 <MX_TIM3_Init+0xa0>)
 800035c:	22fa      	movs	r2, #250	; 0xfa
 800035e:	00d2      	lsls	r2, r2, #3
 8000360:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000362:	4b18      	ldr	r3, [pc, #96]	; (80003c4 <MX_TIM3_Init+0xa0>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000368:	4b16      	ldr	r3, [pc, #88]	; (80003c4 <MX_TIM3_Init+0xa0>)
 800036a:	2200      	movs	r2, #0
 800036c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800036e:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <MX_TIM3_Init+0xa0>)
 8000370:	0018      	movs	r0, r3
 8000372:	f001 f87b 	bl	800146c <HAL_TIM_Base_Init>
 8000376:	1e03      	subs	r3, r0, #0
 8000378:	d001      	beq.n	800037e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800037a:	f000 f88d 	bl	8000498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800037e:	2108      	movs	r1, #8
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2280      	movs	r2, #128	; 0x80
 8000384:	0152      	lsls	r2, r2, #5
 8000386:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000388:	187a      	adds	r2, r7, r1
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <MX_TIM3_Init+0xa0>)
 800038c:	0011      	movs	r1, r2
 800038e:	0018      	movs	r0, r3
 8000390:	f001 fa88 	bl	80018a4 <HAL_TIM_ConfigClockSource>
 8000394:	1e03      	subs	r3, r0, #0
 8000396:	d001      	beq.n	800039c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000398:	f000 f87e 	bl	8000498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800039c:	003b      	movs	r3, r7
 800039e:	2200      	movs	r2, #0
 80003a0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003a2:	003b      	movs	r3, r7
 80003a4:	2200      	movs	r2, #0
 80003a6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003a8:	003a      	movs	r2, r7
 80003aa:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <MX_TIM3_Init+0xa0>)
 80003ac:	0011      	movs	r1, r2
 80003ae:	0018      	movs	r0, r3
 80003b0:	f001 fc7c 	bl	8001cac <HAL_TIMEx_MasterConfigSynchronization>
 80003b4:	1e03      	subs	r3, r0, #0
 80003b6:	d001      	beq.n	80003bc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80003b8:	f000 f86e 	bl	8000498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80003bc:	46c0      	nop			; (mov r8, r8)
 80003be:	46bd      	mov	sp, r7
 80003c0:	b006      	add	sp, #24
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000028 	.word	0x20000028
 80003c8:	40000400 	.word	0x40000400
 80003cc:	00003e7f 	.word	0x00003e7f

080003d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	0018      	movs	r0, r3
 80003da:	2314      	movs	r3, #20
 80003dc:	001a      	movs	r2, r3
 80003de:	2100      	movs	r1, #0
 80003e0:	f001 fcf0 	bl	8001dc4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e4:	4b1c      	ldr	r3, [pc, #112]	; (8000458 <MX_GPIO_Init+0x88>)
 80003e6:	695a      	ldr	r2, [r3, #20]
 80003e8:	4b1b      	ldr	r3, [pc, #108]	; (8000458 <MX_GPIO_Init+0x88>)
 80003ea:	2180      	movs	r1, #128	; 0x80
 80003ec:	0309      	lsls	r1, r1, #12
 80003ee:	430a      	orrs	r2, r1
 80003f0:	615a      	str	r2, [r3, #20]
 80003f2:	4b19      	ldr	r3, [pc, #100]	; (8000458 <MX_GPIO_Init+0x88>)
 80003f4:	695a      	ldr	r2, [r3, #20]
 80003f6:	2380      	movs	r3, #128	; 0x80
 80003f8:	031b      	lsls	r3, r3, #12
 80003fa:	4013      	ands	r3, r2
 80003fc:	603b      	str	r3, [r7, #0]
 80003fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000400:	4b16      	ldr	r3, [pc, #88]	; (800045c <MX_GPIO_Init+0x8c>)
 8000402:	2201      	movs	r2, #1
 8000404:	2180      	movs	r1, #128	; 0x80
 8000406:	0018      	movs	r0, r3
 8000408:	f000 fbb9 	bl	8000b7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2280      	movs	r2, #128	; 0x80
 8000410:	0192      	lsls	r2, r2, #6
 8000412:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000414:	1d3b      	adds	r3, r7, #4
 8000416:	2200      	movs	r2, #0
 8000418:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	4a0e      	ldr	r2, [pc, #56]	; (800045c <MX_GPIO_Init+0x8c>)
 8000424:	0019      	movs	r1, r3
 8000426:	0010      	movs	r0, r2
 8000428:	f000 fa1c 	bl	8000864 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800042c:	1d3b      	adds	r3, r7, #4
 800042e:	2280      	movs	r2, #128	; 0x80
 8000430:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	2201      	movs	r2, #1
 8000436:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2200      	movs	r2, #0
 8000442:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	4a05      	ldr	r2, [pc, #20]	; (800045c <MX_GPIO_Init+0x8c>)
 8000448:	0019      	movs	r1, r3
 800044a:	0010      	movs	r0, r2
 800044c:	f000 fa0a 	bl	8000864 <HAL_GPIO_Init>

}
 8000450:	46c0      	nop			; (mov r8, r8)
 8000452:	46bd      	mov	sp, r7
 8000454:	b006      	add	sp, #24
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40021000 	.word	0x40021000
 800045c:	48000800 	.word	0x48000800

08000460 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
	  	if (htim->Instance == TIM3)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a07      	ldr	r2, [pc, #28]	; (800048c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d107      	bne.n	8000482 <HAL_TIM_PeriodElapsedCallback+0x22>
	  	{
	  		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000472:	4b07      	ldr	r3, [pc, #28]	; (8000490 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000474:	2180      	movs	r1, #128	; 0x80
 8000476:	0018      	movs	r0, r3
 8000478:	f000 fb9e 	bl	8000bb8 <HAL_GPIO_TogglePin>
	  		kol = 1;
 800047c:	4b05      	ldr	r3, [pc, #20]	; (8000494 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800047e:	2201      	movs	r2, #1
 8000480:	601a      	str	r2, [r3, #0]
	  	}
}
 8000482:	46c0      	nop			; (mov r8, r8)
 8000484:	46bd      	mov	sp, r7
 8000486:	b002      	add	sp, #8
 8000488:	bd80      	pop	{r7, pc}
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	40000400 	.word	0x40000400
 8000490:	48000800 	.word	0x48000800
 8000494:	20000070 	.word	0x20000070

08000498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800049c:	b672      	cpsid	i
}
 800049e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <Error_Handler+0x8>
	...

080004a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004aa:	4b0f      	ldr	r3, [pc, #60]	; (80004e8 <HAL_MspInit+0x44>)
 80004ac:	699a      	ldr	r2, [r3, #24]
 80004ae:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <HAL_MspInit+0x44>)
 80004b0:	2101      	movs	r1, #1
 80004b2:	430a      	orrs	r2, r1
 80004b4:	619a      	str	r2, [r3, #24]
 80004b6:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <HAL_MspInit+0x44>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	2201      	movs	r2, #1
 80004bc:	4013      	ands	r3, r2
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c2:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <HAL_MspInit+0x44>)
 80004c4:	69da      	ldr	r2, [r3, #28]
 80004c6:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <HAL_MspInit+0x44>)
 80004c8:	2180      	movs	r1, #128	; 0x80
 80004ca:	0549      	lsls	r1, r1, #21
 80004cc:	430a      	orrs	r2, r1
 80004ce:	61da      	str	r2, [r3, #28]
 80004d0:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <HAL_MspInit+0x44>)
 80004d2:	69da      	ldr	r2, [r3, #28]
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	055b      	lsls	r3, r3, #21
 80004d8:	4013      	ands	r3, r2
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	b002      	add	sp, #8
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	40021000 	.word	0x40021000

080004ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0d      	ldr	r2, [pc, #52]	; (8000530 <HAL_TIM_Base_MspInit+0x44>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d113      	bne.n	8000526 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80004fe:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <HAL_TIM_Base_MspInit+0x48>)
 8000500:	69da      	ldr	r2, [r3, #28]
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <HAL_TIM_Base_MspInit+0x48>)
 8000504:	2102      	movs	r1, #2
 8000506:	430a      	orrs	r2, r1
 8000508:	61da      	str	r2, [r3, #28]
 800050a:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <HAL_TIM_Base_MspInit+0x48>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	2202      	movs	r2, #2
 8000510:	4013      	ands	r3, r2
 8000512:	60fb      	str	r3, [r7, #12]
 8000514:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	2100      	movs	r1, #0
 800051a:	2010      	movs	r0, #16
 800051c:	f000 f970 	bl	8000800 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000520:	2010      	movs	r0, #16
 8000522:	f000 f982 	bl	800082a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	46bd      	mov	sp, r7
 800052a:	b004      	add	sp, #16
 800052c:	bd80      	pop	{r7, pc}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	40000400 	.word	0x40000400
 8000534:	40021000 	.word	0x40021000

08000538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800053c:	e7fe      	b.n	800053c <NMI_Handler+0x4>

0800053e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000542:	e7fe      	b.n	8000542 <HardFault_Handler+0x4>

08000544 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000548:	46c0      	nop			; (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055c:	f000 f888 	bl	8000670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000560:	46c0      	nop			; (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800056c:	4b03      	ldr	r3, [pc, #12]	; (800057c <TIM3_IRQHandler+0x14>)
 800056e:	0018      	movs	r0, r3
 8000570:	f001 f882 	bl	8001678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000574:	46c0      	nop			; (mov r8, r8)
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	20000028 	.word	0x20000028

08000580 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800058c:	480d      	ldr	r0, [pc, #52]	; (80005c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800058e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000590:	f7ff fff6 	bl	8000580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000594:	480c      	ldr	r0, [pc, #48]	; (80005c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000596:	490d      	ldr	r1, [pc, #52]	; (80005cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <LoopForever+0xe>)
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800059c:	e002      	b.n	80005a4 <LoopCopyDataInit>

0800059e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005a2:	3304      	adds	r3, #4

080005a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a8:	d3f9      	bcc.n	800059e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005aa:	4a0a      	ldr	r2, [pc, #40]	; (80005d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005ac:	4c0a      	ldr	r4, [pc, #40]	; (80005d8 <LoopForever+0x16>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005b0:	e001      	b.n	80005b6 <LoopFillZerobss>

080005b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b4:	3204      	adds	r2, #4

080005b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b8:	d3fb      	bcc.n	80005b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ba:	f001 fbdf 	bl	8001d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005be:	f7ff fe2f 	bl	8000220 <main>

080005c2 <LoopForever>:

LoopForever:
    b LoopForever
 80005c2:	e7fe      	b.n	80005c2 <LoopForever>
  ldr   r0, =_estack
 80005c4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80005c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005d0:	08001e24 	.word	0x08001e24
  ldr r2, =_sbss
 80005d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005d8:	20000078 	.word	0x20000078

080005dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005dc:	e7fe      	b.n	80005dc <ADC1_IRQHandler>
	...

080005e0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <HAL_Init+0x24>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <HAL_Init+0x24>)
 80005ea:	2110      	movs	r1, #16
 80005ec:	430a      	orrs	r2, r1
 80005ee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80005f0:	2003      	movs	r0, #3
 80005f2:	f000 f809 	bl	8000608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f6:	f7ff ff55 	bl	80004a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005fa:	2300      	movs	r3, #0
}
 80005fc:	0018      	movs	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	40022000 	.word	0x40022000

08000608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <HAL_InitTick+0x5c>)
 8000612:	681c      	ldr	r4, [r3, #0]
 8000614:	4b14      	ldr	r3, [pc, #80]	; (8000668 <HAL_InitTick+0x60>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	0019      	movs	r1, r3
 800061a:	23fa      	movs	r3, #250	; 0xfa
 800061c:	0098      	lsls	r0, r3, #2
 800061e:	f7ff fd73 	bl	8000108 <__udivsi3>
 8000622:	0003      	movs	r3, r0
 8000624:	0019      	movs	r1, r3
 8000626:	0020      	movs	r0, r4
 8000628:	f7ff fd6e 	bl	8000108 <__udivsi3>
 800062c:	0003      	movs	r3, r0
 800062e:	0018      	movs	r0, r3
 8000630:	f000 f90b 	bl	800084a <HAL_SYSTICK_Config>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000638:	2301      	movs	r3, #1
 800063a:	e00f      	b.n	800065c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2b03      	cmp	r3, #3
 8000640:	d80b      	bhi.n	800065a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	2301      	movs	r3, #1
 8000646:	425b      	negs	r3, r3
 8000648:	2200      	movs	r2, #0
 800064a:	0018      	movs	r0, r3
 800064c:	f000 f8d8 	bl	8000800 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000650:	4b06      	ldr	r3, [pc, #24]	; (800066c <HAL_InitTick+0x64>)
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000656:	2300      	movs	r3, #0
 8000658:	e000      	b.n	800065c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800065a:	2301      	movs	r3, #1
}
 800065c:	0018      	movs	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	b003      	add	sp, #12
 8000662:	bd90      	pop	{r4, r7, pc}
 8000664:	20000000 	.word	0x20000000
 8000668:	20000008 	.word	0x20000008
 800066c:	20000004 	.word	0x20000004

08000670 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <HAL_IncTick+0x1c>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	001a      	movs	r2, r3
 800067a:	4b05      	ldr	r3, [pc, #20]	; (8000690 <HAL_IncTick+0x20>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	18d2      	adds	r2, r2, r3
 8000680:	4b03      	ldr	r3, [pc, #12]	; (8000690 <HAL_IncTick+0x20>)
 8000682:	601a      	str	r2, [r3, #0]
}
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	20000008 	.word	0x20000008
 8000690:	20000074 	.word	0x20000074

08000694 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  return uwTick;
 8000698:	4b02      	ldr	r3, [pc, #8]	; (80006a4 <HAL_GetTick+0x10>)
 800069a:	681b      	ldr	r3, [r3, #0]
}
 800069c:	0018      	movs	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	20000074 	.word	0x20000074

080006a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	0002      	movs	r2, r0
 80006b0:	1dfb      	adds	r3, r7, #7
 80006b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006b4:	1dfb      	adds	r3, r7, #7
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b7f      	cmp	r3, #127	; 0x7f
 80006ba:	d809      	bhi.n	80006d0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006bc:	1dfb      	adds	r3, r7, #7
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	001a      	movs	r2, r3
 80006c2:	231f      	movs	r3, #31
 80006c4:	401a      	ands	r2, r3
 80006c6:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <__NVIC_EnableIRQ+0x30>)
 80006c8:	2101      	movs	r1, #1
 80006ca:	4091      	lsls	r1, r2
 80006cc:	000a      	movs	r2, r1
 80006ce:	601a      	str	r2, [r3, #0]
  }
}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b002      	add	sp, #8
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	e000e100 	.word	0xe000e100

080006dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	0002      	movs	r2, r0
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	1dfb      	adds	r3, r7, #7
 80006e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006ea:	1dfb      	adds	r3, r7, #7
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b7f      	cmp	r3, #127	; 0x7f
 80006f0:	d828      	bhi.n	8000744 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006f2:	4a2f      	ldr	r2, [pc, #188]	; (80007b0 <__NVIC_SetPriority+0xd4>)
 80006f4:	1dfb      	adds	r3, r7, #7
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b25b      	sxtb	r3, r3
 80006fa:	089b      	lsrs	r3, r3, #2
 80006fc:	33c0      	adds	r3, #192	; 0xc0
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	589b      	ldr	r3, [r3, r2]
 8000702:	1dfa      	adds	r2, r7, #7
 8000704:	7812      	ldrb	r2, [r2, #0]
 8000706:	0011      	movs	r1, r2
 8000708:	2203      	movs	r2, #3
 800070a:	400a      	ands	r2, r1
 800070c:	00d2      	lsls	r2, r2, #3
 800070e:	21ff      	movs	r1, #255	; 0xff
 8000710:	4091      	lsls	r1, r2
 8000712:	000a      	movs	r2, r1
 8000714:	43d2      	mvns	r2, r2
 8000716:	401a      	ands	r2, r3
 8000718:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	019b      	lsls	r3, r3, #6
 800071e:	22ff      	movs	r2, #255	; 0xff
 8000720:	401a      	ands	r2, r3
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	0018      	movs	r0, r3
 8000728:	2303      	movs	r3, #3
 800072a:	4003      	ands	r3, r0
 800072c:	00db      	lsls	r3, r3, #3
 800072e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000730:	481f      	ldr	r0, [pc, #124]	; (80007b0 <__NVIC_SetPriority+0xd4>)
 8000732:	1dfb      	adds	r3, r7, #7
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	b25b      	sxtb	r3, r3
 8000738:	089b      	lsrs	r3, r3, #2
 800073a:	430a      	orrs	r2, r1
 800073c:	33c0      	adds	r3, #192	; 0xc0
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000742:	e031      	b.n	80007a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000744:	4a1b      	ldr	r2, [pc, #108]	; (80007b4 <__NVIC_SetPriority+0xd8>)
 8000746:	1dfb      	adds	r3, r7, #7
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	0019      	movs	r1, r3
 800074c:	230f      	movs	r3, #15
 800074e:	400b      	ands	r3, r1
 8000750:	3b08      	subs	r3, #8
 8000752:	089b      	lsrs	r3, r3, #2
 8000754:	3306      	adds	r3, #6
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	18d3      	adds	r3, r2, r3
 800075a:	3304      	adds	r3, #4
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	1dfa      	adds	r2, r7, #7
 8000760:	7812      	ldrb	r2, [r2, #0]
 8000762:	0011      	movs	r1, r2
 8000764:	2203      	movs	r2, #3
 8000766:	400a      	ands	r2, r1
 8000768:	00d2      	lsls	r2, r2, #3
 800076a:	21ff      	movs	r1, #255	; 0xff
 800076c:	4091      	lsls	r1, r2
 800076e:	000a      	movs	r2, r1
 8000770:	43d2      	mvns	r2, r2
 8000772:	401a      	ands	r2, r3
 8000774:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	019b      	lsls	r3, r3, #6
 800077a:	22ff      	movs	r2, #255	; 0xff
 800077c:	401a      	ands	r2, r3
 800077e:	1dfb      	adds	r3, r7, #7
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	0018      	movs	r0, r3
 8000784:	2303      	movs	r3, #3
 8000786:	4003      	ands	r3, r0
 8000788:	00db      	lsls	r3, r3, #3
 800078a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800078c:	4809      	ldr	r0, [pc, #36]	; (80007b4 <__NVIC_SetPriority+0xd8>)
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	001c      	movs	r4, r3
 8000794:	230f      	movs	r3, #15
 8000796:	4023      	ands	r3, r4
 8000798:	3b08      	subs	r3, #8
 800079a:	089b      	lsrs	r3, r3, #2
 800079c:	430a      	orrs	r2, r1
 800079e:	3306      	adds	r3, #6
 80007a0:	009b      	lsls	r3, r3, #2
 80007a2:	18c3      	adds	r3, r0, r3
 80007a4:	3304      	adds	r3, #4
 80007a6:	601a      	str	r2, [r3, #0]
}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b003      	add	sp, #12
 80007ae:	bd90      	pop	{r4, r7, pc}
 80007b0:	e000e100 	.word	0xe000e100
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	1e5a      	subs	r2, r3, #1
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	045b      	lsls	r3, r3, #17
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d301      	bcc.n	80007d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007cc:	2301      	movs	r3, #1
 80007ce:	e010      	b.n	80007f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <SysTick_Config+0x44>)
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	3a01      	subs	r2, #1
 80007d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007d8:	2301      	movs	r3, #1
 80007da:	425b      	negs	r3, r3
 80007dc:	2103      	movs	r1, #3
 80007de:	0018      	movs	r0, r3
 80007e0:	f7ff ff7c 	bl	80006dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <SysTick_Config+0x44>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ea:	4b04      	ldr	r3, [pc, #16]	; (80007fc <SysTick_Config+0x44>)
 80007ec:	2207      	movs	r2, #7
 80007ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f0:	2300      	movs	r3, #0
}
 80007f2:	0018      	movs	r0, r3
 80007f4:	46bd      	mov	sp, r7
 80007f6:	b002      	add	sp, #8
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	e000e010 	.word	0xe000e010

08000800 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
 800080a:	210f      	movs	r1, #15
 800080c:	187b      	adds	r3, r7, r1
 800080e:	1c02      	adds	r2, r0, #0
 8000810:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	187b      	adds	r3, r7, r1
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	b25b      	sxtb	r3, r3
 800081a:	0011      	movs	r1, r2
 800081c:	0018      	movs	r0, r3
 800081e:	f7ff ff5d 	bl	80006dc <__NVIC_SetPriority>
}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	b004      	add	sp, #16
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	0002      	movs	r2, r0
 8000832:	1dfb      	adds	r3, r7, #7
 8000834:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	b25b      	sxtb	r3, r3
 800083c:	0018      	movs	r0, r3
 800083e:	f7ff ff33 	bl	80006a8 <__NVIC_EnableIRQ>
}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	b002      	add	sp, #8
 8000848:	bd80      	pop	{r7, pc}

0800084a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	0018      	movs	r0, r3
 8000856:	f7ff ffaf 	bl	80007b8 <SysTick_Config>
 800085a:	0003      	movs	r3, r0
}
 800085c:	0018      	movs	r0, r3
 800085e:	46bd      	mov	sp, r7
 8000860:	b002      	add	sp, #8
 8000862:	bd80      	pop	{r7, pc}

08000864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000872:	e14f      	b.n	8000b14 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2101      	movs	r1, #1
 800087a:	697a      	ldr	r2, [r7, #20]
 800087c:	4091      	lsls	r1, r2
 800087e:	000a      	movs	r2, r1
 8000880:	4013      	ands	r3, r2
 8000882:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d100      	bne.n	800088c <HAL_GPIO_Init+0x28>
 800088a:	e140      	b.n	8000b0e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	2203      	movs	r2, #3
 8000892:	4013      	ands	r3, r2
 8000894:	2b01      	cmp	r3, #1
 8000896:	d005      	beq.n	80008a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	2203      	movs	r2, #3
 800089e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	d130      	bne.n	8000906 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	2203      	movs	r2, #3
 80008b0:	409a      	lsls	r2, r3
 80008b2:	0013      	movs	r3, r2
 80008b4:	43da      	mvns	r2, r3
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	4013      	ands	r3, r2
 80008ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	68da      	ldr	r2, [r3, #12]
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	409a      	lsls	r2, r3
 80008c6:	0013      	movs	r3, r2
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	4313      	orrs	r3, r2
 80008cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008da:	2201      	movs	r2, #1
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	409a      	lsls	r2, r3
 80008e0:	0013      	movs	r3, r2
 80008e2:	43da      	mvns	r2, r3
 80008e4:	693b      	ldr	r3, [r7, #16]
 80008e6:	4013      	ands	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	091b      	lsrs	r3, r3, #4
 80008f0:	2201      	movs	r2, #1
 80008f2:	401a      	ands	r2, r3
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	409a      	lsls	r2, r3
 80008f8:	0013      	movs	r3, r2
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	4313      	orrs	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	2203      	movs	r2, #3
 800090c:	4013      	ands	r3, r2
 800090e:	2b03      	cmp	r3, #3
 8000910:	d017      	beq.n	8000942 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	2203      	movs	r2, #3
 800091e:	409a      	lsls	r2, r3
 8000920:	0013      	movs	r3, r2
 8000922:	43da      	mvns	r2, r3
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	4013      	ands	r3, r2
 8000928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	689a      	ldr	r2, [r3, #8]
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	409a      	lsls	r2, r3
 8000934:	0013      	movs	r3, r2
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	4313      	orrs	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	2203      	movs	r2, #3
 8000948:	4013      	ands	r3, r2
 800094a:	2b02      	cmp	r3, #2
 800094c:	d123      	bne.n	8000996 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	08da      	lsrs	r2, r3, #3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3208      	adds	r2, #8
 8000956:	0092      	lsls	r2, r2, #2
 8000958:	58d3      	ldr	r3, [r2, r3]
 800095a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	2207      	movs	r2, #7
 8000960:	4013      	ands	r3, r2
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	220f      	movs	r2, #15
 8000966:	409a      	lsls	r2, r3
 8000968:	0013      	movs	r3, r2
 800096a:	43da      	mvns	r2, r3
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	4013      	ands	r3, r2
 8000970:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	691a      	ldr	r2, [r3, #16]
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	2107      	movs	r1, #7
 800097a:	400b      	ands	r3, r1
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	409a      	lsls	r2, r3
 8000980:	0013      	movs	r3, r2
 8000982:	693a      	ldr	r2, [r7, #16]
 8000984:	4313      	orrs	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	08da      	lsrs	r2, r3, #3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3208      	adds	r2, #8
 8000990:	0092      	lsls	r2, r2, #2
 8000992:	6939      	ldr	r1, [r7, #16]
 8000994:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	005b      	lsls	r3, r3, #1
 80009a0:	2203      	movs	r2, #3
 80009a2:	409a      	lsls	r2, r3
 80009a4:	0013      	movs	r3, r2
 80009a6:	43da      	mvns	r2, r3
 80009a8:	693b      	ldr	r3, [r7, #16]
 80009aa:	4013      	ands	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	2203      	movs	r2, #3
 80009b4:	401a      	ands	r2, r3
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	409a      	lsls	r2, r3
 80009bc:	0013      	movs	r3, r2
 80009be:	693a      	ldr	r2, [r7, #16]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685a      	ldr	r2, [r3, #4]
 80009ce:	23c0      	movs	r3, #192	; 0xc0
 80009d0:	029b      	lsls	r3, r3, #10
 80009d2:	4013      	ands	r3, r2
 80009d4:	d100      	bne.n	80009d8 <HAL_GPIO_Init+0x174>
 80009d6:	e09a      	b.n	8000b0e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d8:	4b54      	ldr	r3, [pc, #336]	; (8000b2c <HAL_GPIO_Init+0x2c8>)
 80009da:	699a      	ldr	r2, [r3, #24]
 80009dc:	4b53      	ldr	r3, [pc, #332]	; (8000b2c <HAL_GPIO_Init+0x2c8>)
 80009de:	2101      	movs	r1, #1
 80009e0:	430a      	orrs	r2, r1
 80009e2:	619a      	str	r2, [r3, #24]
 80009e4:	4b51      	ldr	r3, [pc, #324]	; (8000b2c <HAL_GPIO_Init+0x2c8>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	2201      	movs	r2, #1
 80009ea:	4013      	ands	r3, r2
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009f0:	4a4f      	ldr	r2, [pc, #316]	; (8000b30 <HAL_GPIO_Init+0x2cc>)
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	089b      	lsrs	r3, r3, #2
 80009f6:	3302      	adds	r3, #2
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	589b      	ldr	r3, [r3, r2]
 80009fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	2203      	movs	r2, #3
 8000a02:	4013      	ands	r3, r2
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	220f      	movs	r2, #15
 8000a08:	409a      	lsls	r2, r3
 8000a0a:	0013      	movs	r3, r2
 8000a0c:	43da      	mvns	r2, r3
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	4013      	ands	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	2390      	movs	r3, #144	; 0x90
 8000a18:	05db      	lsls	r3, r3, #23
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d013      	beq.n	8000a46 <HAL_GPIO_Init+0x1e2>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a44      	ldr	r2, [pc, #272]	; (8000b34 <HAL_GPIO_Init+0x2d0>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d00d      	beq.n	8000a42 <HAL_GPIO_Init+0x1de>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a43      	ldr	r2, [pc, #268]	; (8000b38 <HAL_GPIO_Init+0x2d4>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d007      	beq.n	8000a3e <HAL_GPIO_Init+0x1da>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a42      	ldr	r2, [pc, #264]	; (8000b3c <HAL_GPIO_Init+0x2d8>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d101      	bne.n	8000a3a <HAL_GPIO_Init+0x1d6>
 8000a36:	2303      	movs	r3, #3
 8000a38:	e006      	b.n	8000a48 <HAL_GPIO_Init+0x1e4>
 8000a3a:	2305      	movs	r3, #5
 8000a3c:	e004      	b.n	8000a48 <HAL_GPIO_Init+0x1e4>
 8000a3e:	2302      	movs	r3, #2
 8000a40:	e002      	b.n	8000a48 <HAL_GPIO_Init+0x1e4>
 8000a42:	2301      	movs	r3, #1
 8000a44:	e000      	b.n	8000a48 <HAL_GPIO_Init+0x1e4>
 8000a46:	2300      	movs	r3, #0
 8000a48:	697a      	ldr	r2, [r7, #20]
 8000a4a:	2103      	movs	r1, #3
 8000a4c:	400a      	ands	r2, r1
 8000a4e:	0092      	lsls	r2, r2, #2
 8000a50:	4093      	lsls	r3, r2
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a58:	4935      	ldr	r1, [pc, #212]	; (8000b30 <HAL_GPIO_Init+0x2cc>)
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	089b      	lsrs	r3, r3, #2
 8000a5e:	3302      	adds	r3, #2
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a66:	4b36      	ldr	r3, [pc, #216]	; (8000b40 <HAL_GPIO_Init+0x2dc>)
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	43da      	mvns	r2, r3
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685a      	ldr	r2, [r3, #4]
 8000a7a:	2380      	movs	r3, #128	; 0x80
 8000a7c:	035b      	lsls	r3, r3, #13
 8000a7e:	4013      	ands	r3, r2
 8000a80:	d003      	beq.n	8000a8a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a8a:	4b2d      	ldr	r3, [pc, #180]	; (8000b40 <HAL_GPIO_Init+0x2dc>)
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000a90:	4b2b      	ldr	r3, [pc, #172]	; (8000b40 <HAL_GPIO_Init+0x2dc>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	43da      	mvns	r2, r3
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685a      	ldr	r2, [r3, #4]
 8000aa4:	2380      	movs	r3, #128	; 0x80
 8000aa6:	039b      	lsls	r3, r3, #14
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	d003      	beq.n	8000ab4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ab4:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <HAL_GPIO_Init+0x2dc>)
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000aba:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <HAL_GPIO_Init+0x2dc>)
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	43da      	mvns	r2, r3
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685a      	ldr	r2, [r3, #4]
 8000ace:	2380      	movs	r3, #128	; 0x80
 8000ad0:	029b      	lsls	r3, r3, #10
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	d003      	beq.n	8000ade <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <HAL_GPIO_Init+0x2dc>)
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000ae4:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <HAL_GPIO_Init+0x2dc>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	43da      	mvns	r2, r3
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	025b      	lsls	r3, r3, #9
 8000afc:	4013      	ands	r3, r2
 8000afe:	d003      	beq.n	8000b08 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b08:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <HAL_GPIO_Init+0x2dc>)
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000b0e:	697b      	ldr	r3, [r7, #20]
 8000b10:	3301      	adds	r3, #1
 8000b12:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	40da      	lsrs	r2, r3
 8000b1c:	1e13      	subs	r3, r2, #0
 8000b1e:	d000      	beq.n	8000b22 <HAL_GPIO_Init+0x2be>
 8000b20:	e6a8      	b.n	8000874 <HAL_GPIO_Init+0x10>
  } 
}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b006      	add	sp, #24
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40010000 	.word	0x40010000
 8000b34:	48000400 	.word	0x48000400
 8000b38:	48000800 	.word	0x48000800
 8000b3c:	48000c00 	.word	0x48000c00
 8000b40:	40010400 	.word	0x40010400

08000b44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	000a      	movs	r2, r1
 8000b4e:	1cbb      	adds	r3, r7, #2
 8000b50:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	691b      	ldr	r3, [r3, #16]
 8000b56:	1cba      	adds	r2, r7, #2
 8000b58:	8812      	ldrh	r2, [r2, #0]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	d004      	beq.n	8000b68 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000b5e:	230f      	movs	r3, #15
 8000b60:	18fb      	adds	r3, r7, r3
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
 8000b66:	e003      	b.n	8000b70 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b68:	230f      	movs	r3, #15
 8000b6a:	18fb      	adds	r3, r7, r3
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000b70:	230f      	movs	r3, #15
 8000b72:	18fb      	adds	r3, r7, r3
 8000b74:	781b      	ldrb	r3, [r3, #0]
  }
 8000b76:	0018      	movs	r0, r3
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b004      	add	sp, #16
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	0008      	movs	r0, r1
 8000b88:	0011      	movs	r1, r2
 8000b8a:	1cbb      	adds	r3, r7, #2
 8000b8c:	1c02      	adds	r2, r0, #0
 8000b8e:	801a      	strh	r2, [r3, #0]
 8000b90:	1c7b      	adds	r3, r7, #1
 8000b92:	1c0a      	adds	r2, r1, #0
 8000b94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b96:	1c7b      	adds	r3, r7, #1
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d004      	beq.n	8000ba8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b9e:	1cbb      	adds	r3, r7, #2
 8000ba0:	881a      	ldrh	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ba6:	e003      	b.n	8000bb0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ba8:	1cbb      	adds	r3, r7, #2
 8000baa:	881a      	ldrh	r2, [r3, #0]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b002      	add	sp, #8
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	000a      	movs	r2, r1
 8000bc2:	1cbb      	adds	r3, r7, #2
 8000bc4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000bcc:	1cbb      	adds	r3, r7, #2
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	041a      	lsls	r2, r3, #16
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	1cb9      	adds	r1, r7, #2
 8000bdc:	8809      	ldrh	r1, [r1, #0]
 8000bde:	400b      	ands	r3, r1
 8000be0:	431a      	orrs	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	619a      	str	r2, [r3, #24]
}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b004      	add	sp, #16
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d101      	bne.n	8000c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e301      	b.n	8001206 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	2201      	movs	r2, #1
 8000c08:	4013      	ands	r3, r2
 8000c0a:	d100      	bne.n	8000c0e <HAL_RCC_OscConfig+0x1e>
 8000c0c:	e08d      	b.n	8000d2a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c0e:	4bc3      	ldr	r3, [pc, #780]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	220c      	movs	r2, #12
 8000c14:	4013      	ands	r3, r2
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	d00e      	beq.n	8000c38 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c1a:	4bc0      	ldr	r3, [pc, #768]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	220c      	movs	r2, #12
 8000c20:	4013      	ands	r3, r2
 8000c22:	2b08      	cmp	r3, #8
 8000c24:	d116      	bne.n	8000c54 <HAL_RCC_OscConfig+0x64>
 8000c26:	4bbd      	ldr	r3, [pc, #756]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c28:	685a      	ldr	r2, [r3, #4]
 8000c2a:	2380      	movs	r3, #128	; 0x80
 8000c2c:	025b      	lsls	r3, r3, #9
 8000c2e:	401a      	ands	r2, r3
 8000c30:	2380      	movs	r3, #128	; 0x80
 8000c32:	025b      	lsls	r3, r3, #9
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d10d      	bne.n	8000c54 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c38:	4bb8      	ldr	r3, [pc, #736]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	029b      	lsls	r3, r3, #10
 8000c40:	4013      	ands	r3, r2
 8000c42:	d100      	bne.n	8000c46 <HAL_RCC_OscConfig+0x56>
 8000c44:	e070      	b.n	8000d28 <HAL_RCC_OscConfig+0x138>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d000      	beq.n	8000c50 <HAL_RCC_OscConfig+0x60>
 8000c4e:	e06b      	b.n	8000d28 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	e2d8      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d107      	bne.n	8000c6c <HAL_RCC_OscConfig+0x7c>
 8000c5c:	4baf      	ldr	r3, [pc, #700]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4bae      	ldr	r3, [pc, #696]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c62:	2180      	movs	r1, #128	; 0x80
 8000c64:	0249      	lsls	r1, r1, #9
 8000c66:	430a      	orrs	r2, r1
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	e02f      	b.n	8000ccc <HAL_RCC_OscConfig+0xdc>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d10c      	bne.n	8000c8e <HAL_RCC_OscConfig+0x9e>
 8000c74:	4ba9      	ldr	r3, [pc, #676]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4ba8      	ldr	r3, [pc, #672]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c7a:	49a9      	ldr	r1, [pc, #676]	; (8000f20 <HAL_RCC_OscConfig+0x330>)
 8000c7c:	400a      	ands	r2, r1
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	4ba6      	ldr	r3, [pc, #664]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	4ba5      	ldr	r3, [pc, #660]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c86:	49a7      	ldr	r1, [pc, #668]	; (8000f24 <HAL_RCC_OscConfig+0x334>)
 8000c88:	400a      	ands	r2, r1
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	e01e      	b.n	8000ccc <HAL_RCC_OscConfig+0xdc>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	2b05      	cmp	r3, #5
 8000c94:	d10e      	bne.n	8000cb4 <HAL_RCC_OscConfig+0xc4>
 8000c96:	4ba1      	ldr	r3, [pc, #644]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	4ba0      	ldr	r3, [pc, #640]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000c9c:	2180      	movs	r1, #128	; 0x80
 8000c9e:	02c9      	lsls	r1, r1, #11
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	4b9d      	ldr	r3, [pc, #628]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b9c      	ldr	r3, [pc, #624]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000caa:	2180      	movs	r1, #128	; 0x80
 8000cac:	0249      	lsls	r1, r1, #9
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	e00b      	b.n	8000ccc <HAL_RCC_OscConfig+0xdc>
 8000cb4:	4b99      	ldr	r3, [pc, #612]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b98      	ldr	r3, [pc, #608]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000cba:	4999      	ldr	r1, [pc, #612]	; (8000f20 <HAL_RCC_OscConfig+0x330>)
 8000cbc:	400a      	ands	r2, r1
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	4b96      	ldr	r3, [pc, #600]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b95      	ldr	r3, [pc, #596]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000cc6:	4997      	ldr	r1, [pc, #604]	; (8000f24 <HAL_RCC_OscConfig+0x334>)
 8000cc8:	400a      	ands	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d014      	beq.n	8000cfe <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd4:	f7ff fcde 	bl	8000694 <HAL_GetTick>
 8000cd8:	0003      	movs	r3, r0
 8000cda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cdc:	e008      	b.n	8000cf0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cde:	f7ff fcd9 	bl	8000694 <HAL_GetTick>
 8000ce2:	0002      	movs	r2, r0
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	2b64      	cmp	r3, #100	; 0x64
 8000cea:	d901      	bls.n	8000cf0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000cec:	2303      	movs	r3, #3
 8000cee:	e28a      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf0:	4b8a      	ldr	r3, [pc, #552]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	029b      	lsls	r3, r3, #10
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	d0f0      	beq.n	8000cde <HAL_RCC_OscConfig+0xee>
 8000cfc:	e015      	b.n	8000d2a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cfe:	f7ff fcc9 	bl	8000694 <HAL_GetTick>
 8000d02:	0003      	movs	r3, r0
 8000d04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d06:	e008      	b.n	8000d1a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d08:	f7ff fcc4 	bl	8000694 <HAL_GetTick>
 8000d0c:	0002      	movs	r2, r0
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	2b64      	cmp	r3, #100	; 0x64
 8000d14:	d901      	bls.n	8000d1a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000d16:	2303      	movs	r3, #3
 8000d18:	e275      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d1a:	4b80      	ldr	r3, [pc, #512]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	2380      	movs	r3, #128	; 0x80
 8000d20:	029b      	lsls	r3, r3, #10
 8000d22:	4013      	ands	r3, r2
 8000d24:	d1f0      	bne.n	8000d08 <HAL_RCC_OscConfig+0x118>
 8000d26:	e000      	b.n	8000d2a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d28:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2202      	movs	r2, #2
 8000d30:	4013      	ands	r3, r2
 8000d32:	d100      	bne.n	8000d36 <HAL_RCC_OscConfig+0x146>
 8000d34:	e069      	b.n	8000e0a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d36:	4b79      	ldr	r3, [pc, #484]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	d00b      	beq.n	8000d58 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d40:	4b76      	ldr	r3, [pc, #472]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	220c      	movs	r2, #12
 8000d46:	4013      	ands	r3, r2
 8000d48:	2b08      	cmp	r3, #8
 8000d4a:	d11c      	bne.n	8000d86 <HAL_RCC_OscConfig+0x196>
 8000d4c:	4b73      	ldr	r3, [pc, #460]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	025b      	lsls	r3, r3, #9
 8000d54:	4013      	ands	r3, r2
 8000d56:	d116      	bne.n	8000d86 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d58:	4b70      	ldr	r3, [pc, #448]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	4013      	ands	r3, r2
 8000d60:	d005      	beq.n	8000d6e <HAL_RCC_OscConfig+0x17e>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d001      	beq.n	8000d6e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e24b      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d6e:	4b6b      	ldr	r3, [pc, #428]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	22f8      	movs	r2, #248	; 0xf8
 8000d74:	4393      	bics	r3, r2
 8000d76:	0019      	movs	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	691b      	ldr	r3, [r3, #16]
 8000d7c:	00da      	lsls	r2, r3, #3
 8000d7e:	4b67      	ldr	r3, [pc, #412]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000d80:	430a      	orrs	r2, r1
 8000d82:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d84:	e041      	b.n	8000e0a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d024      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d8e:	4b63      	ldr	r3, [pc, #396]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	4b62      	ldr	r3, [pc, #392]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000d94:	2101      	movs	r1, #1
 8000d96:	430a      	orrs	r2, r1
 8000d98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9a:	f7ff fc7b 	bl	8000694 <HAL_GetTick>
 8000d9e:	0003      	movs	r3, r0
 8000da0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da2:	e008      	b.n	8000db6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000da4:	f7ff fc76 	bl	8000694 <HAL_GetTick>
 8000da8:	0002      	movs	r2, r0
 8000daa:	69bb      	ldr	r3, [r7, #24]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d901      	bls.n	8000db6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e227      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db6:	4b59      	ldr	r3, [pc, #356]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2202      	movs	r2, #2
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	d0f1      	beq.n	8000da4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dc0:	4b56      	ldr	r3, [pc, #344]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	22f8      	movs	r2, #248	; 0xf8
 8000dc6:	4393      	bics	r3, r2
 8000dc8:	0019      	movs	r1, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	00da      	lsls	r2, r3, #3
 8000dd0:	4b52      	ldr	r3, [pc, #328]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	e018      	b.n	8000e0a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dd8:	4b50      	ldr	r3, [pc, #320]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4b4f      	ldr	r3, [pc, #316]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000dde:	2101      	movs	r1, #1
 8000de0:	438a      	bics	r2, r1
 8000de2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de4:	f7ff fc56 	bl	8000694 <HAL_GetTick>
 8000de8:	0003      	movs	r3, r0
 8000dea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dec:	e008      	b.n	8000e00 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dee:	f7ff fc51 	bl	8000694 <HAL_GetTick>
 8000df2:	0002      	movs	r2, r0
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d901      	bls.n	8000e00 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	e202      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e00:	4b46      	ldr	r3, [pc, #280]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2202      	movs	r2, #2
 8000e06:	4013      	ands	r3, r2
 8000e08:	d1f1      	bne.n	8000dee <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2208      	movs	r2, #8
 8000e10:	4013      	ands	r3, r2
 8000e12:	d036      	beq.n	8000e82 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69db      	ldr	r3, [r3, #28]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d019      	beq.n	8000e50 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e1c:	4b3f      	ldr	r3, [pc, #252]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e20:	4b3e      	ldr	r3, [pc, #248]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000e22:	2101      	movs	r1, #1
 8000e24:	430a      	orrs	r2, r1
 8000e26:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e28:	f7ff fc34 	bl	8000694 <HAL_GetTick>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e30:	e008      	b.n	8000e44 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e32:	f7ff fc2f 	bl	8000694 <HAL_GetTick>
 8000e36:	0002      	movs	r2, r0
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	2b02      	cmp	r3, #2
 8000e3e:	d901      	bls.n	8000e44 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000e40:	2303      	movs	r3, #3
 8000e42:	e1e0      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e44:	4b35      	ldr	r3, [pc, #212]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e48:	2202      	movs	r2, #2
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	d0f1      	beq.n	8000e32 <HAL_RCC_OscConfig+0x242>
 8000e4e:	e018      	b.n	8000e82 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e50:	4b32      	ldr	r3, [pc, #200]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000e52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e54:	4b31      	ldr	r3, [pc, #196]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000e56:	2101      	movs	r1, #1
 8000e58:	438a      	bics	r2, r1
 8000e5a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e5c:	f7ff fc1a 	bl	8000694 <HAL_GetTick>
 8000e60:	0003      	movs	r3, r0
 8000e62:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e64:	e008      	b.n	8000e78 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e66:	f7ff fc15 	bl	8000694 <HAL_GetTick>
 8000e6a:	0002      	movs	r2, r0
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e1c6      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e78:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	4013      	ands	r3, r2
 8000e80:	d1f1      	bne.n	8000e66 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2204      	movs	r2, #4
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d100      	bne.n	8000e8e <HAL_RCC_OscConfig+0x29e>
 8000e8c:	e0b4      	b.n	8000ff8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e8e:	201f      	movs	r0, #31
 8000e90:	183b      	adds	r3, r7, r0
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e96:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000e98:	69da      	ldr	r2, [r3, #28]
 8000e9a:	2380      	movs	r3, #128	; 0x80
 8000e9c:	055b      	lsls	r3, r3, #21
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d110      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000ea4:	69da      	ldr	r2, [r3, #28]
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000ea8:	2180      	movs	r1, #128	; 0x80
 8000eaa:	0549      	lsls	r1, r1, #21
 8000eac:	430a      	orrs	r2, r1
 8000eae:	61da      	str	r2, [r3, #28]
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000eb2:	69da      	ldr	r2, [r3, #28]
 8000eb4:	2380      	movs	r3, #128	; 0x80
 8000eb6:	055b      	lsls	r3, r3, #21
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ebe:	183b      	adds	r3, r7, r0
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <HAL_RCC_OscConfig+0x338>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4013      	ands	r3, r2
 8000ece:	d11a      	bne.n	8000f06 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ed0:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <HAL_RCC_OscConfig+0x338>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <HAL_RCC_OscConfig+0x338>)
 8000ed6:	2180      	movs	r1, #128	; 0x80
 8000ed8:	0049      	lsls	r1, r1, #1
 8000eda:	430a      	orrs	r2, r1
 8000edc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ede:	f7ff fbd9 	bl	8000694 <HAL_GetTick>
 8000ee2:	0003      	movs	r3, r0
 8000ee4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee6:	e008      	b.n	8000efa <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ee8:	f7ff fbd4 	bl	8000694 <HAL_GetTick>
 8000eec:	0002      	movs	r2, r0
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b64      	cmp	r3, #100	; 0x64
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e185      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <HAL_RCC_OscConfig+0x338>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	4013      	ands	r3, r2
 8000f04:	d0f0      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d10e      	bne.n	8000f2c <HAL_RCC_OscConfig+0x33c>
 8000f0e:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000f10:	6a1a      	ldr	r2, [r3, #32]
 8000f12:	4b02      	ldr	r3, [pc, #8]	; (8000f1c <HAL_RCC_OscConfig+0x32c>)
 8000f14:	2101      	movs	r1, #1
 8000f16:	430a      	orrs	r2, r1
 8000f18:	621a      	str	r2, [r3, #32]
 8000f1a:	e035      	b.n	8000f88 <HAL_RCC_OscConfig+0x398>
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	fffeffff 	.word	0xfffeffff
 8000f24:	fffbffff 	.word	0xfffbffff
 8000f28:	40007000 	.word	0x40007000
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d10c      	bne.n	8000f4e <HAL_RCC_OscConfig+0x35e>
 8000f34:	4bb6      	ldr	r3, [pc, #728]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000f36:	6a1a      	ldr	r2, [r3, #32]
 8000f38:	4bb5      	ldr	r3, [pc, #724]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	438a      	bics	r2, r1
 8000f3e:	621a      	str	r2, [r3, #32]
 8000f40:	4bb3      	ldr	r3, [pc, #716]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000f42:	6a1a      	ldr	r2, [r3, #32]
 8000f44:	4bb2      	ldr	r3, [pc, #712]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000f46:	2104      	movs	r1, #4
 8000f48:	438a      	bics	r2, r1
 8000f4a:	621a      	str	r2, [r3, #32]
 8000f4c:	e01c      	b.n	8000f88 <HAL_RCC_OscConfig+0x398>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	2b05      	cmp	r3, #5
 8000f54:	d10c      	bne.n	8000f70 <HAL_RCC_OscConfig+0x380>
 8000f56:	4bae      	ldr	r3, [pc, #696]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000f58:	6a1a      	ldr	r2, [r3, #32]
 8000f5a:	4bad      	ldr	r3, [pc, #692]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	621a      	str	r2, [r3, #32]
 8000f62:	4bab      	ldr	r3, [pc, #684]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000f64:	6a1a      	ldr	r2, [r3, #32]
 8000f66:	4baa      	ldr	r3, [pc, #680]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000f68:	2101      	movs	r1, #1
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	621a      	str	r2, [r3, #32]
 8000f6e:	e00b      	b.n	8000f88 <HAL_RCC_OscConfig+0x398>
 8000f70:	4ba7      	ldr	r3, [pc, #668]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000f72:	6a1a      	ldr	r2, [r3, #32]
 8000f74:	4ba6      	ldr	r3, [pc, #664]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000f76:	2101      	movs	r1, #1
 8000f78:	438a      	bics	r2, r1
 8000f7a:	621a      	str	r2, [r3, #32]
 8000f7c:	4ba4      	ldr	r3, [pc, #656]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000f7e:	6a1a      	ldr	r2, [r3, #32]
 8000f80:	4ba3      	ldr	r3, [pc, #652]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000f82:	2104      	movs	r1, #4
 8000f84:	438a      	bics	r2, r1
 8000f86:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d014      	beq.n	8000fba <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f90:	f7ff fb80 	bl	8000694 <HAL_GetTick>
 8000f94:	0003      	movs	r3, r0
 8000f96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f98:	e009      	b.n	8000fae <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f9a:	f7ff fb7b 	bl	8000694 <HAL_GetTick>
 8000f9e:	0002      	movs	r2, r0
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	4a9b      	ldr	r2, [pc, #620]	; (8001214 <HAL_RCC_OscConfig+0x624>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e12b      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fae:	4b98      	ldr	r3, [pc, #608]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000fb0:	6a1b      	ldr	r3, [r3, #32]
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	d0f0      	beq.n	8000f9a <HAL_RCC_OscConfig+0x3aa>
 8000fb8:	e013      	b.n	8000fe2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fba:	f7ff fb6b 	bl	8000694 <HAL_GetTick>
 8000fbe:	0003      	movs	r3, r0
 8000fc0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fc2:	e009      	b.n	8000fd8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fc4:	f7ff fb66 	bl	8000694 <HAL_GetTick>
 8000fc8:	0002      	movs	r2, r0
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	4a91      	ldr	r2, [pc, #580]	; (8001214 <HAL_RCC_OscConfig+0x624>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e116      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fd8:	4b8d      	ldr	r3, [pc, #564]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000fda:	6a1b      	ldr	r3, [r3, #32]
 8000fdc:	2202      	movs	r2, #2
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d1f0      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000fe2:	231f      	movs	r3, #31
 8000fe4:	18fb      	adds	r3, r7, r3
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d105      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fec:	4b88      	ldr	r3, [pc, #544]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000fee:	69da      	ldr	r2, [r3, #28]
 8000ff0:	4b87      	ldr	r3, [pc, #540]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8000ff2:	4989      	ldr	r1, [pc, #548]	; (8001218 <HAL_RCC_OscConfig+0x628>)
 8000ff4:	400a      	ands	r2, r1
 8000ff6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2210      	movs	r2, #16
 8000ffe:	4013      	ands	r3, r2
 8001000:	d063      	beq.n	80010ca <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d12a      	bne.n	8001060 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800100a:	4b81      	ldr	r3, [pc, #516]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 800100c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800100e:	4b80      	ldr	r3, [pc, #512]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001010:	2104      	movs	r1, #4
 8001012:	430a      	orrs	r2, r1
 8001014:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001016:	4b7e      	ldr	r3, [pc, #504]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001018:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800101a:	4b7d      	ldr	r3, [pc, #500]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 800101c:	2101      	movs	r1, #1
 800101e:	430a      	orrs	r2, r1
 8001020:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001022:	f7ff fb37 	bl	8000694 <HAL_GetTick>
 8001026:	0003      	movs	r3, r0
 8001028:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800102c:	f7ff fb32 	bl	8000694 <HAL_GetTick>
 8001030:	0002      	movs	r2, r0
 8001032:	69bb      	ldr	r3, [r7, #24]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e0e3      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800103e:	4b74      	ldr	r3, [pc, #464]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001042:	2202      	movs	r2, #2
 8001044:	4013      	ands	r3, r2
 8001046:	d0f1      	beq.n	800102c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001048:	4b71      	ldr	r3, [pc, #452]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 800104a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800104c:	22f8      	movs	r2, #248	; 0xf8
 800104e:	4393      	bics	r3, r2
 8001050:	0019      	movs	r1, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	00da      	lsls	r2, r3, #3
 8001058:	4b6d      	ldr	r3, [pc, #436]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 800105a:	430a      	orrs	r2, r1
 800105c:	635a      	str	r2, [r3, #52]	; 0x34
 800105e:	e034      	b.n	80010ca <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	3305      	adds	r3, #5
 8001066:	d111      	bne.n	800108c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001068:	4b69      	ldr	r3, [pc, #420]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 800106a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800106c:	4b68      	ldr	r3, [pc, #416]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 800106e:	2104      	movs	r1, #4
 8001070:	438a      	bics	r2, r1
 8001072:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001074:	4b66      	ldr	r3, [pc, #408]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001078:	22f8      	movs	r2, #248	; 0xf8
 800107a:	4393      	bics	r3, r2
 800107c:	0019      	movs	r1, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	00da      	lsls	r2, r3, #3
 8001084:	4b62      	ldr	r3, [pc, #392]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001086:	430a      	orrs	r2, r1
 8001088:	635a      	str	r2, [r3, #52]	; 0x34
 800108a:	e01e      	b.n	80010ca <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800108c:	4b60      	ldr	r3, [pc, #384]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 800108e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001090:	4b5f      	ldr	r3, [pc, #380]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001092:	2104      	movs	r1, #4
 8001094:	430a      	orrs	r2, r1
 8001096:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001098:	4b5d      	ldr	r3, [pc, #372]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 800109a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800109c:	4b5c      	ldr	r3, [pc, #368]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 800109e:	2101      	movs	r1, #1
 80010a0:	438a      	bics	r2, r1
 80010a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a4:	f7ff faf6 	bl	8000694 <HAL_GetTick>
 80010a8:	0003      	movs	r3, r0
 80010aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010ac:	e008      	b.n	80010c0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010ae:	f7ff faf1 	bl	8000694 <HAL_GetTick>
 80010b2:	0002      	movs	r2, r0
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d901      	bls.n	80010c0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80010bc:	2303      	movs	r3, #3
 80010be:	e0a2      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010c0:	4b53      	ldr	r3, [pc, #332]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 80010c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010c4:	2202      	movs	r2, #2
 80010c6:	4013      	ands	r3, r2
 80010c8:	d1f1      	bne.n	80010ae <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a1b      	ldr	r3, [r3, #32]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d100      	bne.n	80010d4 <HAL_RCC_OscConfig+0x4e4>
 80010d2:	e097      	b.n	8001204 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010d4:	4b4e      	ldr	r3, [pc, #312]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	220c      	movs	r2, #12
 80010da:	4013      	ands	r3, r2
 80010dc:	2b08      	cmp	r3, #8
 80010de:	d100      	bne.n	80010e2 <HAL_RCC_OscConfig+0x4f2>
 80010e0:	e06b      	b.n	80011ba <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d14c      	bne.n	8001184 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ea:	4b49      	ldr	r3, [pc, #292]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	4b48      	ldr	r3, [pc, #288]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 80010f0:	494a      	ldr	r1, [pc, #296]	; (800121c <HAL_RCC_OscConfig+0x62c>)
 80010f2:	400a      	ands	r2, r1
 80010f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f6:	f7ff facd 	bl	8000694 <HAL_GetTick>
 80010fa:	0003      	movs	r3, r0
 80010fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001100:	f7ff fac8 	bl	8000694 <HAL_GetTick>
 8001104:	0002      	movs	r2, r0
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e079      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001112:	4b3f      	ldr	r3, [pc, #252]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	049b      	lsls	r3, r3, #18
 800111a:	4013      	ands	r3, r2
 800111c:	d1f0      	bne.n	8001100 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800111e:	4b3c      	ldr	r3, [pc, #240]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001122:	220f      	movs	r2, #15
 8001124:	4393      	bics	r3, r2
 8001126:	0019      	movs	r1, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800112c:	4b38      	ldr	r3, [pc, #224]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 800112e:	430a      	orrs	r2, r1
 8001130:	62da      	str	r2, [r3, #44]	; 0x2c
 8001132:	4b37      	ldr	r3, [pc, #220]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	4a3a      	ldr	r2, [pc, #232]	; (8001220 <HAL_RCC_OscConfig+0x630>)
 8001138:	4013      	ands	r3, r2
 800113a:	0019      	movs	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001144:	431a      	orrs	r2, r3
 8001146:	4b32      	ldr	r3, [pc, #200]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001148:	430a      	orrs	r2, r1
 800114a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800114c:	4b30      	ldr	r3, [pc, #192]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b2f      	ldr	r3, [pc, #188]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001152:	2180      	movs	r1, #128	; 0x80
 8001154:	0449      	lsls	r1, r1, #17
 8001156:	430a      	orrs	r2, r1
 8001158:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115a:	f7ff fa9b 	bl	8000694 <HAL_GetTick>
 800115e:	0003      	movs	r3, r0
 8001160:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001164:	f7ff fa96 	bl	8000694 <HAL_GetTick>
 8001168:	0002      	movs	r2, r0
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e047      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001176:	4b26      	ldr	r3, [pc, #152]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	049b      	lsls	r3, r3, #18
 800117e:	4013      	ands	r3, r2
 8001180:	d0f0      	beq.n	8001164 <HAL_RCC_OscConfig+0x574>
 8001182:	e03f      	b.n	8001204 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001184:	4b22      	ldr	r3, [pc, #136]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4b21      	ldr	r3, [pc, #132]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 800118a:	4924      	ldr	r1, [pc, #144]	; (800121c <HAL_RCC_OscConfig+0x62c>)
 800118c:	400a      	ands	r2, r1
 800118e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001190:	f7ff fa80 	bl	8000694 <HAL_GetTick>
 8001194:	0003      	movs	r3, r0
 8001196:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001198:	e008      	b.n	80011ac <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800119a:	f7ff fa7b 	bl	8000694 <HAL_GetTick>
 800119e:	0002      	movs	r2, r0
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d901      	bls.n	80011ac <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e02c      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ac:	4b18      	ldr	r3, [pc, #96]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	2380      	movs	r3, #128	; 0x80
 80011b2:	049b      	lsls	r3, r3, #18
 80011b4:	4013      	ands	r3, r2
 80011b6:	d1f0      	bne.n	800119a <HAL_RCC_OscConfig+0x5aa>
 80011b8:	e024      	b.n	8001204 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a1b      	ldr	r3, [r3, #32]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d101      	bne.n	80011c6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e01f      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80011c6:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80011cc:	4b10      	ldr	r3, [pc, #64]	; (8001210 <HAL_RCC_OscConfig+0x620>)
 80011ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	025b      	lsls	r3, r3, #9
 80011d8:	401a      	ands	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011de:	429a      	cmp	r2, r3
 80011e0:	d10e      	bne.n	8001200 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	220f      	movs	r2, #15
 80011e6:	401a      	ands	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d107      	bne.n	8001200 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	23f0      	movs	r3, #240	; 0xf0
 80011f4:	039b      	lsls	r3, r3, #14
 80011f6:	401a      	ands	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d001      	beq.n	8001204 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e000      	b.n	8001206 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	0018      	movs	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	b008      	add	sp, #32
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	40021000 	.word	0x40021000
 8001214:	00001388 	.word	0x00001388
 8001218:	efffffff 	.word	0xefffffff
 800121c:	feffffff 	.word	0xfeffffff
 8001220:	ffc2ffff 	.word	0xffc2ffff

08001224 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e0b3      	b.n	80013a0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001238:	4b5b      	ldr	r3, [pc, #364]	; (80013a8 <HAL_RCC_ClockConfig+0x184>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2201      	movs	r2, #1
 800123e:	4013      	ands	r3, r2
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	429a      	cmp	r2, r3
 8001244:	d911      	bls.n	800126a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001246:	4b58      	ldr	r3, [pc, #352]	; (80013a8 <HAL_RCC_ClockConfig+0x184>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2201      	movs	r2, #1
 800124c:	4393      	bics	r3, r2
 800124e:	0019      	movs	r1, r3
 8001250:	4b55      	ldr	r3, [pc, #340]	; (80013a8 <HAL_RCC_ClockConfig+0x184>)
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	430a      	orrs	r2, r1
 8001256:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001258:	4b53      	ldr	r3, [pc, #332]	; (80013a8 <HAL_RCC_ClockConfig+0x184>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2201      	movs	r2, #1
 800125e:	4013      	ands	r3, r2
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	d001      	beq.n	800126a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e09a      	b.n	80013a0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2202      	movs	r2, #2
 8001270:	4013      	ands	r3, r2
 8001272:	d015      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2204      	movs	r2, #4
 800127a:	4013      	ands	r3, r2
 800127c:	d006      	beq.n	800128c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800127e:	4b4b      	ldr	r3, [pc, #300]	; (80013ac <HAL_RCC_ClockConfig+0x188>)
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	4b4a      	ldr	r3, [pc, #296]	; (80013ac <HAL_RCC_ClockConfig+0x188>)
 8001284:	21e0      	movs	r1, #224	; 0xe0
 8001286:	00c9      	lsls	r1, r1, #3
 8001288:	430a      	orrs	r2, r1
 800128a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800128c:	4b47      	ldr	r3, [pc, #284]	; (80013ac <HAL_RCC_ClockConfig+0x188>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	22f0      	movs	r2, #240	; 0xf0
 8001292:	4393      	bics	r3, r2
 8001294:	0019      	movs	r1, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	4b44      	ldr	r3, [pc, #272]	; (80013ac <HAL_RCC_ClockConfig+0x188>)
 800129c:	430a      	orrs	r2, r1
 800129e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2201      	movs	r2, #1
 80012a6:	4013      	ands	r3, r2
 80012a8:	d040      	beq.n	800132c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d107      	bne.n	80012c2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b2:	4b3e      	ldr	r3, [pc, #248]	; (80013ac <HAL_RCC_ClockConfig+0x188>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	029b      	lsls	r3, r3, #10
 80012ba:	4013      	ands	r3, r2
 80012bc:	d114      	bne.n	80012e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e06e      	b.n	80013a0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d107      	bne.n	80012da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ca:	4b38      	ldr	r3, [pc, #224]	; (80013ac <HAL_RCC_ClockConfig+0x188>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	2380      	movs	r3, #128	; 0x80
 80012d0:	049b      	lsls	r3, r3, #18
 80012d2:	4013      	ands	r3, r2
 80012d4:	d108      	bne.n	80012e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e062      	b.n	80013a0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012da:	4b34      	ldr	r3, [pc, #208]	; (80013ac <HAL_RCC_ClockConfig+0x188>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2202      	movs	r2, #2
 80012e0:	4013      	ands	r3, r2
 80012e2:	d101      	bne.n	80012e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e05b      	b.n	80013a0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012e8:	4b30      	ldr	r3, [pc, #192]	; (80013ac <HAL_RCC_ClockConfig+0x188>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2203      	movs	r2, #3
 80012ee:	4393      	bics	r3, r2
 80012f0:	0019      	movs	r1, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <HAL_RCC_ClockConfig+0x188>)
 80012f8:	430a      	orrs	r2, r1
 80012fa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012fc:	f7ff f9ca 	bl	8000694 <HAL_GetTick>
 8001300:	0003      	movs	r3, r0
 8001302:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001304:	e009      	b.n	800131a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001306:	f7ff f9c5 	bl	8000694 <HAL_GetTick>
 800130a:	0002      	movs	r2, r0
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	4a27      	ldr	r2, [pc, #156]	; (80013b0 <HAL_RCC_ClockConfig+0x18c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d901      	bls.n	800131a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e042      	b.n	80013a0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800131a:	4b24      	ldr	r3, [pc, #144]	; (80013ac <HAL_RCC_ClockConfig+0x188>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	220c      	movs	r2, #12
 8001320:	401a      	ands	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	429a      	cmp	r2, r3
 800132a:	d1ec      	bne.n	8001306 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800132c:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <HAL_RCC_ClockConfig+0x184>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2201      	movs	r2, #1
 8001332:	4013      	ands	r3, r2
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	429a      	cmp	r2, r3
 8001338:	d211      	bcs.n	800135e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133a:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <HAL_RCC_ClockConfig+0x184>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2201      	movs	r2, #1
 8001340:	4393      	bics	r3, r2
 8001342:	0019      	movs	r1, r3
 8001344:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <HAL_RCC_ClockConfig+0x184>)
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <HAL_RCC_ClockConfig+0x184>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2201      	movs	r2, #1
 8001352:	4013      	ands	r3, r2
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	429a      	cmp	r2, r3
 8001358:	d001      	beq.n	800135e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e020      	b.n	80013a0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2204      	movs	r2, #4
 8001364:	4013      	ands	r3, r2
 8001366:	d009      	beq.n	800137c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <HAL_RCC_ClockConfig+0x188>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	4a11      	ldr	r2, [pc, #68]	; (80013b4 <HAL_RCC_ClockConfig+0x190>)
 800136e:	4013      	ands	r3, r2
 8001370:	0019      	movs	r1, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68da      	ldr	r2, [r3, #12]
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <HAL_RCC_ClockConfig+0x188>)
 8001378:	430a      	orrs	r2, r1
 800137a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800137c:	f000 f820 	bl	80013c0 <HAL_RCC_GetSysClockFreq>
 8001380:	0001      	movs	r1, r0
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_RCC_ClockConfig+0x188>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	091b      	lsrs	r3, r3, #4
 8001388:	220f      	movs	r2, #15
 800138a:	4013      	ands	r3, r2
 800138c:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <HAL_RCC_ClockConfig+0x194>)
 800138e:	5cd3      	ldrb	r3, [r2, r3]
 8001390:	000a      	movs	r2, r1
 8001392:	40da      	lsrs	r2, r3
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_RCC_ClockConfig+0x198>)
 8001396:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001398:	2003      	movs	r0, #3
 800139a:	f7ff f935 	bl	8000608 <HAL_InitTick>
  
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	0018      	movs	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b004      	add	sp, #16
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40022000 	.word	0x40022000
 80013ac:	40021000 	.word	0x40021000
 80013b0:	00001388 	.word	0x00001388
 80013b4:	fffff8ff 	.word	0xfffff8ff
 80013b8:	08001dec 	.word	0x08001dec
 80013bc:	20000000 	.word	0x20000000

080013c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80013da:	4b20      	ldr	r3, [pc, #128]	; (800145c <HAL_RCC_GetSysClockFreq+0x9c>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	220c      	movs	r2, #12
 80013e4:	4013      	ands	r3, r2
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	d002      	beq.n	80013f0 <HAL_RCC_GetSysClockFreq+0x30>
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d003      	beq.n	80013f6 <HAL_RCC_GetSysClockFreq+0x36>
 80013ee:	e02c      	b.n	800144a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013f0:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <HAL_RCC_GetSysClockFreq+0xa0>)
 80013f2:	613b      	str	r3, [r7, #16]
      break;
 80013f4:	e02c      	b.n	8001450 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	0c9b      	lsrs	r3, r3, #18
 80013fa:	220f      	movs	r2, #15
 80013fc:	4013      	ands	r3, r2
 80013fe:	4a19      	ldr	r2, [pc, #100]	; (8001464 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001400:	5cd3      	ldrb	r3, [r2, r3]
 8001402:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001408:	220f      	movs	r2, #15
 800140a:	4013      	ands	r3, r2
 800140c:	4a16      	ldr	r2, [pc, #88]	; (8001468 <HAL_RCC_GetSysClockFreq+0xa8>)
 800140e:	5cd3      	ldrb	r3, [r2, r3]
 8001410:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	025b      	lsls	r3, r3, #9
 8001418:	4013      	ands	r3, r2
 800141a:	d009      	beq.n	8001430 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	4810      	ldr	r0, [pc, #64]	; (8001460 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001420:	f7fe fe72 	bl	8000108 <__udivsi3>
 8001424:	0003      	movs	r3, r0
 8001426:	001a      	movs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4353      	muls	r3, r2
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	e009      	b.n	8001444 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	000a      	movs	r2, r1
 8001434:	0152      	lsls	r2, r2, #5
 8001436:	1a52      	subs	r2, r2, r1
 8001438:	0193      	lsls	r3, r2, #6
 800143a:	1a9b      	subs	r3, r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	185b      	adds	r3, r3, r1
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	613b      	str	r3, [r7, #16]
      break;
 8001448:	e002      	b.n	8001450 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800144a:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_RCC_GetSysClockFreq+0xa0>)
 800144c:	613b      	str	r3, [r7, #16]
      break;
 800144e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001450:	693b      	ldr	r3, [r7, #16]
}
 8001452:	0018      	movs	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	b006      	add	sp, #24
 8001458:	bd80      	pop	{r7, pc}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	40021000 	.word	0x40021000
 8001460:	007a1200 	.word	0x007a1200
 8001464:	08001dfc 	.word	0x08001dfc
 8001468:	08001e0c 	.word	0x08001e0c

0800146c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e042      	b.n	8001504 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	223d      	movs	r2, #61	; 0x3d
 8001482:	5c9b      	ldrb	r3, [r3, r2]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	d107      	bne.n	800149a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	223c      	movs	r2, #60	; 0x3c
 800148e:	2100      	movs	r1, #0
 8001490:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	0018      	movs	r0, r3
 8001496:	f7ff f829 	bl	80004ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	223d      	movs	r2, #61	; 0x3d
 800149e:	2102      	movs	r1, #2
 80014a0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	3304      	adds	r3, #4
 80014aa:	0019      	movs	r1, r3
 80014ac:	0010      	movs	r0, r2
 80014ae:	f000 faed 	bl	8001a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2246      	movs	r2, #70	; 0x46
 80014b6:	2101      	movs	r1, #1
 80014b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	223e      	movs	r2, #62	; 0x3e
 80014be:	2101      	movs	r1, #1
 80014c0:	5499      	strb	r1, [r3, r2]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	223f      	movs	r2, #63	; 0x3f
 80014c6:	2101      	movs	r1, #1
 80014c8:	5499      	strb	r1, [r3, r2]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2240      	movs	r2, #64	; 0x40
 80014ce:	2101      	movs	r1, #1
 80014d0:	5499      	strb	r1, [r3, r2]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2241      	movs	r2, #65	; 0x41
 80014d6:	2101      	movs	r1, #1
 80014d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2242      	movs	r2, #66	; 0x42
 80014de:	2101      	movs	r1, #1
 80014e0:	5499      	strb	r1, [r3, r2]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2243      	movs	r2, #67	; 0x43
 80014e6:	2101      	movs	r1, #1
 80014e8:	5499      	strb	r1, [r3, r2]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2244      	movs	r2, #68	; 0x44
 80014ee:	2101      	movs	r1, #1
 80014f0:	5499      	strb	r1, [r3, r2]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2245      	movs	r2, #69	; 0x45
 80014f6:	2101      	movs	r1, #1
 80014f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	223d      	movs	r2, #61	; 0x3d
 80014fe:	2101      	movs	r1, #1
 8001500:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	0018      	movs	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	b002      	add	sp, #8
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	223d      	movs	r2, #61	; 0x3d
 8001518:	5c9b      	ldrb	r3, [r3, r2]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b01      	cmp	r3, #1
 800151e:	d001      	beq.n	8001524 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e02d      	b.n	8001580 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	223d      	movs	r2, #61	; 0x3d
 8001528:	2102      	movs	r1, #2
 800152a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a15      	ldr	r2, [pc, #84]	; (8001588 <HAL_TIM_Base_Start+0x7c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d009      	beq.n	800154a <HAL_TIM_Base_Start+0x3e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a14      	ldr	r2, [pc, #80]	; (800158c <HAL_TIM_Base_Start+0x80>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d004      	beq.n	800154a <HAL_TIM_Base_Start+0x3e>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a12      	ldr	r2, [pc, #72]	; (8001590 <HAL_TIM_Base_Start+0x84>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d111      	bne.n	800156e <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2207      	movs	r2, #7
 8001552:	4013      	ands	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2b06      	cmp	r3, #6
 800155a:	d010      	beq.n	800157e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2101      	movs	r1, #1
 8001568:	430a      	orrs	r2, r1
 800156a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800156c:	e007      	b.n	800157e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2101      	movs	r1, #1
 800157a:	430a      	orrs	r2, r1
 800157c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	0018      	movs	r0, r3
 8001582:	46bd      	mov	sp, r7
 8001584:	b004      	add	sp, #16
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40012c00 	.word	0x40012c00
 800158c:	40000400 	.word	0x40000400
 8001590:	40014000 	.word	0x40014000

08001594 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	4a0d      	ldr	r2, [pc, #52]	; (80015d8 <HAL_TIM_Base_Stop+0x44>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	d10d      	bne.n	80015c4 <HAL_TIM_Base_Stop+0x30>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <HAL_TIM_Base_Stop+0x48>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	d107      	bne.n	80015c4 <HAL_TIM_Base_Stop+0x30>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2101      	movs	r1, #1
 80015c0:	438a      	bics	r2, r1
 80015c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	223d      	movs	r2, #61	; 0x3d
 80015c8:	2101      	movs	r1, #1
 80015ca:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	0018      	movs	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b002      	add	sp, #8
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	00001111 	.word	0x00001111
 80015dc:	00000444 	.word	0x00000444

080015e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	223d      	movs	r2, #61	; 0x3d
 80015ec:	5c9b      	ldrb	r3, [r3, r2]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d001      	beq.n	80015f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e035      	b.n	8001664 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	223d      	movs	r2, #61	; 0x3d
 80015fc:	2102      	movs	r1, #2
 80015fe:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2101      	movs	r1, #1
 800160c:	430a      	orrs	r2, r1
 800160e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a15      	ldr	r2, [pc, #84]	; (800166c <HAL_TIM_Base_Start_IT+0x8c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d009      	beq.n	800162e <HAL_TIM_Base_Start_IT+0x4e>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a14      	ldr	r2, [pc, #80]	; (8001670 <HAL_TIM_Base_Start_IT+0x90>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d004      	beq.n	800162e <HAL_TIM_Base_Start_IT+0x4e>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a12      	ldr	r2, [pc, #72]	; (8001674 <HAL_TIM_Base_Start_IT+0x94>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d111      	bne.n	8001652 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2207      	movs	r2, #7
 8001636:	4013      	ands	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2b06      	cmp	r3, #6
 800163e:	d010      	beq.n	8001662 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2101      	movs	r1, #1
 800164c:	430a      	orrs	r2, r1
 800164e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001650:	e007      	b.n	8001662 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2101      	movs	r1, #1
 800165e:	430a      	orrs	r2, r1
 8001660:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	0018      	movs	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	b004      	add	sp, #16
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40012c00 	.word	0x40012c00
 8001670:	40000400 	.word	0x40000400
 8001674:	40014000 	.word	0x40014000

08001678 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	2202      	movs	r2, #2
 8001688:	4013      	ands	r3, r2
 800168a:	2b02      	cmp	r3, #2
 800168c:	d124      	bne.n	80016d8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	2202      	movs	r2, #2
 8001696:	4013      	ands	r3, r2
 8001698:	2b02      	cmp	r3, #2
 800169a:	d11d      	bne.n	80016d8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2203      	movs	r2, #3
 80016a2:	4252      	negs	r2, r2
 80016a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	2203      	movs	r2, #3
 80016b4:	4013      	ands	r3, r2
 80016b6:	d004      	beq.n	80016c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	0018      	movs	r0, r3
 80016bc:	f000 f9ce 	bl	8001a5c <HAL_TIM_IC_CaptureCallback>
 80016c0:	e007      	b.n	80016d2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	0018      	movs	r0, r3
 80016c6:	f000 f9c1 	bl	8001a4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	0018      	movs	r0, r3
 80016ce:	f000 f9cd 	bl	8001a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	2204      	movs	r2, #4
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d125      	bne.n	8001732 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	2204      	movs	r2, #4
 80016ee:	4013      	ands	r3, r2
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	d11e      	bne.n	8001732 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2205      	movs	r2, #5
 80016fa:	4252      	negs	r2, r2
 80016fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2202      	movs	r2, #2
 8001702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	699a      	ldr	r2, [r3, #24]
 800170a:	23c0      	movs	r3, #192	; 0xc0
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4013      	ands	r3, r2
 8001710:	d004      	beq.n	800171c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	0018      	movs	r0, r3
 8001716:	f000 f9a1 	bl	8001a5c <HAL_TIM_IC_CaptureCallback>
 800171a:	e007      	b.n	800172c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	0018      	movs	r0, r3
 8001720:	f000 f994 	bl	8001a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	0018      	movs	r0, r3
 8001728:	f000 f9a0 	bl	8001a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	2208      	movs	r2, #8
 800173a:	4013      	ands	r3, r2
 800173c:	2b08      	cmp	r3, #8
 800173e:	d124      	bne.n	800178a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	2208      	movs	r2, #8
 8001748:	4013      	ands	r3, r2
 800174a:	2b08      	cmp	r3, #8
 800174c:	d11d      	bne.n	800178a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2209      	movs	r2, #9
 8001754:	4252      	negs	r2, r2
 8001756:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2204      	movs	r2, #4
 800175c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	2203      	movs	r2, #3
 8001766:	4013      	ands	r3, r2
 8001768:	d004      	beq.n	8001774 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	0018      	movs	r0, r3
 800176e:	f000 f975 	bl	8001a5c <HAL_TIM_IC_CaptureCallback>
 8001772:	e007      	b.n	8001784 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	0018      	movs	r0, r3
 8001778:	f000 f968 	bl	8001a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	0018      	movs	r0, r3
 8001780:	f000 f974 	bl	8001a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	2210      	movs	r2, #16
 8001792:	4013      	ands	r3, r2
 8001794:	2b10      	cmp	r3, #16
 8001796:	d125      	bne.n	80017e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	2210      	movs	r2, #16
 80017a0:	4013      	ands	r3, r2
 80017a2:	2b10      	cmp	r3, #16
 80017a4:	d11e      	bne.n	80017e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2211      	movs	r2, #17
 80017ac:	4252      	negs	r2, r2
 80017ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2208      	movs	r2, #8
 80017b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	69da      	ldr	r2, [r3, #28]
 80017bc:	23c0      	movs	r3, #192	; 0xc0
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4013      	ands	r3, r2
 80017c2:	d004      	beq.n	80017ce <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	0018      	movs	r0, r3
 80017c8:	f000 f948 	bl	8001a5c <HAL_TIM_IC_CaptureCallback>
 80017cc:	e007      	b.n	80017de <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	0018      	movs	r0, r3
 80017d2:	f000 f93b 	bl	8001a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	0018      	movs	r0, r3
 80017da:	f000 f947 	bl	8001a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	2201      	movs	r2, #1
 80017ec:	4013      	ands	r3, r2
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d10f      	bne.n	8001812 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	2201      	movs	r2, #1
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d108      	bne.n	8001812 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2202      	movs	r2, #2
 8001806:	4252      	negs	r2, r2
 8001808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	0018      	movs	r0, r3
 800180e:	f7fe fe27 	bl	8000460 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	2280      	movs	r2, #128	; 0x80
 800181a:	4013      	ands	r3, r2
 800181c:	2b80      	cmp	r3, #128	; 0x80
 800181e:	d10f      	bne.n	8001840 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	2280      	movs	r2, #128	; 0x80
 8001828:	4013      	ands	r3, r2
 800182a:	2b80      	cmp	r3, #128	; 0x80
 800182c:	d108      	bne.n	8001840 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2281      	movs	r2, #129	; 0x81
 8001834:	4252      	negs	r2, r2
 8001836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	0018      	movs	r0, r3
 800183c:	f000 fa96 	bl	8001d6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	2240      	movs	r2, #64	; 0x40
 8001848:	4013      	ands	r3, r2
 800184a:	2b40      	cmp	r3, #64	; 0x40
 800184c:	d10f      	bne.n	800186e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	2240      	movs	r2, #64	; 0x40
 8001856:	4013      	ands	r3, r2
 8001858:	2b40      	cmp	r3, #64	; 0x40
 800185a:	d108      	bne.n	800186e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2241      	movs	r2, #65	; 0x41
 8001862:	4252      	negs	r2, r2
 8001864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	0018      	movs	r0, r3
 800186a:	f000 f907 	bl	8001a7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	2220      	movs	r2, #32
 8001876:	4013      	ands	r3, r2
 8001878:	2b20      	cmp	r3, #32
 800187a:	d10f      	bne.n	800189c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	2220      	movs	r2, #32
 8001884:	4013      	ands	r3, r2
 8001886:	2b20      	cmp	r3, #32
 8001888:	d108      	bne.n	800189c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2221      	movs	r2, #33	; 0x21
 8001890:	4252      	negs	r2, r2
 8001892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	0018      	movs	r0, r3
 8001898:	f000 fa60 	bl	8001d5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800189c:	46c0      	nop			; (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	b002      	add	sp, #8
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018ae:	230f      	movs	r3, #15
 80018b0:	18fb      	adds	r3, r7, r3
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	223c      	movs	r2, #60	; 0x3c
 80018ba:	5c9b      	ldrb	r3, [r3, r2]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d101      	bne.n	80018c4 <HAL_TIM_ConfigClockSource+0x20>
 80018c0:	2302      	movs	r3, #2
 80018c2:	e0bc      	b.n	8001a3e <HAL_TIM_ConfigClockSource+0x19a>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	223c      	movs	r2, #60	; 0x3c
 80018c8:	2101      	movs	r1, #1
 80018ca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	223d      	movs	r2, #61	; 0x3d
 80018d0:	2102      	movs	r1, #2
 80018d2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2277      	movs	r2, #119	; 0x77
 80018e0:	4393      	bics	r3, r2
 80018e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	4a58      	ldr	r2, [pc, #352]	; (8001a48 <HAL_TIM_ConfigClockSource+0x1a4>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2280      	movs	r2, #128	; 0x80
 80018fa:	0192      	lsls	r2, r2, #6
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d040      	beq.n	8001982 <HAL_TIM_ConfigClockSource+0xde>
 8001900:	2280      	movs	r2, #128	; 0x80
 8001902:	0192      	lsls	r2, r2, #6
 8001904:	4293      	cmp	r3, r2
 8001906:	d900      	bls.n	800190a <HAL_TIM_ConfigClockSource+0x66>
 8001908:	e088      	b.n	8001a1c <HAL_TIM_ConfigClockSource+0x178>
 800190a:	2280      	movs	r2, #128	; 0x80
 800190c:	0152      	lsls	r2, r2, #5
 800190e:	4293      	cmp	r3, r2
 8001910:	d100      	bne.n	8001914 <HAL_TIM_ConfigClockSource+0x70>
 8001912:	e088      	b.n	8001a26 <HAL_TIM_ConfigClockSource+0x182>
 8001914:	2280      	movs	r2, #128	; 0x80
 8001916:	0152      	lsls	r2, r2, #5
 8001918:	4293      	cmp	r3, r2
 800191a:	d900      	bls.n	800191e <HAL_TIM_ConfigClockSource+0x7a>
 800191c:	e07e      	b.n	8001a1c <HAL_TIM_ConfigClockSource+0x178>
 800191e:	2b70      	cmp	r3, #112	; 0x70
 8001920:	d018      	beq.n	8001954 <HAL_TIM_ConfigClockSource+0xb0>
 8001922:	d900      	bls.n	8001926 <HAL_TIM_ConfigClockSource+0x82>
 8001924:	e07a      	b.n	8001a1c <HAL_TIM_ConfigClockSource+0x178>
 8001926:	2b60      	cmp	r3, #96	; 0x60
 8001928:	d04f      	beq.n	80019ca <HAL_TIM_ConfigClockSource+0x126>
 800192a:	d900      	bls.n	800192e <HAL_TIM_ConfigClockSource+0x8a>
 800192c:	e076      	b.n	8001a1c <HAL_TIM_ConfigClockSource+0x178>
 800192e:	2b50      	cmp	r3, #80	; 0x50
 8001930:	d03b      	beq.n	80019aa <HAL_TIM_ConfigClockSource+0x106>
 8001932:	d900      	bls.n	8001936 <HAL_TIM_ConfigClockSource+0x92>
 8001934:	e072      	b.n	8001a1c <HAL_TIM_ConfigClockSource+0x178>
 8001936:	2b40      	cmp	r3, #64	; 0x40
 8001938:	d057      	beq.n	80019ea <HAL_TIM_ConfigClockSource+0x146>
 800193a:	d900      	bls.n	800193e <HAL_TIM_ConfigClockSource+0x9a>
 800193c:	e06e      	b.n	8001a1c <HAL_TIM_ConfigClockSource+0x178>
 800193e:	2b30      	cmp	r3, #48	; 0x30
 8001940:	d063      	beq.n	8001a0a <HAL_TIM_ConfigClockSource+0x166>
 8001942:	d86b      	bhi.n	8001a1c <HAL_TIM_ConfigClockSource+0x178>
 8001944:	2b20      	cmp	r3, #32
 8001946:	d060      	beq.n	8001a0a <HAL_TIM_ConfigClockSource+0x166>
 8001948:	d868      	bhi.n	8001a1c <HAL_TIM_ConfigClockSource+0x178>
 800194a:	2b00      	cmp	r3, #0
 800194c:	d05d      	beq.n	8001a0a <HAL_TIM_ConfigClockSource+0x166>
 800194e:	2b10      	cmp	r3, #16
 8001950:	d05b      	beq.n	8001a0a <HAL_TIM_ConfigClockSource+0x166>
 8001952:	e063      	b.n	8001a1c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6818      	ldr	r0, [r3, #0]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	6899      	ldr	r1, [r3, #8]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	f000 f982 	bl	8001c6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2277      	movs	r2, #119	; 0x77
 8001974:	4313      	orrs	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	609a      	str	r2, [r3, #8]
      break;
 8001980:	e052      	b.n	8001a28 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6818      	ldr	r0, [r3, #0]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	6899      	ldr	r1, [r3, #8]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	f000 f96b 	bl	8001c6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2180      	movs	r1, #128	; 0x80
 80019a2:	01c9      	lsls	r1, r1, #7
 80019a4:	430a      	orrs	r2, r1
 80019a6:	609a      	str	r2, [r3, #8]
      break;
 80019a8:	e03e      	b.n	8001a28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	6859      	ldr	r1, [r3, #4]
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	001a      	movs	r2, r3
 80019b8:	f000 f8de 	bl	8001b78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2150      	movs	r1, #80	; 0x50
 80019c2:	0018      	movs	r0, r3
 80019c4:	f000 f938 	bl	8001c38 <TIM_ITRx_SetConfig>
      break;
 80019c8:	e02e      	b.n	8001a28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6818      	ldr	r0, [r3, #0]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	6859      	ldr	r1, [r3, #4]
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	001a      	movs	r2, r3
 80019d8:	f000 f8fc 	bl	8001bd4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2160      	movs	r1, #96	; 0x60
 80019e2:	0018      	movs	r0, r3
 80019e4:	f000 f928 	bl	8001c38 <TIM_ITRx_SetConfig>
      break;
 80019e8:	e01e      	b.n	8001a28 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	6859      	ldr	r1, [r3, #4]
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	001a      	movs	r2, r3
 80019f8:	f000 f8be 	bl	8001b78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2140      	movs	r1, #64	; 0x40
 8001a02:	0018      	movs	r0, r3
 8001a04:	f000 f918 	bl	8001c38 <TIM_ITRx_SetConfig>
      break;
 8001a08:	e00e      	b.n	8001a28 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	0019      	movs	r1, r3
 8001a14:	0010      	movs	r0, r2
 8001a16:	f000 f90f 	bl	8001c38 <TIM_ITRx_SetConfig>
      break;
 8001a1a:	e005      	b.n	8001a28 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001a1c:	230f      	movs	r3, #15
 8001a1e:	18fb      	adds	r3, r7, r3
 8001a20:	2201      	movs	r2, #1
 8001a22:	701a      	strb	r2, [r3, #0]
      break;
 8001a24:	e000      	b.n	8001a28 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001a26:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	223d      	movs	r2, #61	; 0x3d
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	223c      	movs	r2, #60	; 0x3c
 8001a34:	2100      	movs	r1, #0
 8001a36:	5499      	strb	r1, [r3, r2]

  return status;
 8001a38:	230f      	movs	r3, #15
 8001a3a:	18fb      	adds	r3, r7, r3
 8001a3c:	781b      	ldrb	r3, [r3, #0]
}
 8001a3e:	0018      	movs	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	b004      	add	sp, #16
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	ffff00ff 	.word	0xffff00ff

08001a4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a54:	46c0      	nop			; (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b002      	add	sp, #8
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a64:	46c0      	nop			; (mov r8, r8)
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b002      	add	sp, #8
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a74:	46c0      	nop			; (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b002      	add	sp, #8
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a84:	46c0      	nop			; (mov r8, r8)
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b002      	add	sp, #8
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a2f      	ldr	r2, [pc, #188]	; (8001b5c <TIM_Base_SetConfig+0xd0>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d003      	beq.n	8001aac <TIM_Base_SetConfig+0x20>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a2e      	ldr	r2, [pc, #184]	; (8001b60 <TIM_Base_SetConfig+0xd4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d108      	bne.n	8001abe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2270      	movs	r2, #112	; 0x70
 8001ab0:	4393      	bics	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a26      	ldr	r2, [pc, #152]	; (8001b5c <TIM_Base_SetConfig+0xd0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d013      	beq.n	8001aee <TIM_Base_SetConfig+0x62>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a25      	ldr	r2, [pc, #148]	; (8001b60 <TIM_Base_SetConfig+0xd4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d00f      	beq.n	8001aee <TIM_Base_SetConfig+0x62>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a24      	ldr	r2, [pc, #144]	; (8001b64 <TIM_Base_SetConfig+0xd8>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d00b      	beq.n	8001aee <TIM_Base_SetConfig+0x62>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a23      	ldr	r2, [pc, #140]	; (8001b68 <TIM_Base_SetConfig+0xdc>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d007      	beq.n	8001aee <TIM_Base_SetConfig+0x62>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a22      	ldr	r2, [pc, #136]	; (8001b6c <TIM_Base_SetConfig+0xe0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d003      	beq.n	8001aee <TIM_Base_SetConfig+0x62>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a21      	ldr	r2, [pc, #132]	; (8001b70 <TIM_Base_SetConfig+0xe4>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d108      	bne.n	8001b00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	4a20      	ldr	r2, [pc, #128]	; (8001b74 <TIM_Base_SetConfig+0xe8>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2280      	movs	r2, #128	; 0x80
 8001b04:	4393      	bics	r3, r2
 8001b06:	001a      	movs	r2, r3
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a0c      	ldr	r2, [pc, #48]	; (8001b5c <TIM_Base_SetConfig+0xd0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d00b      	beq.n	8001b46 <TIM_Base_SetConfig+0xba>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a0d      	ldr	r2, [pc, #52]	; (8001b68 <TIM_Base_SetConfig+0xdc>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d007      	beq.n	8001b46 <TIM_Base_SetConfig+0xba>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <TIM_Base_SetConfig+0xe0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d003      	beq.n	8001b46 <TIM_Base_SetConfig+0xba>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a0b      	ldr	r2, [pc, #44]	; (8001b70 <TIM_Base_SetConfig+0xe4>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d103      	bne.n	8001b4e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	691a      	ldr	r2, [r3, #16]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	615a      	str	r2, [r3, #20]
}
 8001b54:	46c0      	nop			; (mov r8, r8)
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b004      	add	sp, #16
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40012c00 	.word	0x40012c00
 8001b60:	40000400 	.word	0x40000400
 8001b64:	40002000 	.word	0x40002000
 8001b68:	40014000 	.word	0x40014000
 8001b6c:	40014400 	.word	0x40014400
 8001b70:	40014800 	.word	0x40014800
 8001b74:	fffffcff 	.word	0xfffffcff

08001b78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	4393      	bics	r3, r2
 8001b92:	001a      	movs	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	22f0      	movs	r2, #240	; 0xf0
 8001ba2:	4393      	bics	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	011b      	lsls	r3, r3, #4
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	220a      	movs	r2, #10
 8001bb4:	4393      	bics	r3, r2
 8001bb6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001bb8:	697a      	ldr	r2, [r7, #20]
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	693a      	ldr	r2, [r7, #16]
 8001bc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	621a      	str	r2, [r3, #32]
}
 8001bcc:	46c0      	nop			; (mov r8, r8)
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b006      	add	sp, #24
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	2210      	movs	r2, #16
 8001be6:	4393      	bics	r3, r2
 8001be8:	001a      	movs	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <TIM_TI2_ConfigInputStage+0x60>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	031b      	lsls	r3, r3, #12
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	22a0      	movs	r2, #160	; 0xa0
 8001c10:	4393      	bics	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	011b      	lsls	r3, r3, #4
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	621a      	str	r2, [r3, #32]
}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	b006      	add	sp, #24
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	ffff0fff 	.word	0xffff0fff

08001c38 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2270      	movs	r2, #112	; 0x70
 8001c4c:	4393      	bics	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	2207      	movs	r2, #7
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	609a      	str	r2, [r3, #8]
}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	46bd      	mov	sp, r7
 8001c66:	b004      	add	sp, #16
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	4a09      	ldr	r2, [pc, #36]	; (8001ca8 <TIM_ETR_SetConfig+0x3c>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	021a      	lsls	r2, r3, #8
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	609a      	str	r2, [r3, #8]
}
 8001ca0:	46c0      	nop			; (mov r8, r8)
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b006      	add	sp, #24
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	ffff00ff 	.word	0xffff00ff

08001cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	223c      	movs	r2, #60	; 0x3c
 8001cba:	5c9b      	ldrb	r3, [r3, r2]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d101      	bne.n	8001cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	e041      	b.n	8001d48 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	223c      	movs	r2, #60	; 0x3c
 8001cc8:	2101      	movs	r1, #1
 8001cca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	223d      	movs	r2, #61	; 0x3d
 8001cd0:	2102      	movs	r1, #2
 8001cd2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2270      	movs	r2, #112	; 0x70
 8001ce8:	4393      	bics	r3, r2
 8001cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a13      	ldr	r2, [pc, #76]	; (8001d50 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d009      	beq.n	8001d1c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a11      	ldr	r2, [pc, #68]	; (8001d54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d004      	beq.n	8001d1c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a10      	ldr	r2, [pc, #64]	; (8001d58 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d10c      	bne.n	8001d36 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2280      	movs	r2, #128	; 0x80
 8001d20:	4393      	bics	r3, r2
 8001d22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	223d      	movs	r2, #61	; 0x3d
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	223c      	movs	r2, #60	; 0x3c
 8001d42:	2100      	movs	r1, #0
 8001d44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	0018      	movs	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	b004      	add	sp, #16
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40012c00 	.word	0x40012c00
 8001d54:	40000400 	.word	0x40000400
 8001d58:	40014000 	.word	0x40014000

08001d5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d64:	46c0      	nop			; (mov r8, r8)
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b002      	add	sp, #8
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d74:	46c0      	nop			; (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b002      	add	sp, #8
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <__libc_init_array>:
 8001d7c:	b570      	push	{r4, r5, r6, lr}
 8001d7e:	2600      	movs	r6, #0
 8001d80:	4d0c      	ldr	r5, [pc, #48]	; (8001db4 <__libc_init_array+0x38>)
 8001d82:	4c0d      	ldr	r4, [pc, #52]	; (8001db8 <__libc_init_array+0x3c>)
 8001d84:	1b64      	subs	r4, r4, r5
 8001d86:	10a4      	asrs	r4, r4, #2
 8001d88:	42a6      	cmp	r6, r4
 8001d8a:	d109      	bne.n	8001da0 <__libc_init_array+0x24>
 8001d8c:	2600      	movs	r6, #0
 8001d8e:	f000 f821 	bl	8001dd4 <_init>
 8001d92:	4d0a      	ldr	r5, [pc, #40]	; (8001dbc <__libc_init_array+0x40>)
 8001d94:	4c0a      	ldr	r4, [pc, #40]	; (8001dc0 <__libc_init_array+0x44>)
 8001d96:	1b64      	subs	r4, r4, r5
 8001d98:	10a4      	asrs	r4, r4, #2
 8001d9a:	42a6      	cmp	r6, r4
 8001d9c:	d105      	bne.n	8001daa <__libc_init_array+0x2e>
 8001d9e:	bd70      	pop	{r4, r5, r6, pc}
 8001da0:	00b3      	lsls	r3, r6, #2
 8001da2:	58eb      	ldr	r3, [r5, r3]
 8001da4:	4798      	blx	r3
 8001da6:	3601      	adds	r6, #1
 8001da8:	e7ee      	b.n	8001d88 <__libc_init_array+0xc>
 8001daa:	00b3      	lsls	r3, r6, #2
 8001dac:	58eb      	ldr	r3, [r5, r3]
 8001dae:	4798      	blx	r3
 8001db0:	3601      	adds	r6, #1
 8001db2:	e7f2      	b.n	8001d9a <__libc_init_array+0x1e>
 8001db4:	08001e1c 	.word	0x08001e1c
 8001db8:	08001e1c 	.word	0x08001e1c
 8001dbc:	08001e1c 	.word	0x08001e1c
 8001dc0:	08001e20 	.word	0x08001e20

08001dc4 <memset>:
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	1882      	adds	r2, r0, r2
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d100      	bne.n	8001dce <memset+0xa>
 8001dcc:	4770      	bx	lr
 8001dce:	7019      	strb	r1, [r3, #0]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	e7f9      	b.n	8001dc8 <memset+0x4>

08001dd4 <_init>:
 8001dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dda:	bc08      	pop	{r3}
 8001ddc:	469e      	mov	lr, r3
 8001dde:	4770      	bx	lr

08001de0 <_fini>:
 8001de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001de6:	bc08      	pop	{r3}
 8001de8:	469e      	mov	lr, r3
 8001dea:	4770      	bx	lr
