
Oleg_Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080032ac  080032ac  000132ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032f0  080032f0  000205e8  2**0
                  CONTENTS
  4 .ARM          00000000  080032f0  080032f0  000205e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032f0  080032f0  000205e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032f0  080032f0  000132f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032f4  080032f4  000132f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005e8  20000000  080032f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  200005e8  080038e0  000205e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d0  080038e0  000206d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000205e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ebf  00000000  00000000  00020611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000177a  00000000  00000000  000284d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  00029c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000780  00000000  00000000  0002a480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a40  00000000  00000000  0002ac00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a411  00000000  00000000  00041640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008368d  00000000  00000000  0004ba51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cf0de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002130  00000000  00000000  000cf130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200005e8 	.word	0x200005e8
 8000128:	00000000 	.word	0x00000000
 800012c:	08003294 	.word	0x08003294

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200005ec 	.word	0x200005ec
 8000148:	08003294 	.word	0x08003294

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <sendCommand>:
	0x28, 0x44, 0x54, 0x54, 0x38,// FD ?
	0x7C, 0x10, 0x38, 0x44, 0x38,// FE ?
	0x48, 0x54, 0x34, 0x14, 0x7C // FF ?
};
void sendCommand(uint8_t command_s)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af02      	add	r7, sp, #8
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
	temp[0] = COMAND;
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <sendCommand+0x30>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
	temp[1] = command_s;
 8000664:	4a07      	ldr	r2, [pc, #28]	; (8000684 <sendCommand+0x30>)
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1,OLED_adress,temp,2,100);
 800066a:	2364      	movs	r3, #100	; 0x64
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	2302      	movs	r3, #2
 8000670:	4a04      	ldr	r2, [pc, #16]	; (8000684 <sendCommand+0x30>)
 8000672:	2178      	movs	r1, #120	; 0x78
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <sendCommand+0x34>)
 8000676:	f001 fd0d 	bl	8002094 <HAL_I2C_Master_Transmit>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000604 	.word	0x20000604
 8000688:	20000674 	.word	0x20000674

0800068c <LCD_Goto>:
	temp[1] = data_s;
	HAL_I2C_Master_Transmit(&hi2c1,OLED_adress,temp,2,100);
}

void LCD_Goto(unsigned char x, unsigned char y)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	460a      	mov	r2, r1
 8000696:	71fb      	strb	r3, [r7, #7]
 8000698:	4613      	mov	r3, r2
 800069a:	71bb      	strb	r3, [r7, #6]
	LCD_X = x;
 800069c:	4a0f      	ldr	r2, [pc, #60]	; (80006dc <LCD_Goto+0x50>)
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	7013      	strb	r3, [r2, #0]
	LCD_Y = y;
 80006a2:	4a0f      	ldr	r2, [pc, #60]	; (80006e0 <LCD_Goto+0x54>)
 80006a4:	79bb      	ldrb	r3, [r7, #6]
 80006a6:	7013      	strb	r3, [r2, #0]
	sendCommand(0xB0 + y);
 80006a8:	79bb      	ldrb	r3, [r7, #6]
 80006aa:	3b50      	subs	r3, #80	; 0x50
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ffd0 	bl	8000654 <sendCommand>
	sendCommand(x & 0xf);
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	f003 030f 	and.w	r3, r3, #15
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff ffc9 	bl	8000654 <sendCommand>
	sendCommand(0x10 | (x >> 4));
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	091b      	lsrs	r3, r3, #4
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	f043 0310 	orr.w	r3, r3, #16
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff ffc0 	bl	8000654 <sendCommand>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	2000060f 	.word	0x2000060f
 80006e0:	20000610 	.word	0x20000610

080006e4 <LCD_Clear>:


void LCD_Clear(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
	unsigned short i;
	unsigned short x=0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	80bb      	strh	r3, [r7, #4]
	unsigned short y=0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	807b      	strh	r3, [r7, #2]
	LCD_Goto(0,0);
 80006f2:	2100      	movs	r1, #0
 80006f4:	2000      	movs	r0, #0
 80006f6:	f7ff ffc9 	bl	800068c <LCD_Goto>

	for (i=0; i<(OLED_BUFFERSIZE); i++) //(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8)
 80006fa:	2300      	movs	r3, #0
 80006fc:	80fb      	strh	r3, [r7, #6]
 80006fe:	e016      	b.n	800072e <LCD_Clear+0x4a>
	{
		LCD_Char(' ');
 8000700:	2020      	movs	r0, #32
 8000702:	f000 f827 	bl	8000754 <LCD_Char>
		x ++;
 8000706:	88bb      	ldrh	r3, [r7, #4]
 8000708:	3301      	adds	r3, #1
 800070a:	80bb      	strh	r3, [r7, #4]
		if(x>OLED_WIDTH)
 800070c:	88bb      	ldrh	r3, [r7, #4]
 800070e:	2b80      	cmp	r3, #128	; 0x80
 8000710:	d90a      	bls.n	8000728 <LCD_Clear+0x44>
		{
			x =0;
 8000712:	2300      	movs	r3, #0
 8000714:	80bb      	strh	r3, [r7, #4]
			y++;
 8000716:	887b      	ldrh	r3, [r7, #2]
 8000718:	3301      	adds	r3, #1
 800071a:	807b      	strh	r3, [r7, #2]
			LCD_Goto(0,y);
 800071c:	887b      	ldrh	r3, [r7, #2]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	4619      	mov	r1, r3
 8000722:	2000      	movs	r0, #0
 8000724:	f7ff ffb2 	bl	800068c <LCD_Goto>
	for (i=0; i<(OLED_BUFFERSIZE); i++) //(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8)
 8000728:	88fb      	ldrh	r3, [r7, #6]
 800072a:	3301      	adds	r3, #1
 800072c:	80fb      	strh	r3, [r7, #6]
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000734:	d3e4      	bcc.n	8000700 <LCD_Clear+0x1c>
		}
	}
	LCD_X =OLED_DEFAULT_SPACE;
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <LCD_Clear+0x68>)
 8000738:	2205      	movs	r2, #5
 800073a:	701a      	strb	r2, [r3, #0]
	LCD_Y =0;
 800073c:	4b04      	ldr	r3, [pc, #16]	; (8000750 <LCD_Clear+0x6c>)
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	2000060f 	.word	0x2000060f
 8000750:	20000610 	.word	0x20000610

08000754 <LCD_Char>:

void LCD_Char(unsigned int c)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af02      	add	r7, sp, #8
 800075a:	6078      	str	r0, [r7, #4]
	unsigned char x = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	73fb      	strb	r3, [r7, #15]
	temp_char[0] = 0x40;
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <LCD_Char+0x78>)
 8000762:	2240      	movs	r2, #64	; 0x40
 8000764:	701a      	strb	r2, [r3, #0]
	for (x=0; x<5; x++)
 8000766:	2300      	movs	r3, #0
 8000768:	73fb      	strb	r3, [r7, #15]
 800076a:	e00e      	b.n	800078a <LCD_Char+0x36>
	{
		temp_char[x+1] = LCD_Buffer[c*5+x];
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	4613      	mov	r3, r2
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	441a      	add	r2, r3
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	441a      	add	r2, r3
 8000778:	7bfb      	ldrb	r3, [r7, #15]
 800077a:	3301      	adds	r3, #1
 800077c:	4914      	ldr	r1, [pc, #80]	; (80007d0 <LCD_Char+0x7c>)
 800077e:	5c89      	ldrb	r1, [r1, r2]
 8000780:	4a12      	ldr	r2, [pc, #72]	; (80007cc <LCD_Char+0x78>)
 8000782:	54d1      	strb	r1, [r2, r3]
	for (x=0; x<5; x++)
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	3301      	adds	r3, #1
 8000788:	73fb      	strb	r3, [r7, #15]
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	2b04      	cmp	r3, #4
 800078e:	d9ed      	bls.n	800076c <LCD_Char+0x18>
	}
	temp_char[6] = 0;
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <LCD_Char+0x78>)
 8000792:	2200      	movs	r2, #0
 8000794:	719a      	strb	r2, [r3, #6]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_adress, temp_char, 7,1000);
 8000796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2307      	movs	r3, #7
 800079e:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <LCD_Char+0x78>)
 80007a0:	2178      	movs	r1, #120	; 0x78
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <LCD_Char+0x80>)
 80007a4:	f001 fc76 	bl	8002094 <HAL_I2C_Master_Transmit>

	LCD_X += 8;
 80007a8:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <LCD_Char+0x84>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	3308      	adds	r3, #8
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <LCD_Char+0x84>)
 80007b2:	701a      	strb	r2, [r3, #0]
	if(LCD_X>OLED_WIDTH)
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <LCD_Char+0x84>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b80      	cmp	r3, #128	; 0x80
 80007ba:	d902      	bls.n	80007c2 <LCD_Char+0x6e>
	{
		LCD_X = OLED_DEFAULT_SPACE;
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <LCD_Char+0x84>)
 80007be:	2205      	movs	r2, #5
 80007c0:	701a      	strb	r2, [r3, #0]
	}
}
 80007c2:	bf00      	nop
 80007c4:	3710      	adds	r7, #16
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000608 	.word	0x20000608
 80007d0:	20000000 	.word	0x20000000
 80007d4:	20000674 	.word	0x20000674
 80007d8:	2000060f 	.word	0x2000060f

080007dc <OLED_string>:


void OLED_string(char *string)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	while(*string != '\0')
 80007e4:	e007      	b.n	80007f6 <OLED_string+0x1a>
	{
		LCD_Char(*string);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ffb2 	bl	8000754 <LCD_Char>
		string++;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3301      	adds	r3, #1
 80007f4:	607b      	str	r3, [r7, #4]
	while(*string != '\0')
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d1f3      	bne.n	80007e6 <OLED_string+0xa>
	}
}
 80007fe:	bf00      	nop
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <OLED_init>:
	}
}


void OLED_init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
		// Turn display off
		sendCommand(OLED_DISPLAYOFF);
 800080c:	20ae      	movs	r0, #174	; 0xae
 800080e:	f7ff ff21 	bl	8000654 <sendCommand>

		sendCommand(OLED_SETDISPLAYCLOCKDIV);
 8000812:	20d5      	movs	r0, #213	; 0xd5
 8000814:	f7ff ff1e 	bl	8000654 <sendCommand>
		sendCommand(0x80);
 8000818:	2080      	movs	r0, #128	; 0x80
 800081a:	f7ff ff1b 	bl	8000654 <sendCommand>

		sendCommand(OLED_SETMULTIPLEX);
 800081e:	20a8      	movs	r0, #168	; 0xa8
 8000820:	f7ff ff18 	bl	8000654 <sendCommand>
		sendCommand(0x1F);//128x32
 8000824:	201f      	movs	r0, #31
 8000826:	f7ff ff15 	bl	8000654 <sendCommand>
		//sendCommand(0x3F);//128x64

		sendCommand(OLED_SETDISPLAYOFFSET);
 800082a:	20d3      	movs	r0, #211	; 0xd3
 800082c:	f7ff ff12 	bl	8000654 <sendCommand>
		sendCommand(0x00);
 8000830:	2000      	movs	r0, #0
 8000832:	f7ff ff0f 	bl	8000654 <sendCommand>

		sendCommand(OLED_SETSTARTLINE | 0x00);//0
 8000836:	2040      	movs	r0, #64	; 0x40
 8000838:	f7ff ff0c 	bl	8000654 <sendCommand>

		// We use internal charge pump
		sendCommand(OLED_CHARGEPUMP);
 800083c:	208d      	movs	r0, #141	; 0x8d
 800083e:	f7ff ff09 	bl	8000654 <sendCommand>
		sendCommand(0x14);
 8000842:	2014      	movs	r0, #20
 8000844:	f7ff ff06 	bl	8000654 <sendCommand>

		// Horizontal memory mode
		sendCommand(OLED_MEMORYMODE);
 8000848:	2020      	movs	r0, #32
 800084a:	f7ff ff03 	bl	8000654 <sendCommand>
		sendCommand(0x00);
 800084e:	2000      	movs	r0, #0
 8000850:	f7ff ff00 	bl	8000654 <sendCommand>

		sendCommand(OLED_SEGREMAP | 0x1);
 8000854:	20a1      	movs	r0, #161	; 0xa1
 8000856:	f7ff fefd 	bl	8000654 <sendCommand>

		sendCommand(OLED_COMSCANDEC);
 800085a:	20c8      	movs	r0, #200	; 0xc8
 800085c:	f7ff fefa 	bl	8000654 <sendCommand>

		sendCommand(OLED_SETCOMPINS);
 8000860:	20da      	movs	r0, #218	; 0xda
 8000862:	f7ff fef7 	bl	8000654 <sendCommand>
		sendCommand(0x02);//128x32
 8000866:	2002      	movs	r0, #2
 8000868:	f7ff fef4 	bl	8000654 <sendCommand>
		//sendCommand(0x12);//128x64

		// Max contrast
		sendCommand(OLED_SETCONTRAST);
 800086c:	2081      	movs	r0, #129	; 0x81
 800086e:	f7ff fef1 	bl	8000654 <sendCommand>
		//sendCommand(0x0F);//0xCF
		sendCommand(0xCF);//0xCF
 8000872:	20cf      	movs	r0, #207	; 0xcf
 8000874:	f7ff feee 	bl	8000654 <sendCommand>

		sendCommand(OLED_SETPRECHARGE);
 8000878:	20d9      	movs	r0, #217	; 0xd9
 800087a:	f7ff feeb 	bl	8000654 <sendCommand>
		sendCommand(0xF1);
 800087e:	20f1      	movs	r0, #241	; 0xf1
 8000880:	f7ff fee8 	bl	8000654 <sendCommand>

		sendCommand(OLED_SETVCOMDETECT);
 8000884:	20db      	movs	r0, #219	; 0xdb
 8000886:	f7ff fee5 	bl	8000654 <sendCommand>
		//sendCommand(0x10);//0x40
		sendCommand(0x40);//0x40
 800088a:	2040      	movs	r0, #64	; 0x40
 800088c:	f7ff fee2 	bl	8000654 <sendCommand>

		sendCommand(OLED_DISPLAYALLON_RESUME);
 8000890:	20a4      	movs	r0, #164	; 0xa4
 8000892:	f7ff fedf 	bl	8000654 <sendCommand>

		// Non-inverted display
		sendCommand(OLED_NORMALDISPLAY);
 8000896:	20a6      	movs	r0, #166	; 0xa6
 8000898:	f7ff fedc 	bl	8000654 <sendCommand>

		// Turn display back on
		sendCommand(OLED_DISPLAYON);
 800089c:	20af      	movs	r0, #175	; 0xaf
 800089e:	f7ff fed9 	bl	8000654 <sendCommand>
};
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <map>:
I2C_HandleTypeDef hi2c1;

/* USER CODE BEGIN PV */
char lcd_x=0, lcd_y=0;
int map(float val, float I_Min, float I_Max, float O_Min, float O_Max)
	{
 80008a6:	b5b0      	push	{r4, r5, r7, lr}
 80008a8:	b084      	sub	sp, #16
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	60f8      	str	r0, [r7, #12]
 80008ae:	60b9      	str	r1, [r7, #8]
 80008b0:	607a      	str	r2, [r7, #4]
 80008b2:	603b      	str	r3, [r7, #0]
		return(((val-I_Min)*((O_Max-O_Min)/(I_Max-I_Min)))+O_Min);
 80008b4:	68b9      	ldr	r1, [r7, #8]
 80008b6:	68f8      	ldr	r0, [r7, #12]
 80008b8:	f7ff fc4c 	bl	8000154 <__aeabi_fsub>
 80008bc:	4603      	mov	r3, r0
 80008be:	461c      	mov	r4, r3
 80008c0:	6839      	ldr	r1, [r7, #0]
 80008c2:	6a38      	ldr	r0, [r7, #32]
 80008c4:	f7ff fc46 	bl	8000154 <__aeabi_fsub>
 80008c8:	4603      	mov	r3, r0
 80008ca:	461d      	mov	r5, r3
 80008cc:	68b9      	ldr	r1, [r7, #8]
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff fc40 	bl	8000154 <__aeabi_fsub>
 80008d4:	4603      	mov	r3, r0
 80008d6:	4619      	mov	r1, r3
 80008d8:	4628      	mov	r0, r5
 80008da:	f7ff fdf9 	bl	80004d0 <__aeabi_fdiv>
 80008de:	4603      	mov	r3, r0
 80008e0:	4619      	mov	r1, r3
 80008e2:	4620      	mov	r0, r4
 80008e4:	f7ff fd40 	bl	8000368 <__aeabi_fmul>
 80008e8:	4603      	mov	r3, r0
 80008ea:	6839      	ldr	r1, [r7, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fc33 	bl	8000158 <__addsf3>
 80008f2:	4603      	mov	r3, r0
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fe87 	bl	8000608 <__aeabi_f2iz>
 80008fa:	4603      	mov	r3, r0
   }
 80008fc:	4618      	mov	r0, r3
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bdb0      	pop	{r4, r5, r7, pc}

08000904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800090a:	f000 fb39 	bl	8000f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800090e:	f000 f8cb 	bl	8000aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000912:	f000 f9cb 	bl	8000cac <MX_GPIO_Init>
  MX_ADC1_Init();
 8000916:	f000 f91d 	bl	8000b54 <MX_ADC1_Init>
  MX_ADC2_Init();
 800091a:	f000 f959 	bl	8000bd0 <MX_ADC2_Init>
  MX_I2C1_Init();
 800091e:	f000 f995 	bl	8000c4c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000922:	2064      	movs	r0, #100	; 0x64
 8000924:	f000 fb8e 	bl	8001044 <HAL_Delay>
  OLED_init();
 8000928:	f7ff ff6e 	bl	8000808 <OLED_init>
  LCD_Clear();
 800092c:	f7ff feda 	bl	80006e4 <LCD_Clear>
  LCD_Goto(0, 0);
 8000930:	2100      	movs	r1, #0
 8000932:	2000      	movs	r0, #0
 8000934:	f7ff feaa 	bl	800068c <LCD_Goto>
  char* text = "[]";
 8000938:	4b54      	ldr	r3, [pc, #336]	; (8000a8c <main+0x188>)
 800093a:	617b      	str	r3, [r7, #20]
  OLED_string(text);
 800093c:	6978      	ldr	r0, [r7, #20]
 800093e:	f7ff ff4d 	bl	80007dc <OLED_string>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8000942:	4853      	ldr	r0, [pc, #332]	; (8000a90 <main+0x18c>)
 8000944:	f000 fc7a 	bl	800123c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000948:	2164      	movs	r1, #100	; 0x64
 800094a:	4851      	ldr	r0, [pc, #324]	; (8000a90 <main+0x18c>)
 800094c:	f000 fd50 	bl	80013f0 <HAL_ADC_PollForConversion>
	  int val1 = HAL_ADC_GetValue(&hadc1);
 8000950:	484f      	ldr	r0, [pc, #316]	; (8000a90 <main+0x18c>)
 8000952:	f000 fe53 	bl	80015fc <HAL_ADC_GetValue>
 8000956:	4603      	mov	r3, r0
 8000958:	613b      	str	r3, [r7, #16]
	  HAL_ADC_Stop(&hadc1);
 800095a:	484d      	ldr	r0, [pc, #308]	; (8000a90 <main+0x18c>)
 800095c:	f000 fd1c 	bl	8001398 <HAL_ADC_Stop>
	  HAL_Delay(10);
 8000960:	200a      	movs	r0, #10
 8000962:	f000 fb6f 	bl	8001044 <HAL_Delay>

	  HAL_ADC_Start(&hadc2);
 8000966:	484b      	ldr	r0, [pc, #300]	; (8000a94 <main+0x190>)
 8000968:	f000 fc68 	bl	800123c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc2, 100);
 800096c:	2164      	movs	r1, #100	; 0x64
 800096e:	4849      	ldr	r0, [pc, #292]	; (8000a94 <main+0x190>)
 8000970:	f000 fd3e 	bl	80013f0 <HAL_ADC_PollForConversion>
	  int val2 = HAL_ADC_GetValue(&hadc2);
 8000974:	4847      	ldr	r0, [pc, #284]	; (8000a94 <main+0x190>)
 8000976:	f000 fe41 	bl	80015fc <HAL_ADC_GetValue>
 800097a:	4603      	mov	r3, r0
 800097c:	60fb      	str	r3, [r7, #12]
	  HAL_ADC_Stop(&hadc2);
 800097e:	4845      	ldr	r0, [pc, #276]	; (8000a94 <main+0x190>)
 8000980:	f000 fd0a 	bl	8001398 <HAL_ADC_Stop>
	  HAL_Delay(10);
 8000984:	200a      	movs	r0, #10
 8000986:	f000 fb5d 	bl	8001044 <HAL_Delay>

	  int x = map(val1, 0, 4095, 0, 100);
 800098a:	6938      	ldr	r0, [r7, #16]
 800098c:	f7ff fc98 	bl	80002c0 <__aeabi_i2f>
 8000990:	4b41      	ldr	r3, [pc, #260]	; (8000a98 <main+0x194>)
 8000992:	9300      	str	r3, [sp, #0]
 8000994:	f04f 0300 	mov.w	r3, #0
 8000998:	4a40      	ldr	r2, [pc, #256]	; (8000a9c <main+0x198>)
 800099a:	f04f 0100 	mov.w	r1, #0
 800099e:	f7ff ff82 	bl	80008a6 <map>
 80009a2:	60b8      	str	r0, [r7, #8]
	  int y = map(val2, 0, 4095, 0, 100);
 80009a4:	68f8      	ldr	r0, [r7, #12]
 80009a6:	f7ff fc8b 	bl	80002c0 <__aeabi_i2f>
 80009aa:	4b3b      	ldr	r3, [pc, #236]	; (8000a98 <main+0x194>)
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	f04f 0300 	mov.w	r3, #0
 80009b2:	4a3a      	ldr	r2, [pc, #232]	; (8000a9c <main+0x198>)
 80009b4:	f04f 0100 	mov.w	r1, #0
 80009b8:	f7ff ff75 	bl	80008a6 <map>
 80009bc:	6078      	str	r0, [r7, #4]
	  OLED_num_to_str(x, 4);
	  LCD_Goto(0, 1);
	  OLED_num_to_str(y, 4);
	  HAL_Delay(200);
*/
	  if(x==100)
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	2b64      	cmp	r3, #100	; 0x64
 80009c2:	d115      	bne.n	80009f0 <main+0xec>
	  {
	  	lcd_x+=8;
 80009c4:	4b36      	ldr	r3, [pc, #216]	; (8000aa0 <main+0x19c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	3308      	adds	r3, #8
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	4b34      	ldr	r3, [pc, #208]	; (8000aa0 <main+0x19c>)
 80009ce:	701a      	strb	r2, [r3, #0]
	  	LCD_Clear();
 80009d0:	f7ff fe88 	bl	80006e4 <LCD_Clear>
	  	LCD_Goto(lcd_x, lcd_y);
 80009d4:	4b32      	ldr	r3, [pc, #200]	; (8000aa0 <main+0x19c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	4a32      	ldr	r2, [pc, #200]	; (8000aa4 <main+0x1a0>)
 80009da:	7812      	ldrb	r2, [r2, #0]
 80009dc:	4611      	mov	r1, r2
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fe54 	bl	800068c <LCD_Goto>
	  	OLED_string(text);
 80009e4:	6978      	ldr	r0, [r7, #20]
 80009e6:	f7ff fef9 	bl	80007dc <OLED_string>
	  	HAL_Delay(250);
 80009ea:	20fa      	movs	r0, #250	; 0xfa
 80009ec:	f000 fb2a 	bl	8001044 <HAL_Delay>
	  }
	  if(x==0)
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d115      	bne.n	8000a22 <main+0x11e>
	  {
	  	lcd_x-=8;
 80009f6:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <main+0x19c>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	3b08      	subs	r3, #8
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <main+0x19c>)
 8000a00:	701a      	strb	r2, [r3, #0]
	  	LCD_Clear();
 8000a02:	f7ff fe6f 	bl	80006e4 <LCD_Clear>
	  	LCD_Goto(lcd_x, lcd_y);
 8000a06:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <main+0x19c>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	4a26      	ldr	r2, [pc, #152]	; (8000aa4 <main+0x1a0>)
 8000a0c:	7812      	ldrb	r2, [r2, #0]
 8000a0e:	4611      	mov	r1, r2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fe3b 	bl	800068c <LCD_Goto>
	  	OLED_string(text);
 8000a16:	6978      	ldr	r0, [r7, #20]
 8000a18:	f7ff fee0 	bl	80007dc <OLED_string>
	  	HAL_Delay(250);
 8000a1c:	20fa      	movs	r0, #250	; 0xfa
 8000a1e:	f000 fb11 	bl	8001044 <HAL_Delay>
	  }
	  if(y==100)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b64      	cmp	r3, #100	; 0x64
 8000a26:	d115      	bne.n	8000a54 <main+0x150>
	  {
		  lcd_y++;
 8000a28:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <main+0x1a0>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	b2da      	uxtb	r2, r3
 8000a30:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <main+0x1a0>)
 8000a32:	701a      	strb	r2, [r3, #0]
		  LCD_Clear();
 8000a34:	f7ff fe56 	bl	80006e4 <LCD_Clear>
		  LCD_Goto(lcd_x, lcd_y);
 8000a38:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <main+0x19c>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4a19      	ldr	r2, [pc, #100]	; (8000aa4 <main+0x1a0>)
 8000a3e:	7812      	ldrb	r2, [r2, #0]
 8000a40:	4611      	mov	r1, r2
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fe22 	bl	800068c <LCD_Goto>
		  OLED_string(text);
 8000a48:	6978      	ldr	r0, [r7, #20]
 8000a4a:	f7ff fec7 	bl	80007dc <OLED_string>
		  HAL_Delay(250);
 8000a4e:	20fa      	movs	r0, #250	; 0xfa
 8000a50:	f000 faf8 	bl	8001044 <HAL_Delay>
	  }
	  if(y==0)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	f47f af73 	bne.w	8000942 <main+0x3e>
	  {
	  	lcd_y--;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <main+0x1a0>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	3b01      	subs	r3, #1
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <main+0x1a0>)
 8000a66:	701a      	strb	r2, [r3, #0]
	  	LCD_Clear();
 8000a68:	f7ff fe3c 	bl	80006e4 <LCD_Clear>
	  	LCD_Goto(lcd_x, lcd_y);
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <main+0x19c>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	4a0c      	ldr	r2, [pc, #48]	; (8000aa4 <main+0x1a0>)
 8000a72:	7812      	ldrb	r2, [r2, #0]
 8000a74:	4611      	mov	r1, r2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fe08 	bl	800068c <LCD_Goto>
	    OLED_string(text);
 8000a7c:	6978      	ldr	r0, [r7, #20]
 8000a7e:	f7ff fead 	bl	80007dc <OLED_string>
	  	HAL_Delay(250);
 8000a82:	20fa      	movs	r0, #250	; 0xfa
 8000a84:	f000 fade 	bl	8001044 <HAL_Delay>
  {
 8000a88:	e75b      	b.n	8000942 <main+0x3e>
 8000a8a:	bf00      	nop
 8000a8c:	080032ac 	.word	0x080032ac
 8000a90:	20000614 	.word	0x20000614
 8000a94:	20000644 	.word	0x20000644
 8000a98:	42c80000 	.word	0x42c80000
 8000a9c:	457ff000 	.word	0x457ff000
 8000aa0:	200006c8 	.word	0x200006c8
 8000aa4:	200006c9 	.word	0x200006c9

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b094      	sub	sp, #80	; 0x50
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ab2:	2228      	movs	r2, #40	; 0x28
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f002 fbe4 	bl	8003284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000adc:	2301      	movs	r3, #1
 8000ade:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae0:	2310      	movs	r3, #16
 8000ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000aec:	2300      	movs	r3, #0
 8000aee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000af4:	4618      	mov	r0, r3
 8000af6:	f001 fe25 	bl	8002744 <HAL_RCC_OscConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000b00:	f000 f90e 	bl	8000d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b04:	230f      	movs	r3, #15
 8000b06:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f002 f892 	bl	8002c48 <HAL_RCC_ClockConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000b2a:	f000 f8f9 	bl	8000d20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000b32:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b36:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f002 fa12 	bl	8002f64 <HAL_RCCEx_PeriphCLKConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000b46:	f000 f8eb 	bl	8000d20 <Error_Handler>
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	3750      	adds	r7, #80	; 0x50
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <MX_ADC1_Init+0x74>)
 8000b66:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <MX_ADC1_Init+0x78>)
 8000b68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <MX_ADC1_Init+0x74>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <MX_ADC1_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_ADC1_Init+0x74>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <MX_ADC1_Init+0x74>)
 8000b7e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b82:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b84:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <MX_ADC1_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_ADC1_Init+0x74>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <MX_ADC1_Init+0x74>)
 8000b92:	f000 fa7b 	bl	800108c <HAL_ADC_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000b9c:	f000 f8c0 	bl	8000d20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_ADC1_Init+0x74>)
 8000bb2:	f000 fd2f 	bl	8001614 <HAL_ADC_ConfigChannel>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000bbc:	f000 f8b0 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000614 	.word	0x20000614
 8000bcc:	40012400 	.word	0x40012400

08000bd0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <MX_ADC2_Init+0x74>)
 8000be2:	4a19      	ldr	r2, [pc, #100]	; (8000c48 <MX_ADC2_Init+0x78>)
 8000be4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <MX_ADC2_Init+0x74>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <MX_ADC2_Init+0x74>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_ADC2_Init+0x74>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <MX_ADC2_Init+0x74>)
 8000bfa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000bfe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c00:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <MX_ADC2_Init+0x74>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_ADC2_Init+0x74>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <MX_ADC2_Init+0x74>)
 8000c0e:	f000 fa3d 	bl	800108c <HAL_ADC_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000c18:	f000 f882 	bl	8000d20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c20:	2301      	movs	r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_ADC2_Init+0x74>)
 8000c2e:	f000 fcf1 	bl	8001614 <HAL_ADC_ConfigChannel>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000c38:	f000 f872 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000644 	.word	0x20000644
 8000c48:	40012800 	.word	0x40012800

08000c4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <MX_I2C1_Init+0x54>)
 8000c52:	4a14      	ldr	r2, [pc, #80]	; (8000ca4 <MX_I2C1_Init+0x58>)
 8000c54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_I2C1_Init+0x54>)
 8000c58:	4a13      	ldr	r2, [pc, #76]	; (8000ca8 <MX_I2C1_Init+0x5c>)
 8000c5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_16_9;
 8000c5c:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <MX_I2C1_Init+0x54>)
 8000c5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c62:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c64:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_I2C1_Init+0x54>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <MX_I2C1_Init+0x54>)
 8000c6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <MX_I2C1_Init+0x54>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_I2C1_Init+0x54>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <MX_I2C1_Init+0x54>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_I2C1_Init+0x54>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_I2C1_Init+0x54>)
 8000c8c:	f001 f8be 	bl	8001e0c <HAL_I2C_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000c96:	f000 f843 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000674 	.word	0x20000674
 8000ca4:	40005400 	.word	0x40005400
 8000ca8:	00061a80 	.word	0x00061a80

08000cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_GPIO_Init+0x70>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	4a19      	ldr	r2, [pc, #100]	; (8000d1c <MX_GPIO_Init+0x70>)
 8000cb8:	f043 0310 	orr.w	r3, r3, #16
 8000cbc:	6193      	str	r3, [r2, #24]
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <MX_GPIO_Init+0x70>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	f003 0310 	and.w	r3, r3, #16
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_GPIO_Init+0x70>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	4a13      	ldr	r2, [pc, #76]	; (8000d1c <MX_GPIO_Init+0x70>)
 8000cd0:	f043 0320 	orr.w	r3, r3, #32
 8000cd4:	6193      	str	r3, [r2, #24]
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_GPIO_Init+0x70>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f003 0320 	and.w	r3, r3, #32
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <MX_GPIO_Init+0x70>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	4a0d      	ldr	r2, [pc, #52]	; (8000d1c <MX_GPIO_Init+0x70>)
 8000ce8:	f043 0304 	orr.w	r3, r3, #4
 8000cec:	6193      	str	r3, [r2, #24]
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <MX_GPIO_Init+0x70>)
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <MX_GPIO_Init+0x70>)
 8000cfc:	699b      	ldr	r3, [r3, #24]
 8000cfe:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <MX_GPIO_Init+0x70>)
 8000d00:	f043 0308 	orr.w	r3, r3, #8
 8000d04:	6193      	str	r3, [r2, #24]
 8000d06:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <MX_GPIO_Init+0x70>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	f003 0308 	and.w	r3, r3, #8
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]

}
 8000d12:	bf00      	nop
 8000d14:	3714      	adds	r7, #20
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	40021000 	.word	0x40021000

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <Error_Handler+0x8>
	...

08000d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	4a14      	ldr	r2, [pc, #80]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6193      	str	r3, [r2, #24]
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d40:	699b      	ldr	r3, [r3, #24]
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d54:	61d3      	str	r3, [r2, #28]
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_MspInit+0x5c>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d62:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <HAL_MspInit+0x60>)
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <HAL_MspInit+0x60>)
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40010000 	.word	0x40010000

08000d90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0318 	add.w	r3, r7, #24
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a28      	ldr	r2, [pc, #160]	; (8000e4c <HAL_ADC_MspInit+0xbc>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d122      	bne.n	8000df6 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000db0:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <HAL_ADC_MspInit+0xc0>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4a26      	ldr	r2, [pc, #152]	; (8000e50 <HAL_ADC_MspInit+0xc0>)
 8000db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dba:	6193      	str	r3, [r2, #24]
 8000dbc:	4b24      	ldr	r3, [pc, #144]	; (8000e50 <HAL_ADC_MspInit+0xc0>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <HAL_ADC_MspInit+0xc0>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	4a20      	ldr	r2, [pc, #128]	; (8000e50 <HAL_ADC_MspInit+0xc0>)
 8000dce:	f043 0304 	orr.w	r3, r3, #4
 8000dd2:	6193      	str	r3, [r2, #24]
 8000dd4:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <HAL_ADC_MspInit+0xc0>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000de0:	2301      	movs	r3, #1
 8000de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000de4:	2303      	movs	r3, #3
 8000de6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	f107 0318 	add.w	r3, r7, #24
 8000dec:	4619      	mov	r1, r3
 8000dee:	4819      	ldr	r0, [pc, #100]	; (8000e54 <HAL_ADC_MspInit+0xc4>)
 8000df0:	f000 fe88 	bl	8001b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000df4:	e026      	b.n	8000e44 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a17      	ldr	r2, [pc, #92]	; (8000e58 <HAL_ADC_MspInit+0xc8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d121      	bne.n	8000e44 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <HAL_ADC_MspInit+0xc0>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <HAL_ADC_MspInit+0xc0>)
 8000e06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e0a:	6193      	str	r3, [r2, #24]
 8000e0c:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_ADC_MspInit+0xc0>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <HAL_ADC_MspInit+0xc0>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a0c      	ldr	r2, [pc, #48]	; (8000e50 <HAL_ADC_MspInit+0xc0>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_ADC_MspInit+0xc0>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e30:	2302      	movs	r3, #2
 8000e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e34:	2303      	movs	r3, #3
 8000e36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	f107 0318 	add.w	r3, r7, #24
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <HAL_ADC_MspInit+0xc4>)
 8000e40:	f000 fe60 	bl	8001b04 <HAL_GPIO_Init>
}
 8000e44:	bf00      	nop
 8000e46:	3728      	adds	r7, #40	; 0x28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40012400 	.word	0x40012400
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40010800 	.word	0x40010800
 8000e58:	40012800 	.word	0x40012800

08000e5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0310 	add.w	r3, r7, #16
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a15      	ldr	r2, [pc, #84]	; (8000ecc <HAL_I2C_MspInit+0x70>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d123      	bne.n	8000ec4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <HAL_I2C_MspInit+0x74>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a13      	ldr	r2, [pc, #76]	; (8000ed0 <HAL_I2C_MspInit+0x74>)
 8000e82:	f043 0308 	orr.w	r3, r3, #8
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_I2C_MspInit+0x74>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0308 	and.w	r3, r3, #8
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e94:	23c0      	movs	r3, #192	; 0xc0
 8000e96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e98:	2312      	movs	r3, #18
 8000e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480b      	ldr	r0, [pc, #44]	; (8000ed4 <HAL_I2C_MspInit+0x78>)
 8000ea8:	f000 fe2c 	bl	8001b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <HAL_I2C_MspInit+0x74>)
 8000eae:	69db      	ldr	r3, [r3, #28]
 8000eb0:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <HAL_I2C_MspInit+0x74>)
 8000eb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb6:	61d3      	str	r3, [r2, #28]
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_I2C_MspInit+0x74>)
 8000eba:	69db      	ldr	r3, [r3, #28]
 8000ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ec4:	bf00      	nop
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40005400 	.word	0x40005400
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40010c00 	.word	0x40010c00

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <NMI_Handler+0x4>

08000ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <BusFault_Handler+0x4>

08000ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <UsageFault_Handler+0x4>

08000ef6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr

08000f02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr

08000f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr

08000f1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1e:	f000 f875 	bl	800100c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
	...

08000f34 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/

    bl  SystemInit
 8000f34:	f7ff fff7 	bl	8000f26 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f38:	480b      	ldr	r0, [pc, #44]	; (8000f68 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f3a:	490c      	ldr	r1, [pc, #48]	; (8000f6c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f3c:	4a0c      	ldr	r2, [pc, #48]	; (8000f70 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f40:	e002      	b.n	8000f48 <LoopCopyDataInit>

08000f42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f46:	3304      	adds	r3, #4

08000f48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f4c:	d3f9      	bcc.n	8000f42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4e:	4a09      	ldr	r2, [pc, #36]	; (8000f74 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f50:	4c09      	ldr	r4, [pc, #36]	; (8000f78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f54:	e001      	b.n	8000f5a <LoopFillZerobss>

08000f56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f58:	3204      	adds	r2, #4

08000f5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f5c:	d3fb      	bcc.n	8000f56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f5e:	f002 f96d 	bl	800323c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f62:	f7ff fccf 	bl	8000904 <main>
  bx lr
 8000f66:	4770      	bx	lr
  ldr r0, =_sdata
 8000f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f6c:	200005e8 	.word	0x200005e8
  ldr r2, =_sidata
 8000f70:	080032f8 	.word	0x080032f8
  ldr r2, =_sbss
 8000f74:	200005e8 	.word	0x200005e8
  ldr r4, =_ebss
 8000f78:	200006d0 	.word	0x200006d0

08000f7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f7c:	e7fe      	b.n	8000f7c <ADC1_2_IRQHandler>
	...

08000f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f84:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <HAL_Init+0x28>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <HAL_Init+0x28>)
 8000f8a:	f043 0310 	orr.w	r3, r3, #16
 8000f8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f90:	2003      	movs	r0, #3
 8000f92:	f000 fd83 	bl	8001a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f96:	200f      	movs	r0, #15
 8000f98:	f000 f808 	bl	8000fac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f9c:	f7ff fec6 	bl	8000d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40022000 	.word	0x40022000

08000fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <HAL_InitTick+0x54>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_InitTick+0x58>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 fd8d 	bl	8001aea <HAL_SYSTICK_Config>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00e      	b.n	8000ff8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d80a      	bhi.n	8000ff6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	6879      	ldr	r1, [r7, #4]
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f000 fd63 	bl	8001ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fec:	4a06      	ldr	r2, [pc, #24]	; (8001008 <HAL_InitTick+0x5c>)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e000      	b.n	8000ff8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200005dc 	.word	0x200005dc
 8001004:	200005e4 	.word	0x200005e4
 8001008:	200005e0 	.word	0x200005e0

0800100c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <HAL_IncTick+0x1c>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <HAL_IncTick+0x20>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4413      	add	r3, r2
 800101c:	4a03      	ldr	r2, [pc, #12]	; (800102c <HAL_IncTick+0x20>)
 800101e:	6013      	str	r3, [r2, #0]
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr
 8001028:	200005e4 	.word	0x200005e4
 800102c:	200006cc 	.word	0x200006cc

08001030 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return uwTick;
 8001034:	4b02      	ldr	r3, [pc, #8]	; (8001040 <HAL_GetTick+0x10>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	bc80      	pop	{r7}
 800103e:	4770      	bx	lr
 8001040:	200006cc 	.word	0x200006cc

08001044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800104c:	f7ff fff0 	bl	8001030 <HAL_GetTick>
 8001050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800105c:	d005      	beq.n	800106a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_Delay+0x44>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4413      	add	r3, r2
 8001068:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800106a:	bf00      	nop
 800106c:	f7ff ffe0 	bl	8001030 <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	429a      	cmp	r2, r3
 800107a:	d8f7      	bhi.n	800106c <HAL_Delay+0x28>
  {
  }
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200005e4 	.word	0x200005e4

0800108c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001094:	2300      	movs	r3, #0
 8001096:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001098:	2300      	movs	r3, #0
 800109a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e0be      	b.n	800122c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d109      	bne.n	80010d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff fe60 	bl	8000d90 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 fbf1 	bl	80018b8 <ADC_ConversionStop_Disable>
 80010d6:	4603      	mov	r3, r0
 80010d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010de:	f003 0310 	and.w	r3, r3, #16
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f040 8099 	bne.w	800121a <HAL_ADC_Init+0x18e>
 80010e8:	7dfb      	ldrb	r3, [r7, #23]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f040 8095 	bne.w	800121a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010f8:	f023 0302 	bic.w	r3, r3, #2
 80010fc:	f043 0202 	orr.w	r2, r3, #2
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800110c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	7b1b      	ldrb	r3, [r3, #12]
 8001112:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001114:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	4313      	orrs	r3, r2
 800111a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001124:	d003      	beq.n	800112e <HAL_ADC_Init+0xa2>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d102      	bne.n	8001134 <HAL_ADC_Init+0xa8>
 800112e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001132:	e000      	b.n	8001136 <HAL_ADC_Init+0xaa>
 8001134:	2300      	movs	r3, #0
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	7d1b      	ldrb	r3, [r3, #20]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d119      	bne.n	8001178 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	7b1b      	ldrb	r3, [r3, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d109      	bne.n	8001160 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	3b01      	subs	r3, #1
 8001152:	035a      	lsls	r2, r3, #13
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	e00b      	b.n	8001178 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001164:	f043 0220 	orr.w	r2, r3, #32
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001170:	f043 0201 	orr.w	r2, r3, #1
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	430a      	orrs	r2, r1
 800118a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	4b28      	ldr	r3, [pc, #160]	; (8001234 <HAL_ADC_Init+0x1a8>)
 8001194:	4013      	ands	r3, r2
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	6812      	ldr	r2, [r2, #0]
 800119a:	68b9      	ldr	r1, [r7, #8]
 800119c:	430b      	orrs	r3, r1
 800119e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011a8:	d003      	beq.n	80011b2 <HAL_ADC_Init+0x126>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d104      	bne.n	80011bc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	051b      	lsls	r3, r3, #20
 80011ba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	4b18      	ldr	r3, [pc, #96]	; (8001238 <HAL_ADC_Init+0x1ac>)
 80011d8:	4013      	ands	r3, r2
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d10b      	bne.n	80011f8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ea:	f023 0303 	bic.w	r3, r3, #3
 80011ee:	f043 0201 	orr.w	r2, r3, #1
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011f6:	e018      	b.n	800122a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fc:	f023 0312 	bic.w	r3, r3, #18
 8001200:	f043 0210 	orr.w	r2, r3, #16
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120c:	f043 0201 	orr.w	r2, r3, #1
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001218:	e007      	b.n	800122a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121e:	f043 0210 	orr.w	r2, r3, #16
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800122a:	7dfb      	ldrb	r3, [r7, #23]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	ffe1f7fd 	.word	0xffe1f7fd
 8001238:	ff1f0efe 	.word	0xff1f0efe

0800123c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800124e:	2b01      	cmp	r3, #1
 8001250:	d101      	bne.n	8001256 <HAL_ADC_Start+0x1a>
 8001252:	2302      	movs	r3, #2
 8001254:	e098      	b.n	8001388 <HAL_ADC_Start+0x14c>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2201      	movs	r2, #1
 800125a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 fad0 	bl	8001804 <ADC_Enable>
 8001264:	4603      	mov	r3, r0
 8001266:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001268:	7bfb      	ldrb	r3, [r7, #15]
 800126a:	2b00      	cmp	r3, #0
 800126c:	f040 8087 	bne.w	800137e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001278:	f023 0301 	bic.w	r3, r3, #1
 800127c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a41      	ldr	r2, [pc, #260]	; (8001390 <HAL_ADC_Start+0x154>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d105      	bne.n	800129a <HAL_ADC_Start+0x5e>
 800128e:	4b41      	ldr	r3, [pc, #260]	; (8001394 <HAL_ADC_Start+0x158>)
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d115      	bne.n	80012c6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d026      	beq.n	8001302 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012c4:	e01d      	b.n	8001302 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a2f      	ldr	r2, [pc, #188]	; (8001394 <HAL_ADC_Start+0x158>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d004      	beq.n	80012e6 <HAL_ADC_Start+0xaa>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a2b      	ldr	r2, [pc, #172]	; (8001390 <HAL_ADC_Start+0x154>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d10d      	bne.n	8001302 <HAL_ADC_Start+0xc6>
 80012e6:	4b2b      	ldr	r3, [pc, #172]	; (8001394 <HAL_ADC_Start+0x158>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d007      	beq.n	8001302 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001306:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d006      	beq.n	800131c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001312:	f023 0206 	bic.w	r2, r3, #6
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	62da      	str	r2, [r3, #44]	; 0x2c
 800131a:	e002      	b.n	8001322 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f06f 0202 	mvn.w	r2, #2
 8001332:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800133e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001342:	d113      	bne.n	800136c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001348:	4a11      	ldr	r2, [pc, #68]	; (8001390 <HAL_ADC_Start+0x154>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d105      	bne.n	800135a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <HAL_ADC_Start+0x158>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001356:	2b00      	cmp	r3, #0
 8001358:	d108      	bne.n	800136c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689a      	ldr	r2, [r3, #8]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	e00c      	b.n	8001386 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	e003      	b.n	8001386 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001386:	7bfb      	ldrb	r3, [r7, #15]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40012800 	.word	0x40012800
 8001394:	40012400 	.word	0x40012400

08001398 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d101      	bne.n	80013b2 <HAL_ADC_Stop+0x1a>
 80013ae:	2302      	movs	r3, #2
 80013b0:	e01a      	b.n	80013e8 <HAL_ADC_Stop+0x50>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 fa7c 	bl	80018b8 <ADC_ConversionStop_Disable>
 80013c0:	4603      	mov	r3, r0
 80013c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d109      	bne.n	80013de <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013d2:	f023 0301 	bic.w	r3, r3, #1
 80013d6:	f043 0201 	orr.w	r2, r3, #1
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b087      	sub	sp, #28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001406:	f7ff fe13 	bl	8001030 <HAL_GetTick>
 800140a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00b      	beq.n	8001432 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141e:	f043 0220 	orr.w	r2, r3, #32
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e0d3      	b.n	80015da <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143c:	2b00      	cmp	r3, #0
 800143e:	d131      	bne.n	80014a4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001446:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800144a:	2b00      	cmp	r3, #0
 800144c:	d12a      	bne.n	80014a4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800144e:	e021      	b.n	8001494 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001456:	d01d      	beq.n	8001494 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d007      	beq.n	800146e <HAL_ADC_PollForConversion+0x7e>
 800145e:	f7ff fde7 	bl	8001030 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	d212      	bcs.n	8001494 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d10b      	bne.n	8001494 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001480:	f043 0204 	orr.w	r2, r3, #4
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e0a2      	b.n	80015da <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0d6      	beq.n	8001450 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014a2:	e070      	b.n	8001586 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80014a4:	4b4f      	ldr	r3, [pc, #316]	; (80015e4 <HAL_ADC_PollForConversion+0x1f4>)
 80014a6:	681c      	ldr	r4, [r3, #0]
 80014a8:	2002      	movs	r0, #2
 80014aa:	f001 fe11 	bl	80030d0 <HAL_RCCEx_GetPeriphCLKFreq>
 80014ae:	4603      	mov	r3, r0
 80014b0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6919      	ldr	r1, [r3, #16]
 80014ba:	4b4b      	ldr	r3, [pc, #300]	; (80015e8 <HAL_ADC_PollForConversion+0x1f8>)
 80014bc:	400b      	ands	r3, r1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d118      	bne.n	80014f4 <HAL_ADC_PollForConversion+0x104>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	68d9      	ldr	r1, [r3, #12]
 80014c8:	4b48      	ldr	r3, [pc, #288]	; (80015ec <HAL_ADC_PollForConversion+0x1fc>)
 80014ca:	400b      	ands	r3, r1
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d111      	bne.n	80014f4 <HAL_ADC_PollForConversion+0x104>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6919      	ldr	r1, [r3, #16]
 80014d6:	4b46      	ldr	r3, [pc, #280]	; (80015f0 <HAL_ADC_PollForConversion+0x200>)
 80014d8:	400b      	ands	r3, r1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d108      	bne.n	80014f0 <HAL_ADC_PollForConversion+0x100>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68d9      	ldr	r1, [r3, #12]
 80014e4:	4b43      	ldr	r3, [pc, #268]	; (80015f4 <HAL_ADC_PollForConversion+0x204>)
 80014e6:	400b      	ands	r3, r1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_ADC_PollForConversion+0x100>
 80014ec:	2314      	movs	r3, #20
 80014ee:	e020      	b.n	8001532 <HAL_ADC_PollForConversion+0x142>
 80014f0:	2329      	movs	r3, #41	; 0x29
 80014f2:	e01e      	b.n	8001532 <HAL_ADC_PollForConversion+0x142>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6919      	ldr	r1, [r3, #16]
 80014fa:	4b3d      	ldr	r3, [pc, #244]	; (80015f0 <HAL_ADC_PollForConversion+0x200>)
 80014fc:	400b      	ands	r3, r1
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d106      	bne.n	8001510 <HAL_ADC_PollForConversion+0x120>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68d9      	ldr	r1, [r3, #12]
 8001508:	4b3a      	ldr	r3, [pc, #232]	; (80015f4 <HAL_ADC_PollForConversion+0x204>)
 800150a:	400b      	ands	r3, r1
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00d      	beq.n	800152c <HAL_ADC_PollForConversion+0x13c>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6919      	ldr	r1, [r3, #16]
 8001516:	4b38      	ldr	r3, [pc, #224]	; (80015f8 <HAL_ADC_PollForConversion+0x208>)
 8001518:	400b      	ands	r3, r1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d108      	bne.n	8001530 <HAL_ADC_PollForConversion+0x140>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	68d9      	ldr	r1, [r3, #12]
 8001524:	4b34      	ldr	r3, [pc, #208]	; (80015f8 <HAL_ADC_PollForConversion+0x208>)
 8001526:	400b      	ands	r3, r1
 8001528:	2b00      	cmp	r3, #0
 800152a:	d101      	bne.n	8001530 <HAL_ADC_PollForConversion+0x140>
 800152c:	2354      	movs	r3, #84	; 0x54
 800152e:	e000      	b.n	8001532 <HAL_ADC_PollForConversion+0x142>
 8001530:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001532:	fb02 f303 	mul.w	r3, r2, r3
 8001536:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001538:	e021      	b.n	800157e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001540:	d01a      	beq.n	8001578 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d007      	beq.n	8001558 <HAL_ADC_PollForConversion+0x168>
 8001548:	f7ff fd72 	bl	8001030 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d20f      	bcs.n	8001578 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	429a      	cmp	r2, r3
 800155e:	d90b      	bls.n	8001578 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001564:	f043 0204 	orr.w	r2, r3, #4
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e030      	b.n	80015da <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	3301      	adds	r3, #1
 800157c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	429a      	cmp	r2, r3
 8001584:	d8d9      	bhi.n	800153a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f06f 0212 	mvn.w	r2, #18
 800158e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001594:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015a6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015aa:	d115      	bne.n	80015d8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d111      	bne.n	80015d8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d105      	bne.n	80015d8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d0:	f043 0201 	orr.w	r2, r3, #1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	371c      	adds	r7, #28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd90      	pop	{r4, r7, pc}
 80015e2:	bf00      	nop
 80015e4:	200005dc 	.word	0x200005dc
 80015e8:	24924924 	.word	0x24924924
 80015ec:	00924924 	.word	0x00924924
 80015f0:	12492492 	.word	0x12492492
 80015f4:	00492492 	.word	0x00492492
 80015f8:	00249249 	.word	0x00249249

080015fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800160a:	4618      	mov	r0, r3
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr

08001614 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800162c:	2b01      	cmp	r3, #1
 800162e:	d101      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x20>
 8001630:	2302      	movs	r3, #2
 8001632:	e0dc      	b.n	80017ee <HAL_ADC_ConfigChannel+0x1da>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b06      	cmp	r3, #6
 8001642:	d81c      	bhi.n	800167e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	3b05      	subs	r3, #5
 8001656:	221f      	movs	r2, #31
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	4019      	ands	r1, r3
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	6818      	ldr	r0, [r3, #0]
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	3b05      	subs	r3, #5
 8001670:	fa00 f203 	lsl.w	r2, r0, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	430a      	orrs	r2, r1
 800167a:	635a      	str	r2, [r3, #52]	; 0x34
 800167c:	e03c      	b.n	80016f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b0c      	cmp	r3, #12
 8001684:	d81c      	bhi.n	80016c0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	3b23      	subs	r3, #35	; 0x23
 8001698:	221f      	movs	r2, #31
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	4019      	ands	r1, r3
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	6818      	ldr	r0, [r3, #0]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	3b23      	subs	r3, #35	; 0x23
 80016b2:	fa00 f203 	lsl.w	r2, r0, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	631a      	str	r2, [r3, #48]	; 0x30
 80016be:	e01b      	b.n	80016f8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	3b41      	subs	r3, #65	; 0x41
 80016d2:	221f      	movs	r2, #31
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	4019      	ands	r1, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	3b41      	subs	r3, #65	; 0x41
 80016ec:	fa00 f203 	lsl.w	r2, r0, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b09      	cmp	r3, #9
 80016fe:	d91c      	bls.n	800173a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68d9      	ldr	r1, [r3, #12]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	4613      	mov	r3, r2
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	4413      	add	r3, r2
 8001710:	3b1e      	subs	r3, #30
 8001712:	2207      	movs	r2, #7
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	4019      	ands	r1, r3
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	6898      	ldr	r0, [r3, #8]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4613      	mov	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	3b1e      	subs	r3, #30
 800172c:	fa00 f203 	lsl.w	r2, r0, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	e019      	b.n	800176e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6919      	ldr	r1, [r3, #16]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4613      	mov	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	2207      	movs	r2, #7
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	4019      	ands	r1, r3
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	6898      	ldr	r0, [r3, #8]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4613      	mov	r3, r2
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	4413      	add	r3, r2
 8001762:	fa00 f203 	lsl.w	r2, r0, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b10      	cmp	r3, #16
 8001774:	d003      	beq.n	800177e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800177a:	2b11      	cmp	r3, #17
 800177c:	d132      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a1d      	ldr	r2, [pc, #116]	; (80017f8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d125      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d126      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80017a4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b10      	cmp	r3, #16
 80017ac:	d11a      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017ae:	4b13      	ldr	r3, [pc, #76]	; (80017fc <HAL_ADC_ConfigChannel+0x1e8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a13      	ldr	r2, [pc, #76]	; (8001800 <HAL_ADC_ConfigChannel+0x1ec>)
 80017b4:	fba2 2303 	umull	r2, r3, r2, r3
 80017b8:	0c9a      	lsrs	r2, r3, #18
 80017ba:	4613      	mov	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017c4:	e002      	b.n	80017cc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f9      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x1b2>
 80017d2:	e007      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d8:	f043 0220 	orr.w	r2, r3, #32
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	40012400 	.word	0x40012400
 80017fc:	200005dc 	.word	0x200005dc
 8001800:	431bde83 	.word	0x431bde83

08001804 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b01      	cmp	r3, #1
 8001820:	d040      	beq.n	80018a4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f042 0201 	orr.w	r2, r2, #1
 8001830:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001832:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <ADC_Enable+0xac>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a1f      	ldr	r2, [pc, #124]	; (80018b4 <ADC_Enable+0xb0>)
 8001838:	fba2 2303 	umull	r2, r3, r2, r3
 800183c:	0c9b      	lsrs	r3, r3, #18
 800183e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001840:	e002      	b.n	8001848 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	3b01      	subs	r3, #1
 8001846:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f9      	bne.n	8001842 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800184e:	f7ff fbef 	bl	8001030 <HAL_GetTick>
 8001852:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001854:	e01f      	b.n	8001896 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001856:	f7ff fbeb 	bl	8001030 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d918      	bls.n	8001896 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b01      	cmp	r3, #1
 8001870:	d011      	beq.n	8001896 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001876:	f043 0210 	orr.w	r2, r3, #16
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001882:	f043 0201 	orr.w	r2, r3, #1
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e007      	b.n	80018a6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d1d8      	bne.n	8001856 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200005dc 	.word	0x200005dc
 80018b4:	431bde83 	.word	0x431bde83

080018b8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d12e      	bne.n	8001930 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 0201 	bic.w	r2, r2, #1
 80018e0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018e2:	f7ff fba5 	bl	8001030 <HAL_GetTick>
 80018e6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80018e8:	e01b      	b.n	8001922 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018ea:	f7ff fba1 	bl	8001030 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d914      	bls.n	8001922 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b01      	cmp	r3, #1
 8001904:	d10d      	bne.n	8001922 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190a:	f043 0210 	orr.w	r2, r3, #16
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	f043 0201 	orr.w	r2, r3, #1
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e007      	b.n	8001932 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b01      	cmp	r3, #1
 800192e:	d0dc      	beq.n	80018ea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001958:	4013      	ands	r3, r2
 800195a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196e:	4a04      	ldr	r2, [pc, #16]	; (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	60d3      	str	r3, [r2, #12]
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <__NVIC_GetPriorityGrouping+0x18>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	f003 0307 	and.w	r3, r3, #7
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db0a      	blt.n	80019ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	490c      	ldr	r1, [pc, #48]	; (80019ec <__NVIC_SetPriority+0x4c>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c8:	e00a      	b.n	80019e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4908      	ldr	r1, [pc, #32]	; (80019f0 <__NVIC_SetPriority+0x50>)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	3b04      	subs	r3, #4
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	440b      	add	r3, r1
 80019de:	761a      	strb	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f1c3 0307 	rsb	r3, r3, #7
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf28      	it	cs
 8001a12:	2304      	movcs	r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d902      	bls.n	8001a24 <NVIC_EncodePriority+0x30>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	e000      	b.n	8001a26 <NVIC_EncodePriority+0x32>
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43d9      	mvns	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	4313      	orrs	r3, r2
         );
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	; 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a68:	d301      	bcc.n	8001a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00f      	b.n	8001a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <SysTick_Config+0x40>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a76:	210f      	movs	r1, #15
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	f7ff ff90 	bl	80019a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <SysTick_Config+0x40>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <SysTick_Config+0x40>)
 8001a88:	2207      	movs	r2, #7
 8001a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	e000e010 	.word	0xe000e010

08001a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ff49 	bl	800193c <__NVIC_SetPriorityGrouping>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac4:	f7ff ff5e 	bl	8001984 <__NVIC_GetPriorityGrouping>
 8001ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68b9      	ldr	r1, [r7, #8]
 8001ace:	6978      	ldr	r0, [r7, #20]
 8001ad0:	f7ff ff90 	bl	80019f4 <NVIC_EncodePriority>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff5f 	bl	80019a0 <__NVIC_SetPriority>
}
 8001ae2:	bf00      	nop
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ffb0 	bl	8001a58 <SysTick_Config>
 8001af8:	4603      	mov	r3, r0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b08b      	sub	sp, #44	; 0x2c
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b16:	e169      	b.n	8001dec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b18:	2201      	movs	r2, #1
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	69fa      	ldr	r2, [r7, #28]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	f040 8158 	bne.w	8001de6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	4a9a      	ldr	r2, [pc, #616]	; (8001da4 <HAL_GPIO_Init+0x2a0>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d05e      	beq.n	8001bfe <HAL_GPIO_Init+0xfa>
 8001b40:	4a98      	ldr	r2, [pc, #608]	; (8001da4 <HAL_GPIO_Init+0x2a0>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d875      	bhi.n	8001c32 <HAL_GPIO_Init+0x12e>
 8001b46:	4a98      	ldr	r2, [pc, #608]	; (8001da8 <HAL_GPIO_Init+0x2a4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d058      	beq.n	8001bfe <HAL_GPIO_Init+0xfa>
 8001b4c:	4a96      	ldr	r2, [pc, #600]	; (8001da8 <HAL_GPIO_Init+0x2a4>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d86f      	bhi.n	8001c32 <HAL_GPIO_Init+0x12e>
 8001b52:	4a96      	ldr	r2, [pc, #600]	; (8001dac <HAL_GPIO_Init+0x2a8>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d052      	beq.n	8001bfe <HAL_GPIO_Init+0xfa>
 8001b58:	4a94      	ldr	r2, [pc, #592]	; (8001dac <HAL_GPIO_Init+0x2a8>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d869      	bhi.n	8001c32 <HAL_GPIO_Init+0x12e>
 8001b5e:	4a94      	ldr	r2, [pc, #592]	; (8001db0 <HAL_GPIO_Init+0x2ac>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d04c      	beq.n	8001bfe <HAL_GPIO_Init+0xfa>
 8001b64:	4a92      	ldr	r2, [pc, #584]	; (8001db0 <HAL_GPIO_Init+0x2ac>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d863      	bhi.n	8001c32 <HAL_GPIO_Init+0x12e>
 8001b6a:	4a92      	ldr	r2, [pc, #584]	; (8001db4 <HAL_GPIO_Init+0x2b0>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d046      	beq.n	8001bfe <HAL_GPIO_Init+0xfa>
 8001b70:	4a90      	ldr	r2, [pc, #576]	; (8001db4 <HAL_GPIO_Init+0x2b0>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d85d      	bhi.n	8001c32 <HAL_GPIO_Init+0x12e>
 8001b76:	2b12      	cmp	r3, #18
 8001b78:	d82a      	bhi.n	8001bd0 <HAL_GPIO_Init+0xcc>
 8001b7a:	2b12      	cmp	r3, #18
 8001b7c:	d859      	bhi.n	8001c32 <HAL_GPIO_Init+0x12e>
 8001b7e:	a201      	add	r2, pc, #4	; (adr r2, 8001b84 <HAL_GPIO_Init+0x80>)
 8001b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b84:	08001bff 	.word	0x08001bff
 8001b88:	08001bd9 	.word	0x08001bd9
 8001b8c:	08001beb 	.word	0x08001beb
 8001b90:	08001c2d 	.word	0x08001c2d
 8001b94:	08001c33 	.word	0x08001c33
 8001b98:	08001c33 	.word	0x08001c33
 8001b9c:	08001c33 	.word	0x08001c33
 8001ba0:	08001c33 	.word	0x08001c33
 8001ba4:	08001c33 	.word	0x08001c33
 8001ba8:	08001c33 	.word	0x08001c33
 8001bac:	08001c33 	.word	0x08001c33
 8001bb0:	08001c33 	.word	0x08001c33
 8001bb4:	08001c33 	.word	0x08001c33
 8001bb8:	08001c33 	.word	0x08001c33
 8001bbc:	08001c33 	.word	0x08001c33
 8001bc0:	08001c33 	.word	0x08001c33
 8001bc4:	08001c33 	.word	0x08001c33
 8001bc8:	08001be1 	.word	0x08001be1
 8001bcc:	08001bf5 	.word	0x08001bf5
 8001bd0:	4a79      	ldr	r2, [pc, #484]	; (8001db8 <HAL_GPIO_Init+0x2b4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d013      	beq.n	8001bfe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bd6:	e02c      	b.n	8001c32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	623b      	str	r3, [r7, #32]
          break;
 8001bde:	e029      	b.n	8001c34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	3304      	adds	r3, #4
 8001be6:	623b      	str	r3, [r7, #32]
          break;
 8001be8:	e024      	b.n	8001c34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	3308      	adds	r3, #8
 8001bf0:	623b      	str	r3, [r7, #32]
          break;
 8001bf2:	e01f      	b.n	8001c34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	330c      	adds	r3, #12
 8001bfa:	623b      	str	r3, [r7, #32]
          break;
 8001bfc:	e01a      	b.n	8001c34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d102      	bne.n	8001c0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c06:	2304      	movs	r3, #4
 8001c08:	623b      	str	r3, [r7, #32]
          break;
 8001c0a:	e013      	b.n	8001c34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d105      	bne.n	8001c20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c14:	2308      	movs	r3, #8
 8001c16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69fa      	ldr	r2, [r7, #28]
 8001c1c:	611a      	str	r2, [r3, #16]
          break;
 8001c1e:	e009      	b.n	8001c34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c20:	2308      	movs	r3, #8
 8001c22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69fa      	ldr	r2, [r7, #28]
 8001c28:	615a      	str	r2, [r3, #20]
          break;
 8001c2a:	e003      	b.n	8001c34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	623b      	str	r3, [r7, #32]
          break;
 8001c30:	e000      	b.n	8001c34 <HAL_GPIO_Init+0x130>
          break;
 8001c32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	2bff      	cmp	r3, #255	; 0xff
 8001c38:	d801      	bhi.n	8001c3e <HAL_GPIO_Init+0x13a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	e001      	b.n	8001c42 <HAL_GPIO_Init+0x13e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3304      	adds	r3, #4
 8001c42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	2bff      	cmp	r3, #255	; 0xff
 8001c48:	d802      	bhi.n	8001c50 <HAL_GPIO_Init+0x14c>
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	e002      	b.n	8001c56 <HAL_GPIO_Init+0x152>
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	3b08      	subs	r3, #8
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	210f      	movs	r1, #15
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	fa01 f303 	lsl.w	r3, r1, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	401a      	ands	r2, r3
 8001c68:	6a39      	ldr	r1, [r7, #32]
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c70:	431a      	orrs	r2, r3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 80b1 	beq.w	8001de6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c84:	4b4d      	ldr	r3, [pc, #308]	; (8001dbc <HAL_GPIO_Init+0x2b8>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	4a4c      	ldr	r2, [pc, #304]	; (8001dbc <HAL_GPIO_Init+0x2b8>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6193      	str	r3, [r2, #24]
 8001c90:	4b4a      	ldr	r3, [pc, #296]	; (8001dbc <HAL_GPIO_Init+0x2b8>)
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c9c:	4a48      	ldr	r2, [pc, #288]	; (8001dc0 <HAL_GPIO_Init+0x2bc>)
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	089b      	lsrs	r3, r3, #2
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	220f      	movs	r2, #15
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a40      	ldr	r2, [pc, #256]	; (8001dc4 <HAL_GPIO_Init+0x2c0>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d013      	beq.n	8001cf0 <HAL_GPIO_Init+0x1ec>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a3f      	ldr	r2, [pc, #252]	; (8001dc8 <HAL_GPIO_Init+0x2c4>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d00d      	beq.n	8001cec <HAL_GPIO_Init+0x1e8>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a3e      	ldr	r2, [pc, #248]	; (8001dcc <HAL_GPIO_Init+0x2c8>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d007      	beq.n	8001ce8 <HAL_GPIO_Init+0x1e4>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a3d      	ldr	r2, [pc, #244]	; (8001dd0 <HAL_GPIO_Init+0x2cc>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d101      	bne.n	8001ce4 <HAL_GPIO_Init+0x1e0>
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e006      	b.n	8001cf2 <HAL_GPIO_Init+0x1ee>
 8001ce4:	2304      	movs	r3, #4
 8001ce6:	e004      	b.n	8001cf2 <HAL_GPIO_Init+0x1ee>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	e002      	b.n	8001cf2 <HAL_GPIO_Init+0x1ee>
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <HAL_GPIO_Init+0x1ee>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf4:	f002 0203 	and.w	r2, r2, #3
 8001cf8:	0092      	lsls	r2, r2, #2
 8001cfa:	4093      	lsls	r3, r2
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d02:	492f      	ldr	r1, [pc, #188]	; (8001dc0 <HAL_GPIO_Init+0x2bc>)
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	3302      	adds	r3, #2
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d006      	beq.n	8001d2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d1c:	4b2d      	ldr	r3, [pc, #180]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	492c      	ldr	r1, [pc, #176]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	608b      	str	r3, [r1, #8]
 8001d28:	e006      	b.n	8001d38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d2a:	4b2a      	ldr	r3, [pc, #168]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	4928      	ldr	r1, [pc, #160]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d006      	beq.n	8001d52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d44:	4b23      	ldr	r3, [pc, #140]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	4922      	ldr	r1, [pc, #136]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	60cb      	str	r3, [r1, #12]
 8001d50:	e006      	b.n	8001d60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d52:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	491e      	ldr	r1, [pc, #120]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d006      	beq.n	8001d7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d6c:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	4918      	ldr	r1, [pc, #96]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	604b      	str	r3, [r1, #4]
 8001d78:	e006      	b.n	8001d88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d7a:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	4914      	ldr	r1, [pc, #80]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d021      	beq.n	8001dd8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d94:	4b0f      	ldr	r3, [pc, #60]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	490e      	ldr	r1, [pc, #56]	; (8001dd4 <HAL_GPIO_Init+0x2d0>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	600b      	str	r3, [r1, #0]
 8001da0:	e021      	b.n	8001de6 <HAL_GPIO_Init+0x2e2>
 8001da2:	bf00      	nop
 8001da4:	10320000 	.word	0x10320000
 8001da8:	10310000 	.word	0x10310000
 8001dac:	10220000 	.word	0x10220000
 8001db0:	10210000 	.word	0x10210000
 8001db4:	10120000 	.word	0x10120000
 8001db8:	10110000 	.word	0x10110000
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40010000 	.word	0x40010000
 8001dc4:	40010800 	.word	0x40010800
 8001dc8:	40010c00 	.word	0x40010c00
 8001dcc:	40011000 	.word	0x40011000
 8001dd0:	40011400 	.word	0x40011400
 8001dd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <HAL_GPIO_Init+0x304>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	4909      	ldr	r1, [pc, #36]	; (8001e08 <HAL_GPIO_Init+0x304>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	3301      	adds	r3, #1
 8001dea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df2:	fa22 f303 	lsr.w	r3, r2, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f47f ae8e 	bne.w	8001b18 <HAL_GPIO_Init+0x14>
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	bf00      	nop
 8001e00:	372c      	adds	r7, #44	; 0x2c
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr
 8001e08:	40010400 	.word	0x40010400

08001e0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e12b      	b.n	8002076 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d106      	bne.n	8001e38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff f812 	bl	8000e5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2224      	movs	r2, #36	; 0x24
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f022 0201 	bic.w	r2, r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e70:	f001 f832 	bl	8002ed8 <HAL_RCC_GetPCLK1Freq>
 8001e74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	4a81      	ldr	r2, [pc, #516]	; (8002080 <HAL_I2C_Init+0x274>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d807      	bhi.n	8001e90 <HAL_I2C_Init+0x84>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4a80      	ldr	r2, [pc, #512]	; (8002084 <HAL_I2C_Init+0x278>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	bf94      	ite	ls
 8001e88:	2301      	movls	r3, #1
 8001e8a:	2300      	movhi	r3, #0
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	e006      	b.n	8001e9e <HAL_I2C_Init+0x92>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4a7d      	ldr	r2, [pc, #500]	; (8002088 <HAL_I2C_Init+0x27c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	bf94      	ite	ls
 8001e98:	2301      	movls	r3, #1
 8001e9a:	2300      	movhi	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e0e7      	b.n	8002076 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4a78      	ldr	r2, [pc, #480]	; (800208c <HAL_I2C_Init+0x280>)
 8001eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001eae:	0c9b      	lsrs	r3, r3, #18
 8001eb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	4a6a      	ldr	r2, [pc, #424]	; (8002080 <HAL_I2C_Init+0x274>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d802      	bhi.n	8001ee0 <HAL_I2C_Init+0xd4>
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	3301      	adds	r3, #1
 8001ede:	e009      	b.n	8001ef4 <HAL_I2C_Init+0xe8>
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ee6:	fb02 f303 	mul.w	r3, r2, r3
 8001eea:	4a69      	ldr	r2, [pc, #420]	; (8002090 <HAL_I2C_Init+0x284>)
 8001eec:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef0:	099b      	lsrs	r3, r3, #6
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	430b      	orrs	r3, r1
 8001efa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	495c      	ldr	r1, [pc, #368]	; (8002080 <HAL_I2C_Init+0x274>)
 8001f10:	428b      	cmp	r3, r1
 8001f12:	d819      	bhi.n	8001f48 <HAL_I2C_Init+0x13c>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1e59      	subs	r1, r3, #1
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f22:	1c59      	adds	r1, r3, #1
 8001f24:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f28:	400b      	ands	r3, r1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <HAL_I2C_Init+0x138>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1e59      	subs	r1, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f42:	e051      	b.n	8001fe8 <HAL_I2C_Init+0x1dc>
 8001f44:	2304      	movs	r3, #4
 8001f46:	e04f      	b.n	8001fe8 <HAL_I2C_Init+0x1dc>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d111      	bne.n	8001f74 <HAL_I2C_Init+0x168>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	1e58      	subs	r0, r3, #1
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6859      	ldr	r1, [r3, #4]
 8001f58:	460b      	mov	r3, r1
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	440b      	add	r3, r1
 8001f5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f62:	3301      	adds	r3, #1
 8001f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	bf0c      	ite	eq
 8001f6c:	2301      	moveq	r3, #1
 8001f6e:	2300      	movne	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	e012      	b.n	8001f9a <HAL_I2C_Init+0x18e>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	1e58      	subs	r0, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6859      	ldr	r1, [r3, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	0099      	lsls	r1, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	bf0c      	ite	eq
 8001f94:	2301      	moveq	r3, #1
 8001f96:	2300      	movne	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_I2C_Init+0x196>
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e022      	b.n	8001fe8 <HAL_I2C_Init+0x1dc>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10e      	bne.n	8001fc8 <HAL_I2C_Init+0x1bc>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1e58      	subs	r0, r3, #1
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6859      	ldr	r1, [r3, #4]
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	440b      	add	r3, r1
 8001fb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fc6:	e00f      	b.n	8001fe8 <HAL_I2C_Init+0x1dc>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	1e58      	subs	r0, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6859      	ldr	r1, [r3, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	0099      	lsls	r1, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fde:	3301      	adds	r3, #1
 8001fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	6809      	ldr	r1, [r1, #0]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69da      	ldr	r2, [r3, #28]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002016:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6911      	ldr	r1, [r2, #16]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	68d2      	ldr	r2, [r2, #12]
 8002022:	4311      	orrs	r1, r2
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	6812      	ldr	r2, [r2, #0]
 8002028:	430b      	orrs	r3, r1
 800202a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695a      	ldr	r2, [r3, #20]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	431a      	orrs	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	430a      	orrs	r2, r1
 8002046:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2220      	movs	r2, #32
 8002062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	000186a0 	.word	0x000186a0
 8002084:	001e847f 	.word	0x001e847f
 8002088:	003d08ff 	.word	0x003d08ff
 800208c:	431bde83 	.word	0x431bde83
 8002090:	10624dd3 	.word	0x10624dd3

08002094 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af02      	add	r7, sp, #8
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	461a      	mov	r2, r3
 80020a0:	460b      	mov	r3, r1
 80020a2:	817b      	strh	r3, [r7, #10]
 80020a4:	4613      	mov	r3, r2
 80020a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020a8:	f7fe ffc2 	bl	8001030 <HAL_GetTick>
 80020ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b20      	cmp	r3, #32
 80020b8:	f040 80e0 	bne.w	800227c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	2319      	movs	r3, #25
 80020c2:	2201      	movs	r2, #1
 80020c4:	4970      	ldr	r1, [pc, #448]	; (8002288 <HAL_I2C_Master_Transmit+0x1f4>)
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 f964 	bl	8002394 <I2C_WaitOnFlagUntilTimeout>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020d2:	2302      	movs	r3, #2
 80020d4:	e0d3      	b.n	800227e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_I2C_Master_Transmit+0x50>
 80020e0:	2302      	movs	r3, #2
 80020e2:	e0cc      	b.n	800227e <HAL_I2C_Master_Transmit+0x1ea>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d007      	beq.n	800210a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0201 	orr.w	r2, r2, #1
 8002108:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002118:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2221      	movs	r2, #33	; 0x21
 800211e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2210      	movs	r2, #16
 8002126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	893a      	ldrh	r2, [r7, #8]
 800213a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4a50      	ldr	r2, [pc, #320]	; (800228c <HAL_I2C_Master_Transmit+0x1f8>)
 800214a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800214c:	8979      	ldrh	r1, [r7, #10]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	6a3a      	ldr	r2, [r7, #32]
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f000 f89c 	bl	8002290 <I2C_MasterRequestWrite>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e08d      	b.n	800227e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002162:	2300      	movs	r3, #0
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002178:	e066      	b.n	8002248 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	6a39      	ldr	r1, [r7, #32]
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 fa22 	bl	80025c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00d      	beq.n	80021a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	2b04      	cmp	r3, #4
 8002190:	d107      	bne.n	80021a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e06b      	b.n	800227e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	781a      	ldrb	r2, [r3, #0]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ce:	3b01      	subs	r3, #1
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d11b      	bne.n	800221c <HAL_I2C_Master_Transmit+0x188>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d017      	beq.n	800221c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	781a      	ldrb	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002206:	b29b      	uxth	r3, r3
 8002208:	3b01      	subs	r3, #1
 800220a:	b29a      	uxth	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002214:	3b01      	subs	r3, #1
 8002216:	b29a      	uxth	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	6a39      	ldr	r1, [r7, #32]
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 fa19 	bl	8002658 <I2C_WaitOnBTFFlagUntilTimeout>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00d      	beq.n	8002248 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	2b04      	cmp	r3, #4
 8002232:	d107      	bne.n	8002244 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002242:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e01a      	b.n	800227e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224c:	2b00      	cmp	r3, #0
 800224e:	d194      	bne.n	800217a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800225e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	e000      	b.n	800227e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800227c:	2302      	movs	r3, #2
  }
}
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	00100002 	.word	0x00100002
 800228c:	ffff0000 	.word	0xffff0000

08002290 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af02      	add	r7, sp, #8
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	607a      	str	r2, [r7, #4]
 800229a:	603b      	str	r3, [r7, #0]
 800229c:	460b      	mov	r3, r1
 800229e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d006      	beq.n	80022ba <I2C_MasterRequestWrite+0x2a>
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d003      	beq.n	80022ba <I2C_MasterRequestWrite+0x2a>
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022b8:	d108      	bne.n	80022cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	e00b      	b.n	80022e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d0:	2b12      	cmp	r3, #18
 80022d2:	d107      	bne.n	80022e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 f84f 	bl	8002394 <I2C_WaitOnFlagUntilTimeout>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00d      	beq.n	8002318 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800230a:	d103      	bne.n	8002314 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002312:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e035      	b.n	8002384 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002320:	d108      	bne.n	8002334 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002322:	897b      	ldrh	r3, [r7, #10]
 8002324:	b2db      	uxtb	r3, r3
 8002326:	461a      	mov	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002330:	611a      	str	r2, [r3, #16]
 8002332:	e01b      	b.n	800236c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002334:	897b      	ldrh	r3, [r7, #10]
 8002336:	11db      	asrs	r3, r3, #7
 8002338:	b2db      	uxtb	r3, r3
 800233a:	f003 0306 	and.w	r3, r3, #6
 800233e:	b2db      	uxtb	r3, r3
 8002340:	f063 030f 	orn	r3, r3, #15
 8002344:	b2da      	uxtb	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	490e      	ldr	r1, [pc, #56]	; (800238c <I2C_MasterRequestWrite+0xfc>)
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 f898 	bl	8002488 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e010      	b.n	8002384 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002362:	897b      	ldrh	r3, [r7, #10]
 8002364:	b2da      	uxtb	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	4907      	ldr	r1, [pc, #28]	; (8002390 <I2C_MasterRequestWrite+0x100>)
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 f888 	bl	8002488 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	00010008 	.word	0x00010008
 8002390:	00010002 	.word	0x00010002

08002394 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	603b      	str	r3, [r7, #0]
 80023a0:	4613      	mov	r3, r2
 80023a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023a4:	e048      	b.n	8002438 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ac:	d044      	beq.n	8002438 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ae:	f7fe fe3f 	bl	8001030 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d302      	bcc.n	80023c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d139      	bne.n	8002438 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	0c1b      	lsrs	r3, r3, #16
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d10d      	bne.n	80023ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	43da      	mvns	r2, r3
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	4013      	ands	r3, r2
 80023da:	b29b      	uxth	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	bf0c      	ite	eq
 80023e0:	2301      	moveq	r3, #1
 80023e2:	2300      	movne	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	461a      	mov	r2, r3
 80023e8:	e00c      	b.n	8002404 <I2C_WaitOnFlagUntilTimeout+0x70>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	43da      	mvns	r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	4013      	ands	r3, r2
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf0c      	ite	eq
 80023fc:	2301      	moveq	r3, #1
 80023fe:	2300      	movne	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	429a      	cmp	r2, r3
 8002408:	d116      	bne.n	8002438 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2220      	movs	r2, #32
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	f043 0220 	orr.w	r2, r3, #32
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e023      	b.n	8002480 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	0c1b      	lsrs	r3, r3, #16
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b01      	cmp	r3, #1
 8002440:	d10d      	bne.n	800245e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	43da      	mvns	r2, r3
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	4013      	ands	r3, r2
 800244e:	b29b      	uxth	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	bf0c      	ite	eq
 8002454:	2301      	moveq	r3, #1
 8002456:	2300      	movne	r3, #0
 8002458:	b2db      	uxtb	r3, r3
 800245a:	461a      	mov	r2, r3
 800245c:	e00c      	b.n	8002478 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	43da      	mvns	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	4013      	ands	r3, r2
 800246a:	b29b      	uxth	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	bf0c      	ite	eq
 8002470:	2301      	moveq	r3, #1
 8002472:	2300      	movne	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	429a      	cmp	r2, r3
 800247c:	d093      	beq.n	80023a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002496:	e071      	b.n	800257c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024a6:	d123      	bne.n	80024f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2200      	movs	r2, #0
 80024c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f043 0204 	orr.w	r2, r3, #4
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e067      	b.n	80025c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f6:	d041      	beq.n	800257c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024f8:	f7fe fd9a 	bl	8001030 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	429a      	cmp	r2, r3
 8002506:	d302      	bcc.n	800250e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d136      	bne.n	800257c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	0c1b      	lsrs	r3, r3, #16
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b01      	cmp	r3, #1
 8002516:	d10c      	bne.n	8002532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	43da      	mvns	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	4013      	ands	r3, r2
 8002524:	b29b      	uxth	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	bf14      	ite	ne
 800252a:	2301      	movne	r3, #1
 800252c:	2300      	moveq	r3, #0
 800252e:	b2db      	uxtb	r3, r3
 8002530:	e00b      	b.n	800254a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	43da      	mvns	r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	4013      	ands	r3, r2
 800253e:	b29b      	uxth	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	bf14      	ite	ne
 8002544:	2301      	movne	r3, #1
 8002546:	2300      	moveq	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d016      	beq.n	800257c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	f043 0220 	orr.w	r2, r3, #32
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e021      	b.n	80025c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	0c1b      	lsrs	r3, r3, #16
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b01      	cmp	r3, #1
 8002584:	d10c      	bne.n	80025a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	43da      	mvns	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	4013      	ands	r3, r2
 8002592:	b29b      	uxth	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	bf14      	ite	ne
 8002598:	2301      	movne	r3, #1
 800259a:	2300      	moveq	r3, #0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	e00b      	b.n	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	43da      	mvns	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	4013      	ands	r3, r2
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	bf14      	ite	ne
 80025b2:	2301      	movne	r3, #1
 80025b4:	2300      	moveq	r3, #0
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f47f af6d 	bne.w	8002498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025d4:	e034      	b.n	8002640 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f886 	bl	80026e8 <I2C_IsAcknowledgeFailed>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e034      	b.n	8002650 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d028      	beq.n	8002640 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ee:	f7fe fd1f 	bl	8001030 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d302      	bcc.n	8002604 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d11d      	bne.n	8002640 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260e:	2b80      	cmp	r3, #128	; 0x80
 8002610:	d016      	beq.n	8002640 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2220      	movs	r2, #32
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	f043 0220 	orr.w	r2, r3, #32
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e007      	b.n	8002650 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264a:	2b80      	cmp	r3, #128	; 0x80
 800264c:	d1c3      	bne.n	80025d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002664:	e034      	b.n	80026d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 f83e 	bl	80026e8 <I2C_IsAcknowledgeFailed>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e034      	b.n	80026e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267c:	d028      	beq.n	80026d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800267e:	f7fe fcd7 	bl	8001030 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	429a      	cmp	r2, r3
 800268c:	d302      	bcc.n	8002694 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d11d      	bne.n	80026d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d016      	beq.n	80026d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	f043 0220 	orr.w	r2, r3, #32
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e007      	b.n	80026e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d1c3      	bne.n	8002666 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026fe:	d11b      	bne.n	8002738 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002708:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2220      	movs	r2, #32
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	f043 0204 	orr.w	r2, r3, #4
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e000      	b.n	800273a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	bc80      	pop	{r7}
 8002742:	4770      	bx	lr

08002744 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e272      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 8087 	beq.w	8002872 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002764:	4b92      	ldr	r3, [pc, #584]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 030c 	and.w	r3, r3, #12
 800276c:	2b04      	cmp	r3, #4
 800276e:	d00c      	beq.n	800278a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002770:	4b8f      	ldr	r3, [pc, #572]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 030c 	and.w	r3, r3, #12
 8002778:	2b08      	cmp	r3, #8
 800277a:	d112      	bne.n	80027a2 <HAL_RCC_OscConfig+0x5e>
 800277c:	4b8c      	ldr	r3, [pc, #560]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002788:	d10b      	bne.n	80027a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278a:	4b89      	ldr	r3, [pc, #548]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d06c      	beq.n	8002870 <HAL_RCC_OscConfig+0x12c>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d168      	bne.n	8002870 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e24c      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027aa:	d106      	bne.n	80027ba <HAL_RCC_OscConfig+0x76>
 80027ac:	4b80      	ldr	r3, [pc, #512]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a7f      	ldr	r2, [pc, #508]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80027b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b6:	6013      	str	r3, [r2, #0]
 80027b8:	e02e      	b.n	8002818 <HAL_RCC_OscConfig+0xd4>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10c      	bne.n	80027dc <HAL_RCC_OscConfig+0x98>
 80027c2:	4b7b      	ldr	r3, [pc, #492]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a7a      	ldr	r2, [pc, #488]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80027c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027cc:	6013      	str	r3, [r2, #0]
 80027ce:	4b78      	ldr	r3, [pc, #480]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a77      	ldr	r2, [pc, #476]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	e01d      	b.n	8002818 <HAL_RCC_OscConfig+0xd4>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027e4:	d10c      	bne.n	8002800 <HAL_RCC_OscConfig+0xbc>
 80027e6:	4b72      	ldr	r3, [pc, #456]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a71      	ldr	r2, [pc, #452]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	4b6f      	ldr	r3, [pc, #444]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a6e      	ldr	r2, [pc, #440]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e00b      	b.n	8002818 <HAL_RCC_OscConfig+0xd4>
 8002800:	4b6b      	ldr	r3, [pc, #428]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a6a      	ldr	r2, [pc, #424]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 8002806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280a:	6013      	str	r3, [r2, #0]
 800280c:	4b68      	ldr	r3, [pc, #416]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a67      	ldr	r2, [pc, #412]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 8002812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002816:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d013      	beq.n	8002848 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7fe fc06 	bl	8001030 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002828:	f7fe fc02 	bl	8001030 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b64      	cmp	r3, #100	; 0x64
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e200      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283a:	4b5d      	ldr	r3, [pc, #372]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f0      	beq.n	8002828 <HAL_RCC_OscConfig+0xe4>
 8002846:	e014      	b.n	8002872 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7fe fbf2 	bl	8001030 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002850:	f7fe fbee 	bl	8001030 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b64      	cmp	r3, #100	; 0x64
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e1ec      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002862:	4b53      	ldr	r3, [pc, #332]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x10c>
 800286e:	e000      	b.n	8002872 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002870:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d063      	beq.n	8002946 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800287e:	4b4c      	ldr	r3, [pc, #304]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00b      	beq.n	80028a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800288a:	4b49      	ldr	r3, [pc, #292]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	2b08      	cmp	r3, #8
 8002894:	d11c      	bne.n	80028d0 <HAL_RCC_OscConfig+0x18c>
 8002896:	4b46      	ldr	r3, [pc, #280]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d116      	bne.n	80028d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a2:	4b43      	ldr	r3, [pc, #268]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d005      	beq.n	80028ba <HAL_RCC_OscConfig+0x176>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d001      	beq.n	80028ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e1c0      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ba:	4b3d      	ldr	r3, [pc, #244]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	4939      	ldr	r1, [pc, #228]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ce:	e03a      	b.n	8002946 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d020      	beq.n	800291a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d8:	4b36      	ldr	r3, [pc, #216]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 80028da:	2201      	movs	r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7fe fba7 	bl	8001030 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e6:	f7fe fba3 	bl	8001030 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e1a1      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f8:	4b2d      	ldr	r3, [pc, #180]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002904:	4b2a      	ldr	r3, [pc, #168]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4927      	ldr	r1, [pc, #156]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 8002914:	4313      	orrs	r3, r2
 8002916:	600b      	str	r3, [r1, #0]
 8002918:	e015      	b.n	8002946 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800291a:	4b26      	ldr	r3, [pc, #152]	; (80029b4 <HAL_RCC_OscConfig+0x270>)
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7fe fb86 	bl	8001030 <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002928:	f7fe fb82 	bl	8001030 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e180      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293a:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d03a      	beq.n	80029c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d019      	beq.n	800298e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295a:	4b17      	ldr	r3, [pc, #92]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 800295c:	2201      	movs	r2, #1
 800295e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002960:	f7fe fb66 	bl	8001030 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002968:	f7fe fb62 	bl	8001030 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e160      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297a:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <HAL_RCC_OscConfig+0x26c>)
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002986:	2001      	movs	r0, #1
 8002988:	f000 face 	bl	8002f28 <RCC_Delay>
 800298c:	e01c      	b.n	80029c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800298e:	4b0a      	ldr	r3, [pc, #40]	; (80029b8 <HAL_RCC_OscConfig+0x274>)
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002994:	f7fe fb4c 	bl	8001030 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800299a:	e00f      	b.n	80029bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800299c:	f7fe fb48 	bl	8001030 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d908      	bls.n	80029bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e146      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000
 80029b4:	42420000 	.word	0x42420000
 80029b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029bc:	4b92      	ldr	r3, [pc, #584]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1e9      	bne.n	800299c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 80a6 	beq.w	8002b22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d6:	2300      	movs	r3, #0
 80029d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029da:	4b8b      	ldr	r3, [pc, #556]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10d      	bne.n	8002a02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e6:	4b88      	ldr	r3, [pc, #544]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	4a87      	ldr	r2, [pc, #540]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 80029ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f0:	61d3      	str	r3, [r2, #28]
 80029f2:	4b85      	ldr	r3, [pc, #532]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029fe:	2301      	movs	r3, #1
 8002a00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a02:	4b82      	ldr	r3, [pc, #520]	; (8002c0c <HAL_RCC_OscConfig+0x4c8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d118      	bne.n	8002a40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a0e:	4b7f      	ldr	r3, [pc, #508]	; (8002c0c <HAL_RCC_OscConfig+0x4c8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a7e      	ldr	r2, [pc, #504]	; (8002c0c <HAL_RCC_OscConfig+0x4c8>)
 8002a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a1a:	f7fe fb09 	bl	8001030 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a22:	f7fe fb05 	bl	8001030 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b64      	cmp	r3, #100	; 0x64
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e103      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a34:	4b75      	ldr	r3, [pc, #468]	; (8002c0c <HAL_RCC_OscConfig+0x4c8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d106      	bne.n	8002a56 <HAL_RCC_OscConfig+0x312>
 8002a48:	4b6f      	ldr	r3, [pc, #444]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	4a6e      	ldr	r2, [pc, #440]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	6213      	str	r3, [r2, #32]
 8002a54:	e02d      	b.n	8002ab2 <HAL_RCC_OscConfig+0x36e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10c      	bne.n	8002a78 <HAL_RCC_OscConfig+0x334>
 8002a5e:	4b6a      	ldr	r3, [pc, #424]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	4a69      	ldr	r2, [pc, #420]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002a64:	f023 0301 	bic.w	r3, r3, #1
 8002a68:	6213      	str	r3, [r2, #32]
 8002a6a:	4b67      	ldr	r3, [pc, #412]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	4a66      	ldr	r2, [pc, #408]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	f023 0304 	bic.w	r3, r3, #4
 8002a74:	6213      	str	r3, [r2, #32]
 8002a76:	e01c      	b.n	8002ab2 <HAL_RCC_OscConfig+0x36e>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	2b05      	cmp	r3, #5
 8002a7e:	d10c      	bne.n	8002a9a <HAL_RCC_OscConfig+0x356>
 8002a80:	4b61      	ldr	r3, [pc, #388]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	4a60      	ldr	r2, [pc, #384]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002a86:	f043 0304 	orr.w	r3, r3, #4
 8002a8a:	6213      	str	r3, [r2, #32]
 8002a8c:	4b5e      	ldr	r3, [pc, #376]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002a8e:	6a1b      	ldr	r3, [r3, #32]
 8002a90:	4a5d      	ldr	r2, [pc, #372]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002a92:	f043 0301 	orr.w	r3, r3, #1
 8002a96:	6213      	str	r3, [r2, #32]
 8002a98:	e00b      	b.n	8002ab2 <HAL_RCC_OscConfig+0x36e>
 8002a9a:	4b5b      	ldr	r3, [pc, #364]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	4a5a      	ldr	r2, [pc, #360]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	f023 0301 	bic.w	r3, r3, #1
 8002aa4:	6213      	str	r3, [r2, #32]
 8002aa6:	4b58      	ldr	r3, [pc, #352]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	4a57      	ldr	r2, [pc, #348]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002aac:	f023 0304 	bic.w	r3, r3, #4
 8002ab0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d015      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aba:	f7fe fab9 	bl	8001030 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac0:	e00a      	b.n	8002ad8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac2:	f7fe fab5 	bl	8001030 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e0b1      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad8:	4b4b      	ldr	r3, [pc, #300]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0ee      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x37e>
 8002ae4:	e014      	b.n	8002b10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae6:	f7fe faa3 	bl	8001030 <HAL_GetTick>
 8002aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aec:	e00a      	b.n	8002b04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aee:	f7fe fa9f 	bl	8001030 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e09b      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b04:	4b40      	ldr	r3, [pc, #256]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1ee      	bne.n	8002aee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b10:	7dfb      	ldrb	r3, [r7, #23]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d105      	bne.n	8002b22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b16:	4b3c      	ldr	r3, [pc, #240]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	4a3b      	ldr	r2, [pc, #236]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 8087 	beq.w	8002c3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b2c:	4b36      	ldr	r3, [pc, #216]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 030c 	and.w	r3, r3, #12
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d061      	beq.n	8002bfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d146      	bne.n	8002bce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b40:	4b33      	ldr	r3, [pc, #204]	; (8002c10 <HAL_RCC_OscConfig+0x4cc>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b46:	f7fe fa73 	bl	8001030 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4e:	f7fe fa6f 	bl	8001030 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e06d      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b60:	4b29      	ldr	r3, [pc, #164]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d1f0      	bne.n	8002b4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b74:	d108      	bne.n	8002b88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b76:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	4921      	ldr	r1, [pc, #132]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b88:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a19      	ldr	r1, [r3, #32]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	491b      	ldr	r1, [pc, #108]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ba0:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <HAL_RCC_OscConfig+0x4cc>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba6:	f7fe fa43 	bl	8001030 <HAL_GetTick>
 8002baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bac:	e008      	b.n	8002bc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bae:	f7fe fa3f 	bl	8001030 <HAL_GetTick>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e03d      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0f0      	beq.n	8002bae <HAL_RCC_OscConfig+0x46a>
 8002bcc:	e035      	b.n	8002c3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bce:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <HAL_RCC_OscConfig+0x4cc>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd4:	f7fe fa2c 	bl	8001030 <HAL_GetTick>
 8002bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bda:	e008      	b.n	8002bee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bdc:	f7fe fa28 	bl	8001030 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e026      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bee:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <HAL_RCC_OscConfig+0x4c4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x498>
 8002bfa:	e01e      	b.n	8002c3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d107      	bne.n	8002c14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e019      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	40007000 	.word	0x40007000
 8002c10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c14:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <HAL_RCC_OscConfig+0x500>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d106      	bne.n	8002c36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d001      	beq.n	8002c3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40021000 	.word	0x40021000

08002c48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0d0      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c5c:	4b6a      	ldr	r3, [pc, #424]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d910      	bls.n	8002c8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6a:	4b67      	ldr	r3, [pc, #412]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f023 0207 	bic.w	r2, r3, #7
 8002c72:	4965      	ldr	r1, [pc, #404]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7a:	4b63      	ldr	r3, [pc, #396]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d001      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0b8      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d020      	beq.n	8002cda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d005      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ca4:	4b59      	ldr	r3, [pc, #356]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	4a58      	ldr	r2, [pc, #352]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002caa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cbc:	4b53      	ldr	r3, [pc, #332]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4a52      	ldr	r2, [pc, #328]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002cc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc8:	4b50      	ldr	r3, [pc, #320]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	494d      	ldr	r1, [pc, #308]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d040      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d107      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cee:	4b47      	ldr	r3, [pc, #284]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d115      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e07f      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d107      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d06:	4b41      	ldr	r3, [pc, #260]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e073      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d16:	4b3d      	ldr	r3, [pc, #244]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e06b      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d26:	4b39      	ldr	r3, [pc, #228]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f023 0203 	bic.w	r2, r3, #3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	4936      	ldr	r1, [pc, #216]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d38:	f7fe f97a 	bl	8001030 <HAL_GetTick>
 8002d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3e:	e00a      	b.n	8002d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d40:	f7fe f976 	bl	8001030 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e053      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d56:	4b2d      	ldr	r3, [pc, #180]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 020c 	and.w	r2, r3, #12
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d1eb      	bne.n	8002d40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d68:	4b27      	ldr	r3, [pc, #156]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d210      	bcs.n	8002d98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d76:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f023 0207 	bic.w	r2, r3, #7
 8002d7e:	4922      	ldr	r1, [pc, #136]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d86:	4b20      	ldr	r3, [pc, #128]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d001      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e032      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da4:	4b19      	ldr	r3, [pc, #100]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	4916      	ldr	r1, [pc, #88]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d009      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dc2:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	490e      	ldr	r1, [pc, #56]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dd6:	f000 f821 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	490a      	ldr	r1, [pc, #40]	; (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002de8:	5ccb      	ldrb	r3, [r1, r3]
 8002dea:	fa22 f303 	lsr.w	r3, r2, r3
 8002dee:	4a09      	ldr	r2, [pc, #36]	; (8002e14 <HAL_RCC_ClockConfig+0x1cc>)
 8002df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002df2:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <HAL_RCC_ClockConfig+0x1d0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe f8d8 	bl	8000fac <HAL_InitTick>

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40022000 	.word	0x40022000
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	080032b0 	.word	0x080032b0
 8002e14:	200005dc 	.word	0x200005dc
 8002e18:	200005e0 	.word	0x200005e0

08002e1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	2300      	movs	r3, #0
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e36:	4b1e      	ldr	r3, [pc, #120]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f003 030c 	and.w	r3, r3, #12
 8002e42:	2b04      	cmp	r3, #4
 8002e44:	d002      	beq.n	8002e4c <HAL_RCC_GetSysClockFreq+0x30>
 8002e46:	2b08      	cmp	r3, #8
 8002e48:	d003      	beq.n	8002e52 <HAL_RCC_GetSysClockFreq+0x36>
 8002e4a:	e027      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e4c:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e4e:	613b      	str	r3, [r7, #16]
      break;
 8002e50:	e027      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	0c9b      	lsrs	r3, r3, #18
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	4a17      	ldr	r2, [pc, #92]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e5c:	5cd3      	ldrb	r3, [r2, r3]
 8002e5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d010      	beq.n	8002e8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e6a:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	0c5b      	lsrs	r3, r3, #17
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	4a11      	ldr	r2, [pc, #68]	; (8002ebc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e76:	5cd3      	ldrb	r3, [r2, r3]
 8002e78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a0d      	ldr	r2, [pc, #52]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e7e:	fb03 f202 	mul.w	r2, r3, r2
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	e004      	b.n	8002e96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a0c      	ldr	r2, [pc, #48]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e90:	fb02 f303 	mul.w	r3, r2, r3
 8002e94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	613b      	str	r3, [r7, #16]
      break;
 8002e9a:	e002      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e9c:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e9e:	613b      	str	r3, [r7, #16]
      break;
 8002ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ea2:	693b      	ldr	r3, [r7, #16]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	371c      	adds	r7, #28
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	007a1200 	.word	0x007a1200
 8002eb8:	080032c8 	.word	0x080032c8
 8002ebc:	080032d8 	.word	0x080032d8
 8002ec0:	003d0900 	.word	0x003d0900

08002ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec8:	4b02      	ldr	r3, [pc, #8]	; (8002ed4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002eca:	681b      	ldr	r3, [r3, #0]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr
 8002ed4:	200005dc 	.word	0x200005dc

08002ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002edc:	f7ff fff2 	bl	8002ec4 <HAL_RCC_GetHCLKFreq>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	0a1b      	lsrs	r3, r3, #8
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	4903      	ldr	r1, [pc, #12]	; (8002efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eee:	5ccb      	ldrb	r3, [r1, r3]
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	080032c0 	.word	0x080032c0

08002f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f04:	f7ff ffde 	bl	8002ec4 <HAL_RCC_GetHCLKFreq>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	0adb      	lsrs	r3, r3, #11
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	4903      	ldr	r1, [pc, #12]	; (8002f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f16:	5ccb      	ldrb	r3, [r1, r3]
 8002f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000
 8002f24:	080032c0 	.word	0x080032c0

08002f28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f30:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <RCC_Delay+0x34>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <RCC_Delay+0x38>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	0a5b      	lsrs	r3, r3, #9
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	fb02 f303 	mul.w	r3, r2, r3
 8002f42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f44:	bf00      	nop
  }
  while (Delay --);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1e5a      	subs	r2, r3, #1
 8002f4a:	60fa      	str	r2, [r7, #12]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f9      	bne.n	8002f44 <RCC_Delay+0x1c>
}
 8002f50:	bf00      	nop
 8002f52:	bf00      	nop
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr
 8002f5c:	200005dc 	.word	0x200005dc
 8002f60:	10624dd3 	.word	0x10624dd3

08002f64 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	613b      	str	r3, [r7, #16]
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d07d      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002f80:	2300      	movs	r3, #0
 8002f82:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f84:	4b4f      	ldr	r3, [pc, #316]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f86:	69db      	ldr	r3, [r3, #28]
 8002f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10d      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f90:	4b4c      	ldr	r3, [pc, #304]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	4a4b      	ldr	r2, [pc, #300]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	61d3      	str	r3, [r2, #28]
 8002f9c:	4b49      	ldr	r3, [pc, #292]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fac:	4b46      	ldr	r3, [pc, #280]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d118      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fb8:	4b43      	ldr	r3, [pc, #268]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a42      	ldr	r2, [pc, #264]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc4:	f7fe f834 	bl	8001030 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fca:	e008      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fcc:	f7fe f830 	bl	8001030 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b64      	cmp	r3, #100	; 0x64
 8002fd8:	d901      	bls.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e06d      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fde:	4b3a      	ldr	r3, [pc, #232]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002fea:	4b36      	ldr	r3, [pc, #216]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d02e      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	429a      	cmp	r2, r3
 8003006:	d027      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003008:	4b2e      	ldr	r3, [pc, #184]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003010:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003012:	4b2e      	ldr	r3, [pc, #184]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003014:	2201      	movs	r2, #1
 8003016:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003018:	4b2c      	ldr	r3, [pc, #176]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800301e:	4a29      	ldr	r2, [pc, #164]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d014      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302e:	f7fd ffff 	bl	8001030 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003034:	e00a      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003036:	f7fd fffb 	bl	8001030 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	f241 3288 	movw	r2, #5000	; 0x1388
 8003044:	4293      	cmp	r3, r2
 8003046:	d901      	bls.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e036      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304c:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0ee      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003058:	4b1a      	ldr	r3, [pc, #104]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	4917      	ldr	r1, [pc, #92]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003066:	4313      	orrs	r3, r2
 8003068:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800306a:	7dfb      	ldrb	r3, [r7, #23]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d105      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003070:	4b14      	ldr	r3, [pc, #80]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	4a13      	ldr	r2, [pc, #76]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003076:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800307a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d008      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003088:	4b0e      	ldr	r3, [pc, #56]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	490b      	ldr	r1, [pc, #44]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003096:	4313      	orrs	r3, r2
 8003098:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0310 	and.w	r3, r3, #16
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d008      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030a6:	4b07      	ldr	r3, [pc, #28]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	4904      	ldr	r1, [pc, #16]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3718      	adds	r7, #24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40007000 	.word	0x40007000
 80030cc:	42420440 	.word	0x42420440

080030d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	2300      	movs	r3, #0
 80030de:	61fb      	str	r3, [r7, #28]
 80030e0:	2300      	movs	r3, #0
 80030e2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	2300      	movs	r3, #0
 80030ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b10      	cmp	r3, #16
 80030f0:	d00a      	beq.n	8003108 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b10      	cmp	r3, #16
 80030f6:	f200 808a 	bhi.w	800320e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d045      	beq.n	800318c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d075      	beq.n	80031f2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003106:	e082      	b.n	800320e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003108:	4b46      	ldr	r3, [pc, #280]	; (8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800310e:	4b45      	ldr	r3, [pc, #276]	; (8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d07b      	beq.n	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	0c9b      	lsrs	r3, r3, #18
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	4a41      	ldr	r2, [pc, #260]	; (8003228 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003124:	5cd3      	ldrb	r3, [r2, r3]
 8003126:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d015      	beq.n	800315e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003132:	4b3c      	ldr	r3, [pc, #240]	; (8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	0c5b      	lsrs	r3, r3, #17
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	4a3b      	ldr	r2, [pc, #236]	; (800322c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800313e:	5cd3      	ldrb	r3, [r2, r3]
 8003140:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00d      	beq.n	8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800314c:	4a38      	ldr	r2, [pc, #224]	; (8003230 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	fbb2 f2f3 	udiv	r2, r2, r3
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	fb02 f303 	mul.w	r3, r2, r3
 800315a:	61fb      	str	r3, [r7, #28]
 800315c:	e004      	b.n	8003168 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4a34      	ldr	r2, [pc, #208]	; (8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003162:	fb02 f303 	mul.w	r3, r2, r3
 8003166:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003168:	4b2e      	ldr	r3, [pc, #184]	; (8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003174:	d102      	bne.n	800317c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	61bb      	str	r3, [r7, #24]
      break;
 800317a:	e04a      	b.n	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	4a2d      	ldr	r2, [pc, #180]	; (8003238 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003182:	fba2 2303 	umull	r2, r3, r2, r3
 8003186:	085b      	lsrs	r3, r3, #1
 8003188:	61bb      	str	r3, [r7, #24]
      break;
 800318a:	e042      	b.n	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800318c:	4b25      	ldr	r3, [pc, #148]	; (8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800319c:	d108      	bne.n	80031b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80031a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ac:	61bb      	str	r3, [r7, #24]
 80031ae:	e01f      	b.n	80031f0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ba:	d109      	bne.n	80031d0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80031bc:	4b19      	ldr	r3, [pc, #100]	; (8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80031c8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80031cc:	61bb      	str	r3, [r7, #24]
 80031ce:	e00f      	b.n	80031f0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031da:	d11c      	bne.n	8003216 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80031dc:	4b11      	ldr	r3, [pc, #68]	; (8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d016      	beq.n	8003216 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80031e8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80031ec:	61bb      	str	r3, [r7, #24]
      break;
 80031ee:	e012      	b.n	8003216 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80031f0:	e011      	b.n	8003216 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80031f2:	f7ff fe85 	bl	8002f00 <HAL_RCC_GetPCLK2Freq>
 80031f6:	4602      	mov	r2, r0
 80031f8:	4b0a      	ldr	r3, [pc, #40]	; (8003224 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	0b9b      	lsrs	r3, r3, #14
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	3301      	adds	r3, #1
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	fbb2 f3f3 	udiv	r3, r2, r3
 800320a:	61bb      	str	r3, [r7, #24]
      break;
 800320c:	e004      	b.n	8003218 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800320e:	bf00      	nop
 8003210:	e002      	b.n	8003218 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003212:	bf00      	nop
 8003214:	e000      	b.n	8003218 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003216:	bf00      	nop
    }
  }
  return (frequency);
 8003218:	69bb      	ldr	r3, [r7, #24]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3720      	adds	r7, #32
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40021000 	.word	0x40021000
 8003228:	080032dc 	.word	0x080032dc
 800322c:	080032ec 	.word	0x080032ec
 8003230:	007a1200 	.word	0x007a1200
 8003234:	003d0900 	.word	0x003d0900
 8003238:	aaaaaaab 	.word	0xaaaaaaab

0800323c <__libc_init_array>:
 800323c:	b570      	push	{r4, r5, r6, lr}
 800323e:	2600      	movs	r6, #0
 8003240:	4d0c      	ldr	r5, [pc, #48]	; (8003274 <__libc_init_array+0x38>)
 8003242:	4c0d      	ldr	r4, [pc, #52]	; (8003278 <__libc_init_array+0x3c>)
 8003244:	1b64      	subs	r4, r4, r5
 8003246:	10a4      	asrs	r4, r4, #2
 8003248:	42a6      	cmp	r6, r4
 800324a:	d109      	bne.n	8003260 <__libc_init_array+0x24>
 800324c:	f000 f822 	bl	8003294 <_init>
 8003250:	2600      	movs	r6, #0
 8003252:	4d0a      	ldr	r5, [pc, #40]	; (800327c <__libc_init_array+0x40>)
 8003254:	4c0a      	ldr	r4, [pc, #40]	; (8003280 <__libc_init_array+0x44>)
 8003256:	1b64      	subs	r4, r4, r5
 8003258:	10a4      	asrs	r4, r4, #2
 800325a:	42a6      	cmp	r6, r4
 800325c:	d105      	bne.n	800326a <__libc_init_array+0x2e>
 800325e:	bd70      	pop	{r4, r5, r6, pc}
 8003260:	f855 3b04 	ldr.w	r3, [r5], #4
 8003264:	4798      	blx	r3
 8003266:	3601      	adds	r6, #1
 8003268:	e7ee      	b.n	8003248 <__libc_init_array+0xc>
 800326a:	f855 3b04 	ldr.w	r3, [r5], #4
 800326e:	4798      	blx	r3
 8003270:	3601      	adds	r6, #1
 8003272:	e7f2      	b.n	800325a <__libc_init_array+0x1e>
 8003274:	080032f0 	.word	0x080032f0
 8003278:	080032f0 	.word	0x080032f0
 800327c:	080032f0 	.word	0x080032f0
 8003280:	080032f4 	.word	0x080032f4

08003284 <memset>:
 8003284:	4603      	mov	r3, r0
 8003286:	4402      	add	r2, r0
 8003288:	4293      	cmp	r3, r2
 800328a:	d100      	bne.n	800328e <memset+0xa>
 800328c:	4770      	bx	lr
 800328e:	f803 1b01 	strb.w	r1, [r3], #1
 8003292:	e7f9      	b.n	8003288 <memset+0x4>

08003294 <_init>:
 8003294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003296:	bf00      	nop
 8003298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800329a:	bc08      	pop	{r3}
 800329c:	469e      	mov	lr, r3
 800329e:	4770      	bx	lr

080032a0 <_fini>:
 80032a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032a2:	bf00      	nop
 80032a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032a6:	bc08      	pop	{r3}
 80032a8:	469e      	mov	lr, r3
 80032aa:	4770      	bx	lr
